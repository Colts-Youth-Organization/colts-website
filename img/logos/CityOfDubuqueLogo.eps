%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: CityOfDubuqueLogo.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: PrintMac
%%CreationDate: 6/17/10
%%BoundingBox: 0 0 1077 473
%%HiResBoundingBox: 0 0 1076.6172 472.5059
%%CropBox: 0 0 1076.6172 472.5059
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 56 8%%BeginData: 9738 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD42FFA97E7E30360D0E0D0E0D0E0D0E0D5A5A8484FD6AFFAF8453%362F5A537E7EA87EA97E7E5A5A2F2F070D070D07365AA9A9FD64FF5A5A5A%85A9FD0EFFAF7E7E2F0E070D0D305AAFFD60FF5A2F7EA8FD15FFA87E2F0D%070D075AA8FD5CFFA9365AFD1CFF852F0E0D0E7EFD5AFFA90D53FD1FFF7E%5A070D2FFD22FFA8FFA8FD07FFA8FFA8AFA8FD05FFA8A8FD04FFA8FFFFFF%A8FD09FFA8A8A8FFFFFFA8FD08FF360DFD22FF850D0D2FFD20FF527D277D%527D52FFFF7D52AF52527D7DA8FFFF7D52A8527D7D28537D5252527D277D%FF8452FFFFA8527D7D527DAF277D52A8FD05FF7E077EFD10FF845A0D5AFD%0FFFA90D0D2FFD20FFA852FFFFA87DA8FF7D7DFF7D7DFFA8FFFF7D52FFFF%FFA8FF52FFFFA852FFFFFF27A852FFFFFF52A8FFFFA852FF52A8FFA8FD05%FF2F0EA8FD0EFF8530302F5A7EFD11FF2F305AFD1FFFA827FFFFA8527D7D%5352FF5252537EFFFF527DFD04FFA852FFFF7D52FFFFFF7DF8A8FFFFFF52%A8FFFFFF27FF527D52FD05FFA90D07AFFD0CFF7E3053A9FD15FFA9070D84%FD1EFFA852FFFF7D7DFFFF7D7DFF7D7DFFA8FFFFA827A8FFFFFFA827FFFF%8427FFFFFF7D27FD04FF527DFFFF7D52FF52A8FD07FF0D0D7EFD0BFF5A5A%A8FD0DFFA9855AFD08FF85075AFD1EFF7D28A8FF7D52FFFF7D52FF597D7D%7DA8FFFF7E527D52A87D527DFF5252A8FFFF7D27A8FD04FF527D7D7DA8A8%277DFD06FFA930075AFD0AFF535AFD0CFFA87E535A53A9FD09FF5407A9FD%31FFA8FD21FF7E0D0DA9FD08FF5A7EFD0AFF847E2F5A5AA9FD0CFF840E7E%FD54FF2F0D077EFD06FF7E5AFD06FF847E5A5A2F5A5AA9FD10FF0D5AFD55%FF7E30070E5A7E7EA9A8367EA97E7E545A2F5A5A85A8FD09FFA8A984847E%857EA984AFFF5A53FD56FFA97E53302F302F300D5A537E5A84A8FD07FFA8%845A5A0D2F0D0D070D070D070D070D072F0D2F7EAFFD1AFF855A847E857E%857E857E847E7E5A847EAFFD08FF5A5A545A5A5A545A5A5A545A5A5A545A%5A5A545A5A5A54FD045A7E5A5A7EFD09FF5A7EFD09FFA95A5A2F302F5A54%7E7EA984A984A97E855A5A0D0E0D0E0D0E0D5A84FFFFFFAFFFFFFFAFFFFF%FFAFFFFFFFAFFFFFFFAFFFFFFFAF5A5A0D0D070D0D2F0D300D2F0D0E0D0D%07305384FD05FF5A2F302F302F302F302F302F302F302F302F302F302F30%2F30070D070D070D0D5A7EA9FD05FF5A7EFD05FF7E7E2F300D5A5AA8A8FD%0FFF7E5A0D0D070D070D0D300D2F0D300D2F0D300D2F0D300D2F0D300D2F%0D300D30FFFFA90D0E0D85FD08FF845A0D0D0D36A8FD1CFFA95A5A0D0E0D%0D070E0D302F5A5A7E0D5A5A5A2F360D302F7EA8FD15FF8430A8AFA8AFA9%A9A8AFA8A9A8AFA8A9A8AFA8A9A8AFA8A9A8AFA8A9A8A9A9FFFF840D070D%7EFD0AFFA92F0D070D7EFD1FFF7E845A5A2F300D2F0D2F0D0D075A537E7E%AFFD19FF3053FD20FF0D0E0DA9FD0CFF2F0E0D30A9FD29FF5A5AFD1DFF84%0DFD20FFA80E0D0D7EFD0CFFA90D0D075AFD2AFF0DA9FD10FFA9FFA8FD08%FFA90DA9FD20FFA90D0E0DA9FD0DFF5A0D0E0DA95A362F5A30362FFD05FF%5A362F5A2F5AFF7E2F5A2F5A2F360D302F5AA8FFFFA92F5A305A2F367E84%0DFFFFA92F5A305A2FA9FD04FFA97E2F300D300D302F7EA9FFFFA90D3054%5A2F5A2F5AFD05FF5A2F5A2F365AFF2F5A305A2F362F302F362F367EFFFF%A80D070D7EFD0DFF5A0D070D5AA97E0D070D5AA8A8FD04FFA97E30075A84%FF847E070D0D7E5A7E530D070D7EFFA884530D07307EA9FF7E2FFFFF8459%0D0D84A8FFFFFF530D0D5A7EFFA9A95A30070D7E840D84847E0D0D077E7E%FD05FF7E840D0D59A9AFA85A0D072F535A545A535A075AFFFFAF0D0E0DA9%FD0DFFA90D0E0D7EFFFF540E2FFD09FF5A0EFD05FF30077EFD04FFA93007%5AFD04FF0D0E7EFD04FF852FA9FFFF0D7EFD04FF2F3054FD08FF840D0E0D%FD04FF5A075AFD09FF7E0DFD05FF300D5AFD06FF5A5AFFFFA80D070D7EFD%0DFF7E0D0D0D53FFFF5A0730FD09FF5A0DFD05FF2F0D53FD05FF2F0D53FF%FFFFA80E077EFD05FFA92F5A7E307EFFFFFF530D2FFD08FFA95A0D070D84%FFFFFF2F0D2FFD09FF5A2FFD05FF5A075AFD06FFA8A9FFFFAF0D0E0DA9FD%0DFFA90D0E0D5AFFFF5A0D2FFD09FF7E30FD05FF360D5AFD04FFA80E0DA9%FFFFFFA90D0E7EFD07FF7E5A0D5AA8FFA80E0DA9FD04FFAFA95A362F85A9%30075AFFFFFF5A0D5AFD09FF7E2FFD05FF2F0D5AFD0AFFA80D070D7EFD0D%FF7E0D070D5AFFFF5A0730A9FD08FF7E0DFD05FF0D0D53FFA8AF7E2F0D84%FD04FFA80D0784FD09FF2F0D300D2F070D2F5A2F5A2F2F2F5A7EFFFFFF2F%0D07FFFFFF2F0D2FFD09FF5330FD05FF54075AFD04FFA830A8FD04FF0D0E%0DA9FD0DFF7E0D0E0DAFFFFF5A0D2FFD09FF7E30FD05FF360D0E0D300D0D%0D85FD05FFAF0D0E7EFD09FF0D85FFFF2F0E0D5A5A7E7EA9A9FD06FF7E0D%30A9FFFF5A0D5AFD09FF7E2FFD05FF2F0E30857E857E5A0DFD04FFA80E0D%0D7EFD0DFF0D0D075AFFFFFF5A0730FD09FF7E0DFD05FF2F0D2FA984A97E%3007307EFFFFFFA80D0784FD09FF2F5AFFFF5A070EAFFD0BFF7E0D07AFFF%FF2F0D2FFD09FF5330FD05FF5A07300D2F0D300730FD04FFA90D0E0DA9FD%0CFF7E0E0D0D84FFFFFF540E2FFD09FF5A30FD05FF30077EFD05FF5A0730%FFFFFFAF0D0D7EFD09FF0D84FFFF5A0D0DA9FD0BFF840D30FFFFFF5A075A%FD09FF7E2FFD05FF300D54FD04FFA90DFD04FFA80D070D7EFD0BFFA80D07%0D5AFD04FF5A0730FD09FF5A07FD05FF2F0D53FD05FFA80D07A9FFFFA80D%077EFD08FFA80D7EFFFF7E070D5AFD0BFF530D2FFFFFFF2F0D2FFD09FF53%30FD05FF5A075AFD04FFA85AA9FFFFFFAF0D0E0D85FD0BFF360D0E5AFD05%FF5A302FFD09FF5436FD05FF36077EFD06FF0D0EA9FFFFFF0D0E7EFD09FF%0DA9FFFFA90E0D36FD0BFF360DA9FFFFFF5A075AFD09FF5A2FFD05FF540D%5AFD0AFFA80D070D7EFD09FF7E30070D5AFD06FF7E070EA8FD07FFA80D53%FD05FF2F0D53FD05FF5A0D0DFD04FF30075AFD08FF530DA9FFFFFF5A0D07%7EFD09FF7E075AFD04FF5A0D0DFD08FFA9077EFD05FF5A075AFD07FF30FF%FF7E0D0E0D5A5A7E7E857E7E5A5A0D0D0D5AA9FD07FFA9300736A8FD05FF%A8300DFD06FF300D5AFD04FF5A0E0DA9FD04FF5A0E0D7EFD06FF5A0D5AFD%05FF540D077EFD06FFA95A0D5AFD06FF0D0D2FFD06FFA90D30FD06FF2F0D%5AFD06FFA92FFF7E070D0D0D070D070D070D070D075A5AA9FD0AFFA83007%0D0D5A2F5A0D0D0DAFFD05FF5A070D072F2F30070D2FA9FD06FF530D070D%2F5A2F30070D5AFD07FF7E2F070D53847E842F0D077EFD07FFA90D0D0730%2F5A2F300730A8FD04FF84530D070D2F302F302F300730FFA9FD05FFA9AF%A8FFA9AFAFFD10FFA95A5A2F36305A84FD07FF7E857E857E857EA9A9FD09%FFA9845A5A2F365485A9FD0AFFA97E5A0D0E0D5A7EFD0BFF7E7E54362F5A%5AA9FD06FF7E7E7EA97E847E857E847E8584FD53FFA92F0D070D2F7E84FD%78FF2F84A9A95A360D0D0D5A5A5A7EFD7AFF7E5A0D307EFD21FFA97E857E%857E857E857E857E857E857E857E857E857E857E857E857E857E857E857E%857E857E857E857E857E857E857E857E857E857E857E857E857E857E857E%857E857E857E857E857E857E857E857E857E857E857E857EA97EA97E857E%A97E857E857E857E857E857E857E857E857E857E857E857E857E857E857E%857E857E2F0D070D070D070D070D070D070D070D070D070D070D070D070D%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D%070D070D070D070D070D070D5A0D300D300D300D300D300D300D300D300D%300D300D300D300D300D300D300D300D300D300D300D300D300D300D300D%300D300D300D300D300D300D300D300D300D300D300D300D300D300D300D%300D300D300D300D300D300D300D300D300D300D300D300D300D300D300D%300D300D300D300D300D300D300D300D300D300DA9FFA8FFA9FFA8FFA9FF%A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FF%A9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FF%A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FF%A9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FD83FF%A8FD07FFA8FD3BFFA8FD0BFFA8FD07FFA8FD17FFA8FD0EFFA8527DFD04FF%7D52FD0BFFA8FD0EFFA852FD1DFFA8FFA8527EFD0AFF7D52FD04FF7D52FF%A87DFD09FFA852FD09FF7D7DFD0BFFA852FFFF5227FFFFFFA8F87DFD0AFF%527DFD2DFF527DFF27FD0BFF7D27A8FFFFA8F87DFFFFA8FD0AFFAFFD0AFF%A8FD0BFFA8FFFFFF7D27FFFFFF525284FFA87E7DFFFFA859FFFF527DFFA8%7D7DFF7DA87DA87DFF7DA8FF7EA8FFA87D7DFFA87E7DFFFFA87DFD04FFA8%53A8FF84A8FF7DFD05FF27A8A87DFFA87DFFA87D7DFD04FF7D27A8FFFF7D%527DFF7DA8FFA952A8FFA952A8FF7DA8FFA87D7EFFA87DA8FF7DFF84A8A8%7DA8AF7DFF7DA8FF7DA8FFA87D7D53FF7DA852A8FF7DA852A87D7EA8A8A8%277DA87D7D52A852277D7D27537D27A827A8A87D7D52A87DA87DA87D7D27%A8FFFF7D7DA827A852527D2784FFFFFF7D277DA852A8277DA87D7D27FD04%FF7D7D52FF7D7D5284A8277DA852A87DA853A87DA827A87D7DA8A87D7DA8%7D7D27A87D27A852527D277D7D52A827A8FF7DA8A853A87DFF52A87E7DFF%52FF52527DFFA87DFF7D527D7DFF527DFFFF27FFA852FF7DFF7D527DA884%7DFFFF7D527E7DFFFFFF27FFFF52FF7D7DFF52FD04FFA87DFF7D52FF7D84%7D527D7DFFFFFF8484A852A87DFF7D7DFF52A9A8527DFFA8527DFFFF59FF%A82784FF8427A8FFFF52FF7D52FF7D7DFF27FF7D7DFF53FFFF7DA8FF2752%A8FF27FF52A85252FFFF7D52A87D7DFF27A8FFFFA852A8FF7D7DFF7D7DFF%52FF27A8FFFF52A8FFFF527DFD04FFA852FFA852FF27FFA852FD04FF527D%FF527DFF52AF27A8FD05FF7D7DFF2E527DFF52A8A852FFFFA85252FFA852%52A852FFA8A8277DFFA827A87D7DFF7D7DFF52FF7D7DFF527DA852FFA827%FFFF5252FFA827A853537D52A87DFF7DFF5252A87D7DA8A8A852FFFF7D52%A87DFF7D52A87D7DA8A87D52A8847D53A8A8FFFFFF27A853A9A852FF7D27%FD04FF5252A852FFA8277E537DA8A8FFFFFF27FFFF7D52FFA8527DA827A8%7DA87EA87DA884FF7D52A87DA8A8A87DA8A8FF7D52FF527D7DA8FF7D53A8%7DFF5952A87E7DA8FFA8FFFFA87DA87DFD04A87D7DFFFFA87DFFA87D7EFF%A8A8FFFF52537DFFFFA87DFFA87DA8FFA87D7DFFA87D7DFD04FFA87DA9FF%A87DFFA87DA8FFFFFF7DA8A8A8FFFF7DFFA87D7EFFFFFFA87D7EFFA8A8FF%A87DA8A8A8FFA852A8FFA852A8FFA87DFF7D7DA8FF7D7DA8FF7DA8A8527D%A8FFFF527D7DFFFFA87DFD1FFF52FD53FFA852FFFFFFA852FD24FFA82EFD%53FF7D7DFFFFFFA852FD06FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 286 C)
%%CMYKCustomColor: 1 0.6600 0 0.0200 (PANTONE 286 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:FA7F11740720681194579CC35302C221</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:FA7F11740720681194579CC35302C221</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>adobe:docid:indd:1ec0677c-d687-11dd-9d81-8b801bda9bd6</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F97F11740720681194579CC35302C221</stRef:instanceID>
            <stRef:documentID>xmp.did:F97F11740720681194579CC35302C221</stRef:documentID>
            <stRef:originalDocumentID>adobe:docid:indd:1ec0677c-d687-11dd-9d81-8b801bda9bd6</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:16F503924108DE118DD49DB6653E1EA5</stEvt:instanceID>
                  <stEvt:when>2009-03-03T16:20:58-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:17F503924108DE118DD49DB6653E1EA5</stEvt:instanceID>
                  <stEvt:when>2009-03-03T16:20:58-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:18F503924108DE118DD49DB6653E1EA5</stEvt:instanceID>
                  <stEvt:when>2009-03-03T16:28:08-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:19F503924108DE118DD49DB6653E1EA5</stEvt:instanceID>
                  <stEvt:when>2009-03-03T16:34:23-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1AF503924108DE118DD49DB6653E1EA5</stEvt:instanceID>
                  <stEvt:when>2009-03-03T16:36:58-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EC09271F4408DE11BECA880A7D400234</stEvt:instanceID>
                  <stEvt:when>2009-03-03T16:39:14-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:72A782A24408DE11941093C57774C67C</stEvt:instanceID>
                  <stEvt:when>2009-03-03T16:42:54-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A2A42D341009DE11A7D2B8954E1B2C46</stEvt:instanceID>
                  <stEvt:when>2009-03-04T17:00:42-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:63CC1965C109DE11957AEC0C10AA7162</stEvt:instanceID>
                  <stEvt:when>2009-03-05T14:08:29-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:64CC1965C109DE11957AEC0C10AA7162</stEvt:instanceID>
                  <stEvt:when>2009-03-05T14:08:29-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/;/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:338F1C34BF13DE1184F4EBBDE84491F0</stEvt:instanceID>
                  <stEvt:when>2009-03-18T11:43:57-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:391B1CA90E1EDE119E5DA574297636BB</stEvt:instanceID>
                  <stEvt:when>2009-03-31T14:08:11-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:455CCA428E2ADE118CC3D54489572988</stEvt:instanceID>
                  <stEvt:when>2009-04-16T08:55:36-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9F55F076C234DE11B483A9BF060200EB</stEvt:instanceID>
                  <stEvt:when>2009-04-29T08:34:29-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A055F076C234DE11B483A9BF060200EB</stEvt:instanceID>
                  <stEvt:when>2009-04-29T08:34:47-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A155F076C234DE11B483A9BF060200EB</stEvt:instanceID>
                  <stEvt:when>2009-04-29T08:36:28-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B483C5501C3BDE119530C1CF5808CDFF</stEvt:instanceID>
                  <stEvt:when>2009-05-07T10:32:46-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B583C5501C3BDE119530C1CF5808CDFF</stEvt:instanceID>
                  <stEvt:when>2009-05-07T10:40:01-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681194579CC35302C221</stEvt:instanceID>
                  <stEvt:when>2010-06-17T09:59:33-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F11740720681194579CC35302C221</stEvt:instanceID>
                  <stEvt:when>2010-06-17T09:59:44-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2010-06-17T09:59:44-05:00</xmp:CreateDate>
         <xmp:ModifyDate>2010-06-17T09:59:44-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2010-06-17T09:59:44-05:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>112</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAcAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FVC/1Cx0+0lvL6eO2tIRylnlYIij3JyUYGRoCyxlIRFnYMUHnbW9ZFPKOivd2&#xA;7bLrGolrOzIr9qNSpnmX/VUfPMr8tGH95Kj3Dc/qDj+PKX0RvzOw/WfkpSeUPP2p/Fq/m57NGNTa&#xA;aPbpbqvss8hklP05IajFH6YX/WN/YjwcsvqnX9UV99oOf8kfLV3U6jqmsag5pV7q9LttX/JHjkh2&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:idPriv="http://ns.adobe.com/xmp/InDesign/private">
         <idPriv:DocChangeCount>656</idPriv:DocChangeCount>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF Library 9.0</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>33.250000</stDim:w>
            <stDim:h>33.500000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 286 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 200 CV</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>64.999405</xmpG:yellow>
                           <xmpG:black>14.999400</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 280 CV</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>72.000099</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>17.999300</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 286 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>66.000404</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>2.000430</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -472.506 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 472.506 li
1076.62 472.506 li
1076.62 0 li
cp
clp
[1 0 0 1 0 0 ]ct
39.8188 59.3809 mo
39.5728 60.7295 39.439 62.125 39.4189 63.5693 cv
39.3589 68.1406 li
39.043 68.4141 li
37.0957 68.4141 li
36.7539 68.168 li
36.6479 65.832 36.5327 64.4668 36.4077 64.0596 cv
36.1606 63.3291 35.499 62.9023 34.4268 62.7793 cv
34.0088 62.7188 32.0708 62.6904 28.5967 62.6904 cv
23.7349 62.6904 li
23.6978 63.3291 23.6748 65.8691 23.6748 70.3047 cv
23.6748 85.8574 li
23.6748 90.2031 23.8057 93.0352 24.0786 94.3506 cv
24.1816 94.8828 24.5308 95.2139 25.1299 95.3623 cv
25.439 95.4346 27.354 95.5234 29.4629 95.6348 cv
29.7749 95.9082 li
29.7749 97.7432 li
29.4629 98.0176 li
27.418 97.9053 24.2329 97.8594 19.9141 97.8594 cv
15.4897 97.8594 12.3027 97.9053 10.3608 98.0176 cv
10.0801 97.7734 li
10.0801 95.9082 li
10.3916 95.6348 li
12.501 95.5234 14.7598 95.4346 15.0688 95.3623 cv
15.6699 95.2139 16.0166 94.8828 16.1221 94.3506 cv
16.395 93.0352 16.5259 90.2031 16.5259 85.8574 cv
16.5259 70.3047 li
16.5259 65.792 16.498 63.2598 16.4326 62.6904 cv
10.9551 62.6904 li
7.24902 62.6904 5.08984 62.793 4.46973 62.9902 cv
4.13867 63.1025 3.91162 63.2393 3.78564 63.4004 cv
3.60303 63.6963 3.44385 64.2803 3.32178 65.1563 cv
3.17676 66.1279 3.08691 67.1162 3.04004 68.1406 cv
2.73389 68.4141 li
.776855 68.4141 li
.438965 68.1406 li
.379883 63.458 li
.349609 62.1436 .22998 60.7813 0 59.3809 cv
.281738 59.1035 li
1.50098 59.291 5.94775 59.3809 13.6157 59.3809 cv
26.1787 59.3809 li
33.2471 59.3809 37.6938 59.291 39.5117 59.1035 cv
39.8188 59.3809 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
94.3433 97.7432 mo
94.0103 98.0176 li
91.8013 97.9053 90.4121 97.8584 85.7534 97.8584 cv
80.9775 97.8584 79.5913 97.9053 77.4902 98.0176 cv
77.1553 97.7734 li
77.1553 95.9082 li
77.5244 95.6357 li
79.7993 95.5234 81.1025 95.4336 81.4385 95.3623 cv
82.0845 95.2148 82.4673 94.8818 82.5771 94.3506 cv
82.8613 93.0342 83.0093 90.2031 83.0093 85.8574 cv
83.0093 79.2598 li
81.873 79.166 76.2153 79.123 70.1323 79.123 cv
64.5112 79.123 56.7305 79.166 54.9453 79.2598 cv
54.9453 85.8574 li
54.9453 90.2031 55.0903 93.0342 55.3774 94.3506 cv
55.4893 94.8818 55.8662 95.2148 56.5142 95.3623 cv
56.8472 95.4336 58.1543 95.5234 60.4292 95.6357 cv
60.7603 95.9082 li
60.7603 97.7432 li
60.4595 98.0176 li
58.2344 97.9053 56.8423 97.8584 52.2021 97.8584 cv
47.4131 97.8584 46.0166 97.9053 43.9424 98.0176 cv
43.6104 97.7734 li
43.6104 95.9082 li
43.9424 95.6357 li
46.2202 95.5234 47.5205 95.4336 47.8564 95.3623 cv
48.5034 95.2148 48.8813 94.8818 48.9941 94.3506 cv
49.2861 93.0342 49.4292 90.2031 49.4292 85.8574 cv
49.4292 71.375 li
49.4292 67.0273 49.2861 64.1943 48.9941 62.8848 cv
48.8813 62.3486 48.5034 62.0146 47.8564 61.8691 cv
47.5205 61.7988 46.2202 61.7109 43.9424 61.5986 cv
43.6104 61.3262 li
43.6104 59.459 li
43.9424 59.2148 li
46.0825 59.3213 47.4785 59.3818 52.2021 59.3818 cv
57.0415 59.3818 58.4312 59.3213 60.4595 59.2148 cv
60.7603 59.459 li
60.7603 61.3496 li
60.4292 61.5986 li
58.1543 61.7109 56.8472 61.7988 56.5142 61.8691 cv
55.8662 62.0146 55.4893 62.3486 55.3774 62.8848 cv
55.0903 64.1943 54.9453 67.0273 54.9453 71.375 cv
54.9453 75.8916 li
57.3086 75.9814 64.6484 76.0303 68.7954 76.0303 cv
75.3042 76.0303 81.4043 75.9814 83.0093 75.8916 cv
83.0093 71.375 li
83.0093 67.0273 82.8613 64.1943 82.5771 62.8848 cv
82.4673 62.3486 82.0845 62.0146 81.4385 61.8691 cv
81.1025 61.7988 79.7993 61.7109 77.5244 61.5986 cv
77.1553 61.3262 li
77.1553 59.459 li
77.4902 59.2148 li
79.6543 59.3213 81.0464 59.3818 85.7534 59.3818 cv
90.6094 59.3818 92.0024 59.3213 94.0103 59.2148 cv
94.3433 59.459 li
94.3433 61.3496 li
94.0454 61.5986 li
91.7246 61.7109 90.4092 61.7988 90.0942 61.8691 cv
89.4492 62.0146 89.0674 62.3486 88.9595 62.8848 cv
88.6694 64.1943 88.5264 67.0273 88.5264 71.375 cv
88.5264 85.8574 li
88.5264 90.2031 88.6694 93.0342 88.9595 94.3506 cv
89.0674 94.8818 89.4492 95.2148 90.0942 95.3623 cv
90.4292 95.4336 91.7354 95.5234 94.0103 95.6357 cv
94.3433 95.9082 li
94.3433 97.7432 li
cp
f
136.033 88.7061 mo
135.568 91.376 135.337 94.3877 135.337 97.7441 cv
135.016 98.0166 li
108.658 97.8594 li
104.803 97.8594 104.131 97.9053 102.537 98.0166 cv
102.222 97.7441 li
102.222 96.9766 li
102.379 96.6523 li
103.947 95.7891 104.795 95.252 104.921 95.0361 cv
105.11 94.6816 105.227 93.4717 105.271 91.3896 cv
105.365 85.2559 li
105.365 71.374 li
105.365 67.0273 105.227 64.1934 104.951 62.8838 cv
104.85 62.3486 104.486 62.0137 103.876 61.8701 cv
103.555 61.7988 102.316 61.7109 100.156 61.5986 cv
99.8379 61.3262 li
99.8379 59.458 li
100.156 59.2148 li
102.294 59.3213 103.555 59.3809 108.021 59.3809 cv
112.004 59.3809 122.839 59.3213 134.001 59.2148 cv
134.351 59.4355 li
133.939 62.4707 li
133.813 63.4434 133.715 64.2588 133.652 64.9395 cv
133.43 67.4805 li
133.114 67.7832 li
131.27 67.7832 li
130.953 67.5117 li
130.934 65.0273 130.762 63.6133 130.447 63.2666 cv
130.215 63.0098 129.075 62.8066 127.027 62.6641 cv
124.987 62.5215 121.149 62.4473 119.605 62.4473 cv
117.759 62.4473 113.855 62.5098 111.969 62.6377 cv
111.737 64.5518 111.619 67.2139 111.619 70.6035 cv
111.619 76.6963 li
113.295 76.7842 114.651 76.835 115.684 76.835 cv
119.848 76.8047 li
121.8 76.7842 125.811 76.6484 126.063 76.3965 cv
126.403 76.0645 126.627 74.8359 126.73 72.6982 cv
127.051 72.4189 li
129.017 72.4189 li
129.335 72.6982 li
129.255 74.7412 129.209 76.6133 129.209 78.3105 cv
129.209 80.1523 129.255 82.1689 129.335 84.3613 cv
129.017 84.6074 li
126.887 84.6074 li
126.57 84.3359 li
126.57 82.2393 126.403 80.9893 126.063 80.5996 cv
125.725 80.2051 121.785 79.9434 120.069 79.8184 cv
118.779 79.7256 117.399 79.6807 115.941 79.6807 cv
114.399 79.6807 112.958 79.7256 111.619 79.8184 cv
111.619 87.751 li
111.619 90.1377 111.676 92.459 111.78 94.7041 cv
118.144 94.7041 li
124.327 94.7041 130.16 94.4961 131.558 94.0771 cv
131.787 94 131.959 93.9023 132.066 93.7715 cv
132.276 93.5195 132.478 92.9707 132.667 92.1318 cv
133.43 88.7363 li
133.747 88.4355 li
135.686 88.4355 li
136.033 88.7061 li
cp
f
198.734 93.0254 mo
197.22 95.8184 li
192.604 97.9365 187.436 98.9932 181.724 98.9932 cv
170.292 98.9932 162.472 95.5645 158.272 88.6992 cv
156.321 85.5195 155.351 82.0781 155.351 78.373 cv
155.351 72.3867 157.734 67.6094 162.511 64.0508 cv
167.39 60.3828 174.056 58.5469 182.512 58.5469 cv
187.876 58.5469 193.116 59.3604 198.24 60.9863 cv
198.671 61.3975 li
197.922 63.9131 197.463 66.8613 197.287 70.2422 cv
196.996 70.5137 li
195.052 70.5137 li
194.729 70.2129 li
194.662 68.0078 194.541 66.4688 194.364 65.6123 cv
191.632 63.0391 185.634 61.749 180.469 61.749 cv
175.146 61.749 170.974 63.1572 167.954 65.9668 cv
164.931 68.7813 163.418 72.5918 163.418 77.417 cv
163.418 83.9316 166.111 88.9375 171.5 92.4199 cv
174.365 94.2852 178.214 95.2148 183.028 95.2148 cv
187.408 95.2148 193.734 94.2715 197.914 92.3955 cv
198.734 93.0254 li
cp
f
223.711 97.7432 mo
223.426 98.0176 li
221.311 97.9053 218.037 97.8584 213.615 97.8584 cv
209.208 97.8584 205.949 97.9053 203.829 98.0176 cv
203.543 97.7432 li
203.543 95.9082 li
203.862 95.6357 li
206.022 95.5234 207.922 95.4336 208.242 95.3623 cv
208.855 95.2148 209.213 94.8818 209.319 94.3506 cv
209.597 93.0342 209.735 90.2031 209.735 85.8574 cv
209.735 71.375 li
209.735 67.0273 209.597 64.1943 209.319 62.8848 cv
209.213 62.3486 208.855 62.0146 208.242 61.8691 cv
207.922 61.7988 206.022 61.7109 203.862 61.5986 cv
203.543 61.3262 li
203.543 59.459 li
203.862 59.2148 li
205.897 59.3213 209.153 59.3818 213.642 59.3818 cv
218.109 59.3818 221.365 59.3213 223.399 59.2148 cv
223.711 59.459 li
223.711 61.3262 li
223.399 61.5986 li
221.236 61.7109 219.333 61.7988 219.018 61.8691 cv
218.405 62.0146 218.041 62.3486 217.938 62.8848 cv
217.663 64.1943 217.526 67.0273 217.526 71.375 cv
217.526 85.8574 li
217.526 90.2031 217.663 93.0342 217.938 94.3506 cv
218.041 94.8818 218.405 95.2148 219.018 95.3623 cv
219.333 95.4336 221.236 95.5234 223.399 95.6357 cv
223.711 95.9082 li
223.711 97.7432 li
cp
f
264.287 59.3809 mo
264.035 60.7295 263.895 62.125 263.874 63.5693 cv
263.812 68.1406 li
263.491 68.4141 li
261.493 68.4141 li
261.138 68.168 li
261.034 65.832 260.921 64.4668 260.789 64.0596 cv
260.537 63.3291 259.861 62.9023 258.76 62.7793 cv
258.336 62.7188 258.388 62.6904 254.828 62.6904 cv
250.005 62.6904 li
249.958 63.3291 249.942 65.8691 249.942 70.3047 cv
249.942 85.8574 li
249.942 90.2031 250.079 93.0352 250.355 94.3506 cv
250.457 94.8828 250.818 95.2139 251.435 95.3623 cv
251.753 95.4346 253.558 95.5234 255.724 95.6348 cv
256.038 95.9082 li
256.038 97.7432 li
255.724 98.0176 li
253.625 97.9053 250.363 97.8594 245.937 97.8594 cv
241.407 97.8594 238.146 97.9053 236.155 98.0176 cv
235.868 97.7734 li
235.868 95.9082 li
236.184 95.6348 li
238.35 95.5234 240.171 95.4346 240.489 95.3623 cv
241.102 95.2139 241.467 94.8828 241.566 94.3506 cv
241.842 93.0352 241.981 90.2031 241.981 85.8574 cv
241.981 70.3047 li
241.981 65.792 241.951 63.2598 241.885 62.6904 cv
236.758 62.6904 li
232.969 62.6904 230.753 62.793 230.117 62.9902 cv
229.782 63.1025 229.551 63.2393 229.421 63.4004 cv
229.23 63.6963 229.072 64.2803 228.946 65.1563 cv
228.796 66.1279 228.7 67.1162 228.659 68.1406 cv
228.344 68.4141 li
226.342 68.4141 li
225.989 68.1406 li
225.926 63.458 li
225.906 62.1436 225.78 60.7813 225.549 59.3809 cv
225.829 59.1035 li
227.081 59.291 231.637 59.3809 239.49 59.3809 cv
252.354 59.3809 li
259.594 59.3809 262.104 59.291 263.967 59.1035 cv
264.287 59.3809 li
cp
f
308.86 60.4609 mo
305.518 64.3926 301.852 69.1992 297.87 74.8984 cv
295.626 78.1094 294.385 80.1641 294.155 81.0586 cv
294.026 81.5342 293.964 82.2148 293.964 83.1104 cv
293.964 85.8262 li
293.964 91.1738 294.155 94.1494 294.537 94.7471 cv
294.706 95.0039 294.95 95.168 295.27 95.2422 cv
295.795 95.3721 297.102 95.4902 299.172 95.6006 cv
299.494 95.8701 li
299.494 97.7061 li
299.172 97.9824 li
297.074 97.8691 293.818 97.8154 289.393 97.8154 cv
284.857 97.8154 281.598 97.8691 279.607 97.9824 cv
279.323 97.7354 li
279.323 95.8701 li
279.638 95.6006 li
281.718 95.4902 283.02 95.3721 283.544 95.2422 cv
283.865 95.168 284.107 95.0039 284.278 94.7471 cv
284.655 94.1494 284.85 91.1738 284.85 85.8262 cv
284.85 82.5898 li
284.85 81.8984 283.186 79.123 279.862 74.2646 cv
276.473 69.3164 273.777 65.959 271.765 64.1885 cv
270.785 63.3291 270.135 62.8418 269.794 62.7207 cv
269.454 62.6045 268.662 62.5469 267.41 62.5469 cv
267.063 62.2432 li
267.063 60.7129 li
267.385 60.4092 li
272.544 59.5322 273.82 58.9131 275.28 58.5469 cv
276.382 59.002 277.363 59.5957 278.232 60.3271 cv
280.034 61.8438 282.446 65.2207 285.479 70.46 cv
290.459 79.3994 li
291.708 77.666 295.309 72.4111 298.824 67.1758 cv
302.348 61.7275 li
302.731 61.1221 303.25 60.291 303.906 59.2314 cv
308.544 59.2314 li
308.86 59.5039 li
308.86 60.4609 li
cp
f
372.145 79 mo
372.145 73.7109 370.614 69.5039 367.555 66.3916 cv
364.495 63.2803 360.011 61.7275 354.098 61.7275 cv
346.295 61.7275 341.121 64.1631 338.574 69.0352 cv
337.259 71.5391 336.602 74.3379 336.602 77.4395 cv
336.602 83.083 338.099 87.5381 341.096 90.8057 cv
344.195 94.1836 348.831 95.8701 355.005 95.8701 cv
362.488 95.8701 367.519 93.3096 370.097 88.1777 cv
371.462 85.4609 372.145 82.3955 372.145 79 cv
378.482 77.5859 mo
378.482 84.3184 376.21 89.6016 371.65 93.4346 cv
367.226 97.1631 361.185 99.0225 353.519 99.0225 cv
346.273 99.0225 340.588 97.2666 336.459 93.7471 cv
332.331 90.2383 330.265 85.3506 330.265 79.0879 cv
330.265 70.3057 334.155 64.2285 341.924 60.8477 cv
345.458 59.3154 349.811 58.5469 354.973 58.5469 cv
362.366 58.5469 368.113 60.2207 372.221 63.5586 cv
376.393 66.9531 378.482 71.6289 378.482 77.5859 cv
f
415.324 59.4355 mo
414.911 62.5576 li
414.829 63.248 414.73 64.1631 414.626 65.2949 cv
414.436 67.4805 li
414.115 67.7832 li
412.273 67.7832 li
411.958 67.5117 li
411.914 65.0479 411.748 63.6416 411.45 63.291 cv
410.961 62.7305 405.967 62.4473 400.55 62.4473 cv
399.678 62.4473 398.314 62.5 396.449 62.6094 cv
396.211 64.4727 396.1 67.8125 396.1 72.6328 cv
396.1 77.3535 li
399.689 77.4336 li
400.77 77.4531 404.813 77.4141 407.734 77.3242 cv
408.305 77.3076 408.684 77.168 408.874 76.9121 cv
409.196 76.4736 409.385 75.2676 409.451 73.2969 cv
409.766 73.0234 li
411.734 73.0234 li
412.057 73.2969 li
411.966 75.3418 411.93 77.2129 411.93 78.9131 cv
411.93 80.752 411.966 82.7715 412.057 84.9639 cv
411.734 85.2119 li
409.61 85.2119 li
409.29 84.9346 li
409.29 83.0215 409.196 81.8984 409.001 81.5684 cv
408.646 80.9297 407.551 80.543 405.733 80.4141 cv
404.483 80.3252 401.214 80.2793 400.005 80.2793 cv
398.543 80.2793 397.245 80.3096 396.1 80.3613 cv
396.1 85.8574 li
396.1 90.1895 396.238 93.0137 396.512 94.3506 cv
396.617 94.8818 396.979 95.2148 397.589 95.3633 cv
397.741 95.3984 399.251 95.4902 402.135 95.6357 cv
402.452 95.9082 li
402.452 97.7441 li
402.103 98.0166 li
391.375 97.8594 li
389.553 97.8359 387.036 97.8916 383.816 98.0166 cv
383.498 97.7734 li
383.498 95.9082 li
383.816 95.6357 li
385.979 95.5234 387.214 95.4336 387.533 95.3633 cv
388.149 95.2148 388.507 94.8818 388.617 94.3506 cv
388.887 93.0137 389.029 90.1895 389.029 85.8574 cv
389.029 71.374 li
389.029 67.0479 388.887 64.2197 388.617 62.8838 cv
388.507 62.3486 388.149 62.0137 387.533 61.8701 cv
387.214 61.7988 385.979 61.7109 383.816 61.5986 cv
383.498 61.3262 li
383.498 59.458 li
383.816 59.2148 li
385.852 59.3203 389.109 59.3809 393.598 59.3809 cv
396.504 59.3809 403.639 59.3203 415.01 59.2148 cv
415.324 59.4355 li
cp
f
175.139 216.498 mo
175.139 194.605 168.732 177.768 155.917 165.989 cv
149.224 159.828 140.857 155.484 130.816 152.95 cv
121.25 150.578 107.91 149.395 90.7925 149.395 cv
81.8994 149.395 61.7954 149.909 53.6636 150.929 cv
52.7124 159.789 52.2334 181.208 52.2334 215.2 cv
52.5234 267.009 li
52.6152 278.548 52.9985 286.216 53.6636 290.008 cv
62.0815 291.113 82.2813 291.667 91.0796 291.667 cv
110.109 291.667 125.123 289.378 136.121 284.792 cv
147.98 279.813 157.398 271.355 164.384 259.42 cv
171.552 247.088 175.139 232.781 175.139 216.498 cv
206.695 212.105 mo
206.695 238.135 196.917 259.706 177.363 276.832 cv
167.809 285.199 156.216 291.685 142.59 296.294 cv
127.987 301.279 110.958 303.621 91.4922 303.31 cv
44.6416 302.624 li
31.9014 302.468 21.3687 302.695 13.0508 303.31 cv
11.7246 302.162 li
11.7246 298.938 li
12.3916 297.556 li
18.9355 293.943 22.4775 291.685 23.0073 290.763 cv
23.8037 289.38 24.2905 284.275 24.4624 275.441 cv
24.8633 249.646 li
24.8633 191.262 li
24.8633 172.992 24.2905 157.009 23.1387 151.484 cv
22.6914 149.253 21.1904 147.836 18.6255 147.217 cv
17.2964 146.913 12.1245 146.53 3.09961 146.066 cv
1.77344 144.919 li
1.77344 141.168 li
3.09961 140.135 li
12.4775 140.592 21.4146 140.827 29.9067 140.827 cv
50.5215 140.827 69.1035 140.592 85.6523 140.135 cv
93.8784 139.905 102.153 139.788 110.471 139.788 cv
133.474 139.788 149.086 144.096 161.387 148.627 cv
174.834 153.616 185.364 161.451 192.974 172.117 cv
200.756 183.099 206.695 195.066 206.695 212.105 cv
/0 
<<
/Name (PANTONE 286 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 .660004 0 .0200043 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
462.547 267.889 mo
462.547 251.187 442.646 244.876 423.272 244.876 cv
420.812 244.876 411.887 244.959 408.748 245.127 cv
408.748 283.797 li
408.748 287.973 408.872 292.059 409.112 296.067 cv
411.635 296.463 421.301 296.623 425.854 296.66 cv
438.923 296.755 451.324 292.166 456 287.26 cv
460.367 282.587 462.547 276.129 462.547 267.889 cv
456.54 212.43 mo
456.54 200.127 441.293 196.016 427.143 196.016 cv
422.47 196.016 412.377 196.237 409.112 196.684 cv
408.872 202.533 408.748 207.934 408.748 212.887 cv
408.748 235.936 li
410.161 236.048 419.12 236.104 423.366 236.104 cv
439.666 236.104 449.987 230.835 453.493 224.377 cv
455.522 220.646 456.54 216.662 456.54 212.43 cv
480.57 267.342 mo
480.57 281.319 473.1 292.146 458.155 299.833 cv
450.769 303.621 441.269 305.508 429.639 305.508 cv
425.945 305.508 422.902 305.483 420.502 305.426 cv
398.448 305.01 li
390.572 305.01 384.484 305.173 380.177 305.508 cv
379.259 304.674 li
379.259 302.339 li
379.724 301.331 li
384.27 298.715 386.731 297.073 387.101 296.407 cv
387.656 295.403 387.991 291.704 388.118 285.298 cv
388.39 266.589 li
388.39 224.246 li
388.39 210.994 387.991 202.361 387.192 198.356 cv
386.883 196.743 385.836 195.711 384.054 195.262 cv
383.133 195.038 379.533 194.764 373.26 194.428 cv
372.336 193.594 li
372.336 187.913 li
373.26 187.164 li
378.733 187.497 388.146 187.667 401.495 187.667 cv
409.983 187.667 417.643 187.526 424.467 187.248 cv
429.883 187.024 434.467 186.912 438.221 186.912 cv
455.388 186.912 466.642 190.445 471.991 197.52 cv
474.821 201.247 476.236 205.533 476.236 210.379 cv
476.236 218.289 472.824 224.887 465.994 230.176 cv
462.733 232.68 459.35 234.547 455.846 235.775 cv
451.782 237.164 447.356 238.362 442.556 239.362 cv
467.901 240.365 480.57 249.691 480.57 267.342 cv
f
779.327 247.631 mo
779.327 231.482 773.489 218.664 765.907 209.17 cv
758.321 199.677 739.035 192.889 724.386 192.889 cv
705.047 192.889 684.049 202.361 677.735 217.229 cv
674.477 224.858 672.85 233.402 672.85 242.868 cv
672.85 260.072 678.605 273.66 686.028 283.631 cv
693.708 293.928 711.331 301.119 726.636 301.119 cv
745.192 301.119 767.866 291.26 774.251 275.613 cv
777.637 267.313 779.327 257.984 779.327 247.631 cv
799.202 243.289 mo
799.202 256.26 796.237 267.678 790.309 277.529 cv
784.192 287.664 775.369 295.396 763.842 300.713 cv
752.318 306.022 746.711 308.686 730.698 308.686 cv
728.685 308.686 726.627 308.629 724.549 308.515 cv
730.278 309.352 740.301 311.94 754.629 316.284 cv
769.866 320.879 li
778.003 323.329 782.472 324.549 787.352 324.549 cv
790.676 324.549 793.713 323.273 800.553 320.709 cv
801.528 321.461 li
801.528 325.974 li
800.744 327.141 li
788.828 333.267 785.799 334.265 783.087 334.868 cv
777.049 336.213 768.89 332.479 750.273 327.642 cv
731.453 322.736 723.76 319.51 718.36 319.51 cv
715.236 319.51 710.281 321.805 701.166 326.65 cv
699.701 326.23 li
698.141 322.391 li
698.526 321.137 li
699.831 320.074 702.957 318.101 707.908 315.207 cv
716.828 309.975 715.857 310.383 721.325 308.265 cv
702.504 307.156 682.529 303.554 668.325 291.06 cv
656.427 280.598 650.934 265.863 650.934 247.879 cv
650.934 228.447 657.608 213.149 670.958 201.985 cv
684.308 190.823 702.958 185.239 726.924 185.239 cv
756.225 185.239 777.128 193.702 789.629 210.631 cv
796.014 219.263 799.202 230.15 799.202 243.289 cv
f
957.256 193.594 mo
956.28 194.428 li
948.6 194.428 942.224 196.182 941.248 199.691 cv
940.729 201.639 940.336 205.872 940.08 212.384 cv
939.88 217.232 939.784 224.217 939.784 233.348 cv
939.784 259.07 li
939.784 275.613 935.977 287.415 928.36 294.488 cv
918.264 303.843 903.872 308.515 885.184 308.515 cv
868.128 308.515 854.809 306.096 845.24 301.254 cv
837.168 297.134 831.896 291.285 829.416 283.714 cv
827.856 278.869 827.08 266.228 827.08 245.795 cv
827.08 224.246 li
827.08 210.994 826.648 202.361 825.8 198.355 cv
825.48 196.743 824.368 195.712 822.48 195.262 cv
821.504 195.038 815.656 194.764 809.016 194.428 cv
808.04 193.594 li
808.04 187.998 li
809.016 187.165 li
815.264 187.497 819.16 187.667 832.968 187.667 cv
847.032 187.667 859.064 187.497 865 187.165 cv
865.968 187.998 li
865.968 193.594 li
865 194.428 li
858.352 194.764 852.504 195.038 851.528 195.262 cv
849.64 195.712 848.528 196.743 848.208 198.355 cv
847.36 202.361 846.936 210.994 846.936 224.246 cv
846.936 241.451 li
846.936 262.5 846.313 275.252 848.216 280.121 cv
853.84 294.521 869.68 298.236 887.056 298.236 cv
898.456 298.236 911.04 296.326 919.168 289.105 cv
921.984 286.601 924.928 282.378 926.104 280.04 cv
927.272 277.701 928.184 274.081 928.84 269.185 cv
929.424 264.613 929.72 259.994 929.72 255.314 cv
929.72 237.941 li
929.72 223.359 929.648 213.384 929.52 208.04 cv
929.393 203.034 929 199.777 928.352 198.273 cv
927.824 197.159 926.688 196.292 924.928 195.68 cv
923.432 195.185 917.384 194.764 910.872 194.428 cv
909.896 193.594 li
909.896 187.998 li
910.872 187.165 li
916.544 187.497 922.368 187.667 928.36 187.667 cv
932.848 187.667 943.52 187.497 956.28 187.165 cv
957.256 187.998 li
957.256 193.594 li
cp
f
642.73 193.594 mo
641.756 194.428 li
634.069 194.428 627.7 196.182 626.721 199.691 cv
626.2 201.639 625.808 205.872 625.551 212.384 cv
625.354 217.232 625.256 224.217 625.256 233.348 cv
625.256 259.07 li
625.256 275.613 621.449 287.415 613.829 294.488 cv
603.737 303.843 589.346 308.515 570.657 308.515 cv
553.599 308.515 540.279 306.096 530.711 301.254 cv
522.637 297.134 517.366 291.285 514.891 283.714 cv
513.328 278.869 512.547 266.228 512.547 245.795 cv
512.547 224.246 li
512.547 210.994 512.119 202.361 511.277 198.355 cv
510.947 196.743 509.842 195.712 507.953 195.262 cv
506.979 195.038 501.129 194.764 494.485 194.428 cv
493.511 193.594 li
493.511 187.998 li
494.485 187.165 li
500.736 187.497 504.637 187.667 518.442 187.667 cv
532.507 187.667 544.543 187.497 550.47 187.165 cv
551.447 187.998 li
551.447 193.594 li
550.47 194.428 li
543.827 194.764 537.975 195.038 537 195.262 cv
535.105 195.712 534.004 196.743 533.68 198.355 cv
532.831 202.361 532.407 210.994 532.407 224.246 cv
532.407 241.451 li
532.407 262.5 531.788 275.252 533.688 280.121 cv
539.309 294.521 555.148 298.236 572.532 298.236 cv
583.929 298.236 596.513 296.326 604.646 289.105 cv
607.456 286.601 610.4 282.378 611.572 280.04 cv
612.744 277.701 613.656 274.081 614.309 269.185 cv
614.897 264.613 615.188 259.994 615.188 255.314 cv
615.188 237.941 li
615.188 223.359 615.125 213.384 614.996 208.04 cv
614.862 203.034 614.471 199.777 613.821 198.273 cv
613.297 197.159 612.159 196.292 610.4 195.68 cv
608.904 195.185 602.856 194.764 596.352 194.428 cv
595.371 193.594 li
595.371 187.998 li
596.352 187.165 li
602.009 187.497 607.836 187.667 613.829 187.667 cv
618.32 187.667 628.989 187.497 641.756 187.165 cv
642.73 187.998 li
642.73 193.594 li
cp
f
360.882 193.594 mo
359.904 194.428 li
352.221 194.428 345.848 196.182 344.874 199.691 cv
344.35 201.639 343.961 205.872 343.699 212.384 cv
343.504 217.232 343.406 224.217 343.406 233.348 cv
343.406 259.07 li
343.406 275.613 339.6 287.415 331.979 294.488 cv
321.89 303.843 307.496 308.515 288.81 308.515 cv
271.748 308.515 258.434 306.096 248.865 301.254 cv
240.791 297.134 235.513 291.285 233.04 283.714 cv
231.476 278.869 230.695 266.228 230.695 245.795 cv
230.695 224.246 li
230.695 210.994 230.27 202.361 229.424 198.355 cv
229.097 196.743 227.992 195.712 226.105 195.262 cv
225.128 195.038 219.283 194.764 212.638 194.428 cv
211.657 193.594 li
211.657 187.998 li
212.638 187.165 li
218.887 187.497 222.787 187.667 236.59 187.667 cv
250.658 187.667 262.693 187.497 268.619 187.165 cv
269.594 187.998 li
269.594 193.594 li
268.619 194.428 li
261.977 194.764 256.124 195.038 255.15 195.262 cv
253.26 195.712 252.154 196.743 251.83 198.355 cv
250.981 202.361 250.56 210.994 250.56 224.246 cv
250.56 241.451 li
250.56 262.5 249.939 275.252 251.835 280.121 cv
257.456 294.521 273.298 298.236 290.684 298.236 cv
302.078 298.236 314.665 296.326 322.79 289.105 cv
325.604 286.601 328.55 282.378 329.724 280.04 cv
330.896 277.701 331.807 274.081 332.46 269.185 cv
333.048 264.613 333.34 259.994 333.34 255.314 cv
333.34 237.941 li
333.34 223.359 333.273 213.384 333.141 208.04 cv
333.013 203.034 332.624 199.777 331.973 198.273 cv
331.447 197.159 330.311 196.292 328.552 195.68 cv
327.053 195.185 321.005 194.764 314.496 194.428 cv
313.519 193.594 li
313.519 187.998 li
314.496 187.165 li
320.164 187.497 325.987 187.667 331.979 187.667 cv
336.468 187.667 347.141 187.497 359.904 187.165 cv
360.882 187.998 li
360.882 193.594 li
cp
f
1076.08 278.62 mo
1074.65 286.75 1073.93 294.432 1073.93 304.674 cv
1072.96 305.508 li
1003.99 305.01 li
992.136 305.01 975.128 305.174 970.24 305.508 cv
969.264 304.674 li
969.264 302.34 li
969.752 301.33 li
974.568 298.715 981.2 301.746 985.313 296.406 cv
986.048 295.446 986.256 291.649 986.384 285.299 cv
986.68 266.59 li
986.68 224.246 li
986.68 210.994 986.256 202.361 985.416 198.356 cv
985.08 196.742 983.977 195.711 982.088 195.262 cv
981.112 195.038 974.6 194.764 967.952 194.428 cv
966.977 193.594 li
966.977 187.913 li
967.952 187.164 li
974.528 187.497 988.304 187.667 1002.04 187.667 cv
1014.28 187.667 1037.56 187.497 1071.88 187.164 cv
1072.94 187.83 li
1071.68 197.102 li
1071.29 200.049 1071 202.563 1070.8 204.618 cv
1070.11 212.383 li
1069.14 213.303 li
1065.51 213.303 li
1064.54 212.469 li
1064.47 204.898 1063.95 200.579 1062.98 199.522 cv
1062.26 198.749 1056.72 198.133 1050.43 197.687 cv
1044.15 197.24 1038.63 197.019 1033.88 197.019 cv
1028.22 197.019 1012.15 197.219 1006.35 197.603 cv
1005.64 203.447 1005.28 211.551 1005.28 221.91 cv
1005.28 241.238 li
1010.42 241.517 1022.88 241.656 1026.08 241.656 cv
1038.87 241.573 li
1044.86 241.517 1048.25 241.099 1049.02 240.321 cv
1050.06 239.318 1050.75 235.557 1051.08 229.045 cv
1052.06 228.213 li
1058.11 228.213 li
1059.09 229.045 li
1058.82 235.284 1058.7 240.988 1058.7 246.168 cv
1058.7 251.786 1058.82 257.938 1059.09 264.62 cv
1058.11 265.374 li
1051.56 265.374 li
1050.59 264.543 li
1050.59 258.137 1050.06 254.34 1049.02 253.141 cv
1047.98 251.945 1044.82 251.154 1039.55 250.76 cv
1035.58 250.479 1031.34 250.34 1026.86 250.34 cv
1022.1 250.34 1009.38 250.479 1005.28 250.76 cv
1005.28 274.192 li
1005.28 281.487 1005.45 290.69 1005.77 297.538 cv
1029.38 297.538 li
1048.4 297.538 1060.06 296.897 1064.35 295.612 cv
1065.06 295.396 1065.59 295.086 1065.92 294.695 cv
1066.57 293.92 1067.18 292.248 1067.78 289.685 cv
1070.11 278.702 li
1071.1 277.785 li
1075.01 277.785 li
1076.08 278.62 li
cp
f
1076.62 361.166 mo
2.31543 361.166 li
2.31543 342.104 li
1076.62 342.104 li
1076.62 361.166 li
cp
f
211.999 137.868 mo
460.487 137.868 li
460.487 137.868 524.874 174.137 636.135 144.334 cv
807.696 98.377 873.729 143.315 873.729 143.315 cv
1075.25 143.315 li
1075.25 151.483 li
826.072 151.483 li
826.072 151.483 769.91 115.737 633.071 152.503 cv
503.715 187.254 414.875 148.758 414.875 148.758 cv
211.999 148.758 li
211.999 137.868 li
cp
f
517.675 121.866 mo
583.245 139.475 727.318 91.5303 732.128 89.5273 cv
740.296 86.124 742.83 90.248 735.53 92.9316 cv
618.265 136.166 528.904 134.12 511.549 131.057 cv
443.405 119.032 452.429 56.1836 503.377 28.9336 cv
598.864 -22.123 727.531 4.9375 771.441 29.959 cv
862.536 81.8604 846.505 161.18 800.553 196.923 cv
727.779 253.52 630.008 254.624 566.692 195.393 cv
535.046 165.784 541.673 91.7402 638.689 62.6387 cv
657.588 56.9678 659.112 70.8066 645.327 72.3398 cv
633.98 73.5977 619.652 74.5713 614.689 76.9336 cv
528.904 117.783 560.94 180.733 571.802 192.328 cv
616.731 240.325 728.556 247.471 791.866 195.393 cv
862.232 137.516 817.408 71.3193 761.231 43.2334 cv
737.744 31.4912 603.967 -18.0352 508.487 31.4912 cv
475.821 48.4355 462.529 107.061 517.675 121.866 cv
f
2.56982 448.69 mo
2.56982 446.049 li
4.8418 446.049 6.29541 445.902 6.92285 445.606 cv
7.55566 445.312 8.10254 444.816 8.56738 444.133 cv
9.02881 443.447 9.93359 440.855 11.2798 436.361 cv
16.4575 418.679 li
21.8008 399.729 li
22.3604 397.648 22.6416 396.177 22.6416 395.305 cv
22.6416 393.988 22.1558 393.033 21.1875 392.443 cv
20.2197 391.855 18.0386 391.517 14.6475 391.433 cv
14.6475 388.792 li
17.2837 389.001 19.8066 389.104 22.2207 389.104 cv
24.5254 389.104 26.7485 389.001 28.8857 388.792 cv
42.6729 438.757 li
46.2656 432.785 53.2808 420.897 63.7217 403.093 cv
71.9697 388.792 li
74.9575 389.001 77.2075 389.104 78.7168 389.104 cv
80.4556 389.104 82.8687 389.001 85.9526 388.792 cv
85.9526 391.433 li
82.8398 391.46 80.9058 391.669 80.1465 392.064 cv
79.6426 392.345 79.2495 392.795 78.9678 393.414 cv
78.6885 394.029 78.4507 395.293 78.2515 397.201 cv
77.7764 401.664 77.1035 409.43 76.2344 420.486 cv
75.3647 431.55 74.9297 438.666 74.9297 441.837 cv
74.9297 443.578 75.2666 444.681 75.9404 445.141 cv
76.6147 445.606 78.7847 445.908 82.4614 446.049 cv
82.4614 448.69 li
77.8306 448.479 73.9238 448.377 70.7334 448.377 cv
67.4824 448.377 63.8604 448.479 59.8809 448.69 cv
59.8809 446.049 li
63.4424 445.965 65.5195 445.787 66.1074 445.523 cv
66.6978 445.257 67.1387 444.912 67.4336 444.49 cv
67.7285 444.07 67.9585 443.115 68.1274 441.629 cv
68.3496 439.662 68.9126 432.63 69.8115 420.531 cv
71.2646 398.807 li
68.7139 402.533 65.3506 407.898 61.1738 414.9 cv
44.9424 442.297 li
43.4844 444.852 42.1377 447.459 40.9058 450.121 cv
38.9717 450.121 li
25.2998 401.046 li
16.4766 433.109 li
15.0195 438.449 14.2915 441.835 14.2915 443.267 cv
14.2915 444.447 14.7095 445.221 15.5527 445.585 cv
16.1138 445.81 18.1626 445.965 21.6987 446.049 cv
21.6987 448.69 li
17.3198 448.479 14.0356 448.377 11.8457 448.377 cv
9.45557 448.377 6.36475 448.479 2.56982 448.69 cv
0 0 0 1 cmyk
f
113.213 413.146 mo
111.977 412.668 110.815 412.32 109.722 412.093 cv
108.628 411.869 107.595 411.757 106.611 411.757 cv
104.429 411.757 102.451 412.137 100.687 412.893 cv
100.183 413.146 99.5381 414.074 98.7529 415.674 cv
97.2109 418.875 95.8149 422.945 94.5698 427.888 cv
93.3228 432.828 92.6987 437.18 92.6987 440.938 cv
92.6987 441.953 92.8477 442.669 93.1396 443.089 cv
93.4346 443.512 93.793 443.721 94.2148 443.721 cv
95.3657 443.721 97.4746 442.246 100.547 439.301 cv
103.615 436.351 106.035 433.306 107.8 430.162 cv
110.159 425.921 111.961 420.252 113.213 413.146 cv
119.665 407.594 mo
120.633 408.227 li
117.885 417.793 115.76 426.274 114.258 433.677 cv
113.393 437.951 112.958 440.753 112.958 442.074 cv
112.958 442.609 113.07 443.019 113.292 443.299 cv
113.516 443.58 113.826 443.721 114.218 443.721 cv
115.141 443.721 117.232 442.377 120.487 439.691 cv
120.991 441.572 li
117.959 444.232 115.047 446.363 112.244 447.957 cv
110.875 448.716 109.686 449.094 108.68 449.094 cv
107.923 449.094 107.365 448.871 107.001 448.438 cv
106.638 448.004 106.457 447.294 106.457 446.309 cv
106.457 444.003 107.403 439.209 109.292 431.924 cv
108.958 431.885 li
104.973 437.672 100.738 442.351 96.249 445.916 cv
93.2168 448.332 90.999 449.539 89.5947 449.539 cv
88.7529 449.539 88.0938 449.121 87.6187 448.275 cv
86.916 446.986 86.5669 445.119 86.5669 442.675 cv
86.5669 438.521 87.4009 433.563 89.0747 427.809 cv
90.748 422.053 92.4551 417.957 94.1968 415.513 cv
95.5186 413.66 98.0908 411.678 101.914 409.574 cv
104.299 408.254 106.786 407.594 109.374 407.594 cv
110.496 407.594 111.7 407.717 112.977 407.964 cv
114.255 408.207 115.611 408.578 117.046 409.068 cv
119.665 407.594 li
cp
f
126.922 435.994 mo
129.113 435.994 li
129.074 439.957 li
129.113 443.074 li
130.485 444.171 131.937 444.994 133.463 445.539 cv
134.99 446.087 136.576 446.363 138.23 446.363 cv
140.92 446.363 143.147 445.492 144.913 443.748 cv
146.677 442.009 147.559 439.832 147.559 437.219 cv
147.559 435.338 147.125 433.962 146.259 433.089 cv
145.365 432.219 143.517 431.557 140.721 431.106 cv
135.74 430.322 132.522 429.381 131.067 428.285 cv
129.141 426.796 128.174 424.59 128.174 421.667 cv
128.174 419.421 128.833 417.365 130.148 415.494 cv
131.466 413.626 133.876 411.697 137.376 409.701 cv
139.84 408.296 142.418 407.594 145.109 407.594 cv
146.453 407.594 147.826 407.769 149.227 408.119 cv
150.628 408.471 152.059 409.012 153.513 409.74 cv
152.865 412.271 152.358 415.504 151.992 419.437 cv
150.021 419.437 li
150.048 418.172 150.063 417.134 150.063 416.316 cv
150.063 414.94 149.769 414.001 149.183 413.494 cv
147.361 411.977 145.041 411.221 142.216 411.221 cv
139.362 411.221 137.158 411.935 135.605 413.363 cv
134.052 414.797 133.276 416.669 133.276 418.998 cv
133.276 420.934 133.911 422.332 135.168 423.203 cv
136.122 423.847 138.429 424.533 142.09 425.252 cv
146.23 426.009 148.916 426.837 150.147 427.736 cv
151.854 429.027 152.708 431.017 152.708 433.715 cv
152.708 437.414 150.795 440.98 146.97 444.404 cv
143.141 447.828 138.861 449.539 134.125 449.539 cv
132.583 449.539 131.065 449.344 129.564 448.953 cv
128.066 448.559 126.57 447.984 125.085 447.227 cv
125.891 444.003 126.504 440.261 126.922 435.994 cv
f
180.471 438.572 mo
181.478 440.184 li
174.022 446.424 169.017 449.539 166.464 449.539 cv
165.624 449.539 164.921 449.211 164.361 448.551 cv
163.798 447.894 163.519 446.989 163.519 445.836 cv
163.519 444.43 164.134 440.885 165.369 435.187 cv
167.081 427.442 168.44 420.811 169.454 415.295 cv
166.332 415.252 li
162.157 415.295 li
162.365 413.905 li
165.123 413.059 167.666 412.045 170.001 410.861 cv
170.675 407.577 171.444 402.635 172.313 396.037 cv
174.583 395.309 176.825 394.34 179.038 393.135 cv
180.006 393.891 li
179.305 396.698 177.961 402.563 175.969 411.488 cv
180.431 411.614 li
182.199 411.614 183.769 411.438 185.145 411.086 cv
185.521 411.504 li
185.13 412.844 184.805 414.228 184.553 415.651 cv
181.778 415.438 178.681 415.32 175.256 415.295 cv
172.062 430.379 170.463 439.127 170.463 441.537 cv
170.463 442.295 170.604 442.856 170.884 443.219 cv
171.165 443.584 171.532 443.766 171.978 443.766 cv
173.182 443.766 176.013 442.034 180.471 438.572 cv
f
194.674 428.32 mo
200.419 427.254 204.618 425.575 207.28 423.287 cv
209.94 420.998 211.271 418.465 211.271 415.686 cv
211.271 414.198 210.931 413.078 210.244 412.336 cv
209.555 411.592 208.582 411.221 207.324 411.221 cv
205.531 411.221 203.806 411.738 202.155 412.777 cv
200.5 413.815 199.155 415.377 198.12 417.454 cv
196.745 420.178 195.6 423.799 194.674 428.32 cv
214.15 439.038 mo
214.741 440.83 li
210.729 444.196 207.412 446.491 204.79 447.711 cv
202.166 448.932 199.69 449.539 197.364 449.539 cv
194.081 449.539 191.551 448.577 189.768 446.655 cv
187.99 444.734 187.099 441.959 187.099 438.338 cv
187.099 434.547 187.854 430.315 189.371 425.641 cv
190.884 420.967 192.622 417.604 194.583 415.555 cv
196.551 413.502 199.661 411.439 203.926 409.362 cv
206.309 408.183 208.455 407.594 210.364 407.594 cv
212.692 407.594 214.52 408.221 215.853 409.467 cv
217.185 410.719 217.852 412.311 217.852 414.25 cv
217.852 421.86 209.999 427.238 194.295 430.383 cv
193.735 433.724 193.453 436.211 193.453 437.84 cv
193.453 440.111 194.098 441.938 195.39 443.312 cv
196.679 444.688 198.308 445.377 200.269 445.377 cv
201.751 445.377 203.516 444.963 205.55 444.141 cv
207.581 443.312 210.449 441.614 214.15 439.038 cv
f
223.021 417.577 mo
222.052 416.1 li
226.937 412.451 230.617 409.979 233.085 408.688 cv
234.491 407.957 235.654 407.594 236.585 407.594 cv
237.088 407.594 237.481 407.755 237.763 408.076 cv
238.043 408.401 238.184 408.898 238.184 409.574 cv
238.184 410.555 238.043 411.805 237.763 413.321 cv
234.945 426.04 li
239.4 418.461 243.157 413.167 246.211 410.163 cv
247.947 408.449 249.547 407.594 251.003 407.594 cv
251.621 407.594 252.392 407.747 253.313 408.055 cv
252.695 410.607 252.201 413.646 251.838 417.18 cv
250.575 417.475 li
249.818 416.407 248.918 415.875 247.882 415.875 cv
246.73 415.875 245.523 416.326 244.259 417.223 cv
242.07 418.768 240.014 421.18 238.091 424.448 cv
236.172 427.723 234.702 431.309 233.693 435.215 cv
233.443 436.145 232.531 440.414 230.949 448.025 cv
229.206 448.36 227.243 448.866 225.059 449.539 cv
224.343 448.908 li
226.447 441.778 228.132 434.762 229.404 427.854 cv
230.674 420.947 231.309 416.68 231.309 415.053 cv
231.309 413.932 230.943 413.367 230.215 413.367 cv
229.346 413.367 226.945 414.771 223.021 417.577 cv
f
262.789 443.557 mo
265.342 445.129 267.906 445.914 270.488 445.914 cv
272.954 445.914 275.163 445.053 277.111 443.324 cv
279.059 441.601 281.051 438 283.085 432.524 cv
285.12 427.051 286.136 421.969 286.136 417.28 cv
286.136 415.565 285.885 414.362 285.377 413.66 cv
284.873 412.961 284.088 412.606 283.022 412.606 cv
280.527 412.606 277.707 413.914 274.563 416.525 cv
271.428 419.135 268.861 422.741 266.868 427.344 cv
265.745 429.87 264.583 434.264 263.377 440.524 cv
262.789 443.557 li
cp
253.415 417.084 mo
252.402 415.383 li
257.704 411.846 261.348 409.596 263.339 408.646 cv
264.823 407.944 266.001 407.594 266.871 407.594 cv
267.488 407.594 267.986 407.803 268.361 408.227 cv
268.743 408.646 268.932 409.25 268.932 410.036 cv
268.932 411.073 268.09 415.538 266.407 423.43 cv
268.734 419.666 271.057 416.711 273.37 414.564 cv
275.688 412.418 278.255 410.715 281.074 409.467 cv
283.892 408.221 286.131 407.594 287.787 407.594 cv
289.104 407.594 290.131 408.183 290.859 409.362 cv
292.036 411.301 292.627 413.715 292.627 416.606 cv
292.627 421.18 291.667 425.879 289.743 430.693 cv
287.821 435.506 285.792 438.914 283.662 440.906 cv
281.53 442.9 278.891 444.836 275.751 446.721 cv
272.607 448.601 269.843 449.539 267.459 449.539 cv
266.029 449.539 264.232 449.188 262.073 448.488 cv
260.165 457.658 258.847 465.256 258.119 471.286 cv
255.623 471.594 253.535 472.002 251.851 472.506 cv
251.263 472.043 li
254.093 460.103 257.083 445.176 260.23 427.252 cv
261.408 420.565 261.999 416.394 261.999 414.734 cv
261.999 414.146 261.863 413.702 261.598 413.406 cv
261.33 413.114 260.987 412.967 260.566 412.967 cv
259.669 412.967 257.286 414.338 253.415 417.084 cv
f
309.438 392.875 mo
309.438 391.447 309.943 390.185 310.957 389.091 cv
311.97 387.996 313.095 387.447 314.332 387.447 cv
315.315 387.447 316.092 387.756 316.652 388.373 cv
317.215 388.992 317.494 389.877 317.494 391.023 cv
317.494 392.596 317.024 393.917 316.083 394.98 cv
315.141 396.049 314.065 396.58 312.856 396.58 cv
311.87 396.58 311.054 396.251 310.408 395.591 cv
309.764 394.933 309.438 394.029 309.438 392.875 cv
298.944 417.085 mo
298.105 415.384 li
305.035 410.189 309.594 407.594 311.772 407.594 cv
312.444 407.594 312.959 407.783 313.322 408.16 cv
313.688 408.542 313.87 409.097 313.87 409.826 cv
313.87 411.594 313.227 414.908 311.934 419.761 cv
308.647 432.142 307.007 439.649 307.007 442.289 cv
307.007 443.244 307.438 443.721 308.309 443.721 cv
309.317 443.721 311.578 442.453 315.088 439.916 cv
315.929 441.572 li
311.914 444.806 308.601 447.15 305.992 448.611 cv
304.924 449.23 303.926 449.539 303.002 449.539 cv
302.244 449.539 301.592 449.205 301.047 448.531 cv
300.496 447.856 300.225 446.888 300.225 445.623 cv
300.225 443.801 300.967 440.121 302.452 434.593 cv
305.389 423.757 306.856 417.229 306.856 415.013 cv
306.856 413.947 306.447 413.412 305.637 413.412 cv
304.737 413.412 302.509 414.638 298.944 417.085 cv
f
328.78 428.32 mo
334.526 427.254 338.727 425.575 341.388 423.287 cv
344.046 420.998 345.379 418.465 345.379 415.686 cv
345.379 414.198 345.034 413.078 344.35 412.336 cv
343.666 411.592 342.69 411.221 341.427 411.221 cv
339.636 411.221 337.914 411.738 336.262 412.777 cv
334.609 413.815 333.266 415.377 332.229 417.454 cv
330.855 420.178 329.706 423.799 328.78 428.32 cv
348.258 439.038 mo
348.85 440.83 li
344.837 444.196 341.52 446.491 338.898 447.711 cv
336.276 448.932 333.798 449.539 331.47 449.539 cv
328.188 449.539 325.654 448.577 323.875 446.655 cv
322.094 444.734 321.205 441.959 321.205 438.338 cv
321.205 434.547 321.962 430.315 323.479 425.641 cv
324.99 420.967 326.73 417.604 328.694 415.555 cv
330.658 413.502 333.772 411.439 338.034 409.362 cv
340.418 408.183 342.565 407.594 344.47 407.594 cv
346.799 407.594 348.63 408.221 349.962 409.467 cv
351.296 410.719 351.96 412.311 351.96 414.25 cv
351.96 421.86 344.106 427.238 328.402 430.383 cv
327.841 433.724 327.563 436.211 327.563 437.84 cv
327.563 440.111 328.208 441.938 329.497 443.312 cv
330.786 444.688 332.413 445.377 334.376 445.377 cv
335.863 445.377 337.623 444.963 339.657 444.141 cv
341.689 443.312 344.557 441.614 348.258 439.038 cv
f
385.719 420.47 mo
383.662 420.47 li
383.774 418.281 383.828 416.68 383.828 415.67 cv
383.828 414.605 383.334 413.764 382.355 413.145 cv
380.866 412.221 378.94 411.757 376.579 411.757 cv
373.711 411.757 371.429 412.411 369.729 413.719 cv
368.029 415.023 366.434 417.857 364.944 422.21 cv
363.453 426.566 362.711 431.133 362.711 435.911 cv
362.711 438.836 363.392 441.074 364.752 442.636 cv
366.116 444.195 367.877 444.974 370.043 444.974 cv
371.896 444.974 373.889 444.546 376.026 443.688 cv
378.16 442.829 380.9 441.148 384.244 438.643 cv
384.918 440.453 li
380.704 444.042 377.249 446.457 374.557 447.688 cv
371.86 448.923 369.349 449.54 367.019 449.54 cv
363.65 449.54 361.06 448.452 359.248 446.279 cv
357.438 444.102 356.532 441.007 356.532 436.988 cv
356.532 432.92 357.221 428.791 358.596 424.607 cv
359.971 420.426 361.786 417.252 364.048 415.092 cv
366.305 412.929 369.681 410.877 374.17 408.941 cv
376.248 408.044 378.354 407.594 380.485 407.594 cv
381.834 407.594 382.998 407.741 383.98 408.035 cv
384.964 408.33 386.17 408.926 387.602 409.824 cv
386.711 413.104 386.084 416.654 385.719 420.47 cv
f
397.412 428.32 mo
403.156 427.254 407.357 425.575 410.018 423.287 cv
412.68 420.998 414.009 418.465 414.009 415.686 cv
414.009 414.198 413.666 413.078 412.981 412.336 cv
412.297 411.592 411.322 411.221 410.059 411.221 cv
408.268 411.221 406.545 411.738 404.895 412.777 cv
403.24 413.815 401.896 415.377 400.859 417.454 cv
399.486 420.178 398.338 423.799 397.412 428.32 cv
416.89 439.038 mo
417.479 440.83 li
413.467 444.196 410.15 446.491 407.529 447.711 cv
404.906 448.932 402.428 449.539 400.102 449.539 cv
396.818 449.539 394.289 448.577 392.507 446.655 cv
390.725 444.734 389.835 441.959 389.835 438.338 cv
389.835 434.547 390.593 430.315 392.108 425.641 cv
393.622 420.967 395.364 417.604 397.326 415.555 cv
399.288 413.502 402.403 411.439 406.666 409.362 cv
409.05 408.183 411.196 407.594 413.102 407.594 cv
415.43 407.594 417.262 408.221 418.594 409.467 cv
419.925 410.719 420.591 412.311 420.591 414.25 cv
420.591 421.86 412.74 427.238 397.036 430.383 cv
396.471 433.724 396.194 436.211 396.194 437.84 cv
396.194 440.111 396.839 441.938 398.127 443.312 cv
399.418 444.688 401.045 445.377 403.007 445.377 cv
404.495 445.377 406.253 444.963 408.287 444.141 cv
410.318 443.312 413.188 441.614 416.89 439.038 cv
f
451.857 435.367 mo
451.857 439.297 452.554 442.115 453.939 443.813 cv
455.332 445.511 457.29 446.363 459.817 446.363 cv
463.55 446.363 466.46 444.269 468.536 440.084 cv
471.177 434.746 472.496 428.637 472.496 421.757 cv
472.496 417.712 471.783 414.832 470.367 413.121 cv
468.952 411.404 466.908 410.549 464.24 410.549 cv
462.079 410.549 460.176 411.267 458.531 412.719 cv
456.889 414.162 455.367 417.035 453.965 421.334 cv
452.557 425.633 451.857 430.309 451.857 435.367 cv
445.275 435.978 mo
445.275 426.994 447.586 420.017 452.204 415.047 cv
456.824 410.078 461.903 407.594 467.447 407.594 cv
471.111 407.594 473.968 408.697 476.011 410.9 cv
478.054 413.104 479.076 416.269 479.076 420.396 cv
479.076 425.59 477.949 430.561 475.697 435.305 cv
473.443 440.049 470.576 443.609 467.09 445.98 cv
463.604 448.354 460.111 449.54 456.613 449.54 cv
453.058 449.54 450.281 448.434 448.278 446.215 cv
446.276 443.994 445.275 440.585 445.275 435.978 cv
f
484.27 417.217 mo
483.598 415.471 li
488.138 412.188 491.697 409.867 494.275 408.52 cv
495.451 407.901 496.501 407.594 497.428 407.594 cv
498.071 407.594 498.567 407.79 498.921 408.184 cv
499.271 408.575 499.443 409.167 499.443 409.951 cv
499.443 410.542 499.348 411.37 499.149 412.436 cv
495.867 427.007 li
498.308 423.104 501.164 419.602 504.436 416.502 cv
507.708 413.398 510.828 411.139 513.804 409.719 cv
516.781 408.303 519.11 407.594 520.796 407.594 cv
521.555 407.594 522.156 407.834 522.606 408.311 cv
523.056 408.787 523.279 409.462 523.279 410.335 cv
523.279 411.124 523.183 411.979 522.987 412.908 cv
522.703 414.398 521.376 420.105 519.008 430.035 cv
517.24 437.375 516.357 441.667 516.357 442.903 cv
516.357 443.743 516.79 444.167 517.661 444.167 cv
518.504 444.167 520.112 443.324 522.498 441.633 cv
525.144 439.827 li
525.9 441.527 li
518.981 446.871 514.386 449.539 512.117 449.539 cv
511.333 449.539 510.699 449.268 510.224 448.717 cv
509.744 448.17 509.506 447.401 509.506 446.418 cv
509.506 444.76 510.436 440.37 512.286 433.257 cv
514.892 423.3 516.196 417.156 516.196 414.823 cv
516.196 414.23 516.051 413.773 515.756 413.452 cv
515.464 413.127 515.062 412.966 514.558 412.966 cv
512.9 412.966 510.604 414.133 507.662 416.471 cv
503.427 419.821 500.133 423.827 497.779 428.486 cv
495.422 433.145 493.58 439.742 492.25 448.275 cv
490.701 448.471 488.707 448.895 486.26 449.539 cv
485.585 448.823 li
487.635 441.975 489.4 434.605 490.897 426.717 cv
492.048 420.654 492.622 416.793 492.622 415.137 cv
492.622 414.549 492.503 414.107 492.265 413.811 cv
492.026 413.516 491.697 413.367 491.275 413.367 cv
490.207 413.367 487.872 414.652 484.27 417.217 cv
f
574.711 438.572 mo
575.723 440.184 li
568.266 446.424 563.26 449.539 560.71 449.539 cv
559.865 449.539 559.164 449.211 558.604 448.551 cv
558.041 447.894 557.762 446.989 557.762 445.836 cv
557.762 444.43 558.377 440.885 559.613 435.187 cv
561.322 427.442 562.686 420.811 563.699 415.295 cv
560.576 415.252 li
556.399 415.295 li
556.609 413.905 li
559.365 413.059 561.911 412.045 564.243 410.861 cv
564.915 407.577 565.688 402.635 566.556 396.037 cv
568.825 395.309 571.068 394.34 573.281 393.135 cv
574.249 393.891 li
573.547 396.698 572.205 402.563 570.214 411.488 cv
574.678 411.614 li
576.441 411.614 578.014 411.438 579.387 411.086 cv
579.765 411.504 li
579.373 412.844 579.053 414.228 578.797 415.651 cv
576.021 415.438 572.921 415.32 569.501 415.295 cv
566.307 430.379 564.708 439.127 564.708 441.537 cv
564.708 442.295 564.849 442.856 565.131 443.219 cv
565.408 443.584 565.772 443.766 566.224 443.766 cv
567.426 443.766 570.257 442.034 574.711 438.572 cv
f
580.713 449.539 mo
579.997 448.823 li
582.185 441.209 585.058 428.139 588.615 409.619 cv
590.52 399.807 591.476 394.369 591.476 393.305 cv
591.476 392.15 591.068 391.449 590.254 391.193 cv
589.834 391.055 587.843 390.984 584.281 390.984 cv
584.49 389.193 li
589.255 388.605 593.963 387.486 598.615 385.836 cv
599.499 386.763 li
594.879 407.424 592.134 420.426 591.267 425.764 cv
596.736 418.961 601.555 414.233 605.722 411.578 cv
609.887 408.922 613.23 407.594 615.758 407.594 cv
616.568 407.594 617.215 407.846 617.691 408.354 cv
618.169 408.857 618.407 409.592 618.407 410.549 cv
618.407 411.562 618.296 412.657 618.07 413.838 cv
617.539 416.59 616.262 422.035 614.241 430.162 cv
612.503 437.109 611.634 441.287 611.634 442.69 cv
611.634 443.676 612.07 444.166 612.937 444.166 cv
613.359 444.166 613.838 444.045 614.37 443.805 cv
614.902 443.559 616.037 442.836 617.777 441.634 cv
620.343 439.961 li
621.102 441.527 li
615.831 445.379 612.353 447.741 610.671 448.61 cv
609.465 449.23 608.399 449.539 607.476 449.539 cv
606.691 449.539 606.046 449.24 605.54 448.646 cv
605.036 448.047 604.784 447.234 604.784 446.209 cv
604.784 445.028 605.428 441.877 606.72 436.76 cv
609.8 424.467 611.342 417.338 611.342 415.371 cv
611.342 414.555 611.18 413.95 610.859 413.556 cv
610.536 413.162 610.077 412.965 609.491 412.965 cv
607.834 412.965 605.31 414.262 601.919 416.85 cv
597.486 420.22 594.146 424.136 591.902 428.578 cv
589.659 433.025 587.892 439.549 586.604 448.149 cv
584.391 448.43 582.423 448.894 580.713 449.539 cv
f
632.005 428.32 mo
637.75 427.254 641.949 425.575 644.611 423.287 cv
647.271 420.998 648.603 418.465 648.603 415.686 cv
648.603 414.198 648.259 413.078 647.572 412.336 cv
646.888 411.592 645.914 411.221 644.652 411.221 cv
642.858 411.221 641.138 411.738 639.484 412.777 cv
637.834 413.815 636.488 415.377 635.45 417.454 cv
634.079 420.178 632.93 423.799 632.005 428.32 cv
651.482 439.038 mo
652.068 440.83 li
648.06 444.196 644.745 446.491 642.12 447.711 cv
639.501 448.932 637.021 449.539 634.695 449.539 cv
631.412 449.539 628.88 448.577 627.1 446.655 cv
625.318 444.734 624.428 441.959 624.428 438.338 cv
624.428 434.547 625.187 430.315 626.7 425.641 cv
628.214 420.967 629.955 417.604 631.918 415.555 cv
633.88 413.502 636.997 411.439 641.259 409.362 cv
643.642 408.183 645.788 407.594 647.693 407.594 cv
650.021 407.594 651.851 408.221 653.187 409.467 cv
654.519 410.719 655.184 412.311 655.184 414.25 cv
655.184 421.86 647.331 427.238 631.628 430.383 cv
631.066 433.724 630.789 436.211 630.789 437.84 cv
630.789 440.111 631.433 441.938 632.719 443.312 cv
634.014 444.688 635.637 445.377 637.599 445.377 cv
639.087 445.377 640.847 444.963 642.882 444.141 cv
644.912 443.312 647.779 441.614 651.482 439.038 cv
f
676.809 448.69 mo
676.809 446.049 li
679.081 446.049 680.534 445.902 681.168 445.606 cv
681.796 445.312 682.344 444.816 682.805 444.133 cv
683.27 443.447 684.173 440.855 685.522 436.361 cv
690.695 418.679 li
696.039 399.729 li
696.602 397.648 696.882 396.177 696.882 395.305 cv
696.882 393.988 696.398 393.033 695.43 392.443 cv
694.463 391.855 692.281 391.517 688.886 391.433 cv
688.886 388.792 li
691.523 389.001 694.048 389.104 696.462 389.104 cv
698.767 389.104 700.988 389.001 703.127 388.792 cv
716.915 438.757 li
720.507 432.785 727.522 420.897 737.959 403.093 cv
746.21 388.792 li
749.195 389.001 751.443 389.104 752.959 389.104 cv
754.695 389.104 757.107 389.001 760.197 388.792 cv
760.197 391.433 li
757.08 391.46 755.146 391.669 754.388 392.064 cv
753.882 392.345 753.49 392.795 753.211 393.414 cv
752.928 394.029 752.69 395.293 752.495 397.201 cv
752.019 401.664 751.344 409.43 750.474 420.486 cv
749.603 431.55 749.171 438.666 749.171 441.837 cv
749.171 443.578 749.505 444.681 750.18 445.141 cv
750.854 445.606 753.026 445.908 756.702 446.049 cv
756.702 448.69 li
752.074 448.479 748.163 448.377 744.973 448.377 cv
741.722 448.377 738.104 448.479 734.12 448.69 cv
734.12 446.049 li
737.682 445.965 739.758 445.787 740.348 445.523 cv
740.938 445.257 741.377 444.912 741.675 444.49 cv
741.968 444.07 742.2 443.115 742.367 441.629 cv
742.593 439.662 743.154 432.63 744.05 420.531 cv
745.504 398.807 li
742.953 402.533 739.59 407.898 735.415 414.9 cv
719.185 442.297 li
717.727 444.852 716.383 447.459 715.146 450.121 cv
713.21 450.121 li
699.54 401.046 li
690.721 433.109 li
689.26 438.449 688.533 441.835 688.533 443.267 cv
688.533 444.447 688.953 445.221 689.792 445.585 cv
690.356 445.81 692.401 445.965 695.935 446.049 cv
695.935 448.69 li
691.56 448.479 688.274 448.377 686.087 448.377 cv
683.697 448.377 680.603 448.479 676.809 448.69 cv
f
773.028 392.875 mo
773.028 391.447 773.534 390.185 774.547 389.091 cv
775.561 387.996 776.686 387.447 777.922 387.447 cv
778.906 387.447 779.678 387.756 780.241 388.373 cv
780.803 388.992 781.089 389.877 781.089 391.023 cv
781.089 392.596 780.614 393.917 779.673 394.98 cv
778.73 396.049 777.654 396.58 776.444 396.58 cv
775.46 396.58 774.646 396.251 773.999 395.591 cv
773.35 394.933 773.028 394.029 773.028 392.875 cv
762.536 417.085 mo
761.695 415.384 li
768.626 410.189 773.182 407.594 775.365 407.594 cv
776.034 407.594 776.554 407.783 776.915 408.16 cv
777.278 408.542 777.46 409.097 777.46 409.826 cv
777.46 411.594 776.814 414.908 775.524 419.761 cv
772.238 432.142 770.597 439.649 770.597 442.289 cv
770.597 443.244 771.031 443.721 771.901 443.721 cv
772.911 443.721 775.168 442.453 778.677 439.916 cv
779.52 441.572 li
775.504 444.806 772.192 447.15 769.581 448.611 cv
768.515 449.23 767.52 449.539 766.593 449.539 cv
765.834 449.539 765.183 449.205 764.634 448.531 cv
764.09 447.856 763.814 446.888 763.814 445.623 cv
763.814 443.801 764.559 440.121 766.047 434.593 cv
768.98 423.757 770.446 417.229 770.446 415.013 cv
770.446 413.947 770.039 413.412 769.227 413.412 cv
768.327 413.412 766.098 414.638 762.536 417.085 cv
f
786.854 435.994 mo
789.047 435.994 li
789.004 439.957 li
789.047 443.074 li
790.419 444.171 791.867 444.994 793.394 445.539 cv
794.924 446.087 796.512 446.363 798.163 446.363 cv
800.855 446.363 803.08 445.492 804.848 443.748 cv
806.607 442.009 807.487 439.832 807.487 437.219 cv
807.487 435.338 807.056 433.962 806.191 433.089 cv
805.296 432.219 803.447 431.557 800.655 431.106 cv
795.673 430.322 792.455 429.381 791.002 428.285 cv
789.071 426.796 788.106 424.59 788.106 421.667 cv
788.106 419.421 788.764 417.365 790.082 415.494 cv
791.396 413.626 793.808 411.697 797.309 409.701 cv
799.774 408.296 802.352 407.594 805.04 407.594 cv
806.384 407.594 807.76 407.769 809.16 408.119 cv
810.56 408.471 811.983 409.012 813.447 409.74 cv
812.8 412.271 812.288 415.504 811.92 419.437 cv
809.951 419.437 li
809.983 418.172 809.992 417.134 809.992 416.316 cv
809.992 414.94 809.704 414.001 809.111 413.494 cv
807.296 411.977 804.968 411.221 802.151 411.221 cv
799.294 411.221 797.092 411.935 795.538 413.363 cv
793.985 414.797 793.21 416.669 793.21 418.998 cv
793.21 420.934 793.84 422.332 795.1 423.203 cv
796.053 423.847 798.357 424.533 802.023 425.252 cv
806.16 426.009 808.848 426.837 810.08 427.736 cv
811.783 429.027 812.64 431.017 812.64 433.715 cv
812.64 437.414 810.728 440.98 806.903 444.404 cv
803.071 447.828 798.795 449.539 794.056 449.539 cv
792.516 449.539 790.998 449.344 789.494 448.953 cv
787.996 448.559 786.504 447.984 785.018 447.227 cv
785.822 444.003 786.436 440.261 786.854 435.994 cv
f
820.393 435.994 mo
822.584 435.994 li
822.544 439.957 li
822.584 443.074 li
823.952 444.171 825.4 444.994 826.928 445.539 cv
828.456 446.087 830.048 446.363 831.696 446.363 cv
834.393 446.363 836.616 445.492 838.384 443.748 cv
840.145 442.009 841.024 439.832 841.024 437.219 cv
841.024 435.338 840.592 433.962 839.729 433.089 cv
838.832 432.219 836.984 431.557 834.192 431.106 cv
829.208 430.322 825.992 429.381 824.544 428.285 cv
822.608 426.796 821.64 424.59 821.64 421.667 cv
821.64 419.421 822.304 417.365 823.616 415.494 cv
824.936 413.626 827.344 411.697 830.848 409.701 cv
833.313 408.296 835.888 407.594 838.576 407.594 cv
839.92 407.594 841.296 407.769 842.696 408.119 cv
844.096 408.471 845.52 409.012 846.984 409.74 cv
846.328 412.271 845.824 415.504 845.456 419.437 cv
843.488 419.437 li
843.52 418.172 843.528 417.134 843.528 416.316 cv
843.528 414.94 843.24 414.001 842.648 413.494 cv
840.832 411.977 838.512 411.221 835.68 411.221 cv
832.832 411.221 830.632 411.935 829.072 413.363 cv
827.52 414.797 826.744 416.669 826.744 418.998 cv
826.744 420.934 827.376 422.332 828.64 423.203 cv
829.592 423.847 831.896 424.533 835.561 425.252 cv
839.704 426.009 842.384 426.837 843.616 427.736 cv
845.32 429.027 846.176 431.017 846.176 433.715 cv
846.176 437.414 844.264 440.98 840.44 444.404 cv
836.616 447.828 832.328 449.539 827.592 449.539 cv
826.056 449.539 824.528 449.344 823.032 448.953 cv
821.528 448.559 820.04 447.984 818.552 447.227 cv
819.36 444.003 819.977 440.261 820.393 435.994 cv
f
864.048 392.875 mo
864.048 391.447 864.552 390.185 865.568 389.091 cv
866.576 387.996 867.704 387.447 868.936 387.447 cv
869.928 387.447 870.696 387.756 871.256 388.373 cv
871.824 388.992 872.104 389.877 872.104 391.023 cv
872.104 392.596 871.632 393.917 870.688 394.98 cv
869.752 396.049 868.672 396.58 867.464 396.58 cv
866.48 396.58 865.664 396.251 865.016 395.591 cv
864.368 394.933 864.048 394.029 864.048 392.875 cv
853.552 417.085 mo
852.712 415.384 li
859.648 410.189 864.2 407.594 866.384 407.594 cv
867.048 407.594 867.568 407.783 867.936 408.16 cv
868.296 408.542 868.48 409.097 868.48 409.826 cv
868.48 411.594 867.832 414.908 866.544 419.761 cv
863.256 432.142 861.616 439.649 861.616 442.289 cv
861.616 443.244 862.048 443.721 862.92 443.721 cv
863.928 443.721 866.184 442.453 869.696 439.916 cv
870.536 441.572 li
866.52 444.806 863.208 447.15 860.6 448.611 cv
859.536 449.23 858.536 449.539 857.608 449.539 cv
856.848 449.539 856.2 449.205 855.656 448.531 cv
855.104 447.856 854.832 446.888 854.832 445.623 cv
854.832 443.801 855.576 440.121 857.064 434.593 cv
860 423.757 861.464 417.229 861.464 415.013 cv
861.464 413.947 861.056 413.412 860.24 413.412 cv
859.344 413.412 857.112 414.638 853.552 417.085 cv
f
877.872 435.994 mo
880.064 435.994 li
880.024 439.957 li
880.064 443.074 li
881.432 444.171 882.888 444.994 884.416 445.539 cv
885.944 446.087 887.528 446.363 889.184 446.363 cv
891.872 446.363 894.096 445.492 895.864 443.748 cv
897.624 442.009 898.512 439.832 898.512 437.219 cv
898.512 435.338 898.08 433.962 897.208 433.089 cv
896.313 432.219 894.464 431.557 891.672 431.106 cv
886.688 430.322 883.472 429.381 882.024 428.285 cv
880.088 426.796 879.12 424.59 879.12 421.667 cv
879.12 419.421 879.784 417.365 881.096 415.494 cv
882.416 413.626 884.824 411.697 888.328 409.701 cv
890.792 408.296 893.368 407.594 896.056 407.594 cv
897.4 407.594 898.776 407.769 900.176 408.119 cv
901.576 408.471 903.008 409.012 904.464 409.74 cv
903.816 412.271 903.304 415.504 902.936 419.437 cv
900.968 419.437 li
901 418.172 901.016 417.134 901.016 416.316 cv
901.016 414.94 900.72 414.001 900.128 413.494 cv
898.313 411.977 895.992 411.221 893.168 411.221 cv
890.313 411.221 888.112 411.935 886.552 413.363 cv
885 414.797 884.224 416.669 884.224 418.998 cv
884.224 420.934 884.855 422.332 886.12 423.203 cv
887.072 423.847 889.376 424.533 893.04 425.252 cv
897.184 426.009 899.872 426.837 901.096 427.736 cv
902.808 429.027 903.656 431.017 903.656 433.715 cv
903.656 437.414 901.744 440.98 897.92 444.404 cv
894.096 447.828 889.816 449.539 885.072 449.539 cv
883.536 449.539 882.008 449.344 880.512 448.953 cv
879.016 448.559 877.52 447.984 876.032 447.227 cv
876.84 444.003 877.456 440.261 877.872 435.994 cv
f
911.408 435.994 mo
913.6 435.994 li
913.561 439.957 li
913.6 443.074 li
914.968 444.171 916.424 444.994 917.952 445.539 cv
919.473 446.087 921.064 446.363 922.72 446.363 cv
925.408 446.363 927.632 445.492 929.4 443.748 cv
931.16 442.009 932.048 439.832 932.048 437.219 cv
932.048 435.338 931.608 433.962 930.744 433.089 cv
929.848 432.219 928 431.557 925.208 431.106 cv
920.225 430.322 917.008 429.381 915.552 428.285 cv
913.624 426.796 912.664 424.59 912.664 421.667 cv
912.664 419.421 913.32 417.365 914.632 415.494 cv
915.952 413.626 918.36 411.697 921.864 409.701 cv
924.328 408.296 926.904 407.594 929.592 407.594 cv
930.944 407.594 932.313 407.769 933.712 408.119 cv
935.112 408.471 936.544 409.012 938 409.74 cv
937.353 412.271 936.84 415.504 936.48 419.437 cv
934.504 419.437 li
934.536 418.172 934.552 417.134 934.552 416.316 cv
934.552 414.94 934.256 414.001 933.664 413.494 cv
931.848 411.977 929.528 411.221 926.704 411.221 cv
923.848 411.221 921.648 411.935 920.088 413.363 cv
918.536 414.797 917.769 416.669 917.769 418.998 cv
917.769 420.934 918.393 422.332 919.656 423.203 cv
920.608 423.847 922.912 424.533 926.576 425.252 cv
930.72 426.009 933.4 426.837 934.632 427.736 cv
936.336 429.027 937.192 431.017 937.192 433.715 cv
937.192 437.414 935.28 440.98 931.456 444.404 cv
927.632 447.828 923.353 449.539 918.608 449.539 cv
917.072 449.539 915.552 449.344 914.048 448.953 cv
912.552 448.559 911.057 447.984 909.576 447.227 cv
910.376 444.003 910.992 440.261 911.408 435.994 cv
f
955.064 392.875 mo
955.064 391.447 955.568 390.185 956.584 389.091 cv
957.592 387.996 958.72 387.447 959.96 387.447 cv
960.944 387.447 961.712 387.756 962.28 388.373 cv
962.84 388.992 963.12 389.877 963.12 391.023 cv
963.12 392.596 962.648 393.917 961.712 394.98 cv
960.769 396.049 959.688 396.58 958.48 396.58 cv
957.496 396.58 956.68 396.251 956.032 395.591 cv
955.384 394.933 955.064 394.029 955.064 392.875 cv
944.568 417.085 mo
943.729 415.384 li
950.664 410.189 955.216 407.594 957.4 407.594 cv
958.072 407.594 958.584 407.783 958.952 408.16 cv
959.313 408.542 959.496 409.097 959.496 409.826 cv
959.496 411.594 958.848 414.908 957.561 419.761 cv
954.272 432.142 952.632 439.649 952.632 442.289 cv
952.632 443.244 953.064 443.721 953.937 443.721 cv
954.944 443.721 957.208 442.453 960.712 439.916 cv
961.552 441.572 li
957.544 444.806 954.225 447.15 951.616 448.611 cv
950.552 449.23 949.552 449.539 948.632 449.539 cv
947.872 449.539 947.216 449.205 946.672 448.531 cv
946.12 447.856 945.848 446.888 945.848 445.623 cv
945.848 443.801 946.592 440.121 948.08 434.593 cv
951.016 423.757 952.48 417.229 952.48 415.013 cv
952.48 413.947 952.072 413.412 951.264 413.412 cv
950.368 413.412 948.136 414.638 944.568 417.085 cv
f
975.448 443.557 mo
978 445.129 980.568 445.914 983.145 445.914 cv
985.616 445.914 987.824 445.053 989.769 443.324 cv
991.721 441.601 993.712 438 995.744 432.524 cv
997.776 427.051 998.792 421.969 998.792 417.28 cv
998.792 415.565 998.544 414.362 998.032 413.66 cv
997.528 412.961 996.744 412.606 995.68 412.606 cv
993.185 412.606 990.368 413.914 987.225 416.525 cv
984.088 419.135 981.521 422.741 979.528 427.344 cv
978.408 429.87 977.24 434.264 976.04 440.524 cv
975.448 443.557 li
cp
966.072 417.084 mo
965.064 415.383 li
970.36 411.846 974 409.596 975.992 408.646 cv
977.48 407.944 978.656 407.594 979.528 407.594 cv
980.145 407.594 980.641 407.803 981.024 408.227 cv
981.4 408.646 981.584 409.25 981.584 410.036 cv
981.584 411.073 980.744 415.538 979.064 423.43 cv
981.393 419.666 983.712 416.711 986.024 414.564 cv
988.344 412.418 990.912 410.715 993.729 409.467 cv
996.552 408.221 998.784 407.594 1000.45 407.594 cv
1001.77 407.594 1002.79 408.183 1003.51 409.362 cv
1004.7 411.301 1005.28 413.715 1005.28 416.606 cv
1005.28 421.18 1004.32 425.879 1002.4 430.693 cv
1000.48 435.506 998.448 438.914 996.32 440.906 cv
994.185 442.9 991.552 444.836 988.408 446.721 cv
985.264 448.601 982.504 449.539 980.12 449.539 cv
978.688 449.539 976.889 449.188 974.729 448.488 cv
972.824 457.658 971.504 465.256 970.776 471.286 cv
968.28 471.594 966.192 472.002 964.504 472.506 cv
963.92 472.043 li
966.752 460.103 969.744 445.176 972.889 427.252 cv
974.064 420.565 974.656 416.394 974.656 414.734 cv
974.656 414.146 974.521 413.702 974.256 413.406 cv
973.984 413.114 973.648 412.967 973.225 412.967 cv
972.32 412.967 969.944 414.338 966.072 417.084 cv
f
1018.54 443.557 mo
1021.09 445.129 1023.65 445.914 1026.23 445.914 cv
1028.7 445.914 1030.91 445.053 1032.86 443.324 cv
1034.81 441.601 1036.8 438 1038.83 432.524 cv
1040.86 427.051 1041.88 421.969 1041.88 417.28 cv
1041.88 415.565 1041.63 414.362 1041.12 413.66 cv
1040.62 412.961 1039.83 412.606 1038.77 412.606 cv
1036.27 412.606 1033.46 413.914 1030.31 416.525 cv
1027.18 419.135 1024.61 422.741 1022.62 427.344 cv
1021.5 429.87 1020.33 434.264 1019.12 440.524 cv
1018.54 443.557 li
cp
1009.16 417.084 mo
1008.15 415.383 li
1013.45 411.846 1017.1 409.596 1019.08 408.646 cv
1020.57 407.944 1021.75 407.594 1022.62 407.594 cv
1023.23 407.594 1023.73 407.803 1024.11 408.227 cv
1024.49 408.646 1024.68 409.25 1024.68 410.036 cv
1024.68 411.073 1023.83 415.538 1022.15 423.43 cv
1024.48 419.666 1026.8 416.711 1029.12 414.564 cv
1031.43 412.418 1034 410.715 1036.82 409.467 cv
1039.64 408.221 1041.87 407.594 1043.53 407.594 cv
1044.86 407.594 1045.88 408.183 1046.61 409.362 cv
1047.78 411.301 1048.38 413.715 1048.38 416.606 cv
1048.38 421.18 1047.41 425.879 1045.49 430.693 cv
1043.57 435.506 1041.54 438.914 1039.41 440.906 cv
1037.28 442.9 1034.64 444.836 1031.5 446.721 cv
1028.35 448.601 1025.59 449.539 1023.21 449.539 cv
1021.78 449.539 1019.98 449.188 1017.82 448.488 cv
1015.91 457.658 1014.6 465.256 1013.86 471.286 cv
1011.37 471.594 1009.28 472.002 1007.59 472.506 cv
1007.01 472.043 li
1009.84 460.103 1012.83 445.176 1015.98 427.252 cv
1017.15 420.565 1017.74 416.394 1017.74 414.734 cv
1017.74 414.146 1017.61 413.702 1017.34 413.406 cv
1017.07 413.114 1016.74 412.967 1016.31 412.967 cv
1015.42 412.967 1013.03 414.338 1009.16 417.084 cv
f
1065.18 392.875 mo
1065.18 391.447 1065.7 390.185 1066.7 389.091 cv
1067.72 387.996 1068.84 387.447 1070.08 387.447 cv
1071.06 387.447 1071.84 387.756 1072.4 388.373 cv
1072.96 388.992 1073.25 389.877 1073.25 391.023 cv
1073.25 392.596 1072.77 393.917 1071.83 394.98 cv
1070.89 396.049 1069.81 396.58 1068.6 396.58 cv
1067.62 396.58 1066.8 396.251 1066.16 395.591 cv
1065.5 394.933 1065.18 394.029 1065.18 392.875 cv
1054.7 417.085 mo
1053.85 415.384 li
1060.78 410.189 1065.34 407.594 1067.52 407.594 cv
1068.19 407.594 1068.71 407.783 1069.07 408.16 cv
1069.44 408.542 1069.62 409.097 1069.62 409.826 cv
1069.62 411.594 1068.97 414.908 1067.68 419.761 cv
1064.4 432.142 1062.75 439.649 1062.75 442.289 cv
1062.75 443.244 1063.19 443.721 1064.06 443.721 cv
1065.06 443.721 1067.33 442.453 1070.83 439.916 cv
1071.68 441.572 li
1067.66 444.806 1064.35 447.15 1061.74 448.611 cv
1060.67 449.23 1059.68 449.539 1058.75 449.539 cv
1057.99 449.539 1057.34 449.205 1056.79 448.531 cv
1056.25 447.856 1055.97 446.888 1055.97 445.623 cv
1055.97 443.801 1056.72 440.121 1058.2 434.593 cv
1061.14 423.757 1062.6 417.229 1062.6 415.013 cv
1062.6 413.947 1062.2 413.412 1061.38 413.412 cv
1060.49 413.412 1058.26 414.638 1054.7 417.085 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 14.0.0%%For: (PrintMac) ()%%Title: (CityOfDubuqueLogo.eps)%%CreationDate: 6/17/10 9:59 AM%%Canvassize: 16383%AI9_DataStream%Gb!Q;q-N>Ye*aaImX[Y<A.%q(66HCB#7s:"&Xc'W)>:\opW%LFVlMlm+UMTHm/<N`I\J*Ymcs*&)S58!=KSRUHJ0B7#H?D60k8;j%1PVViUGimD)SP!(e6o]HL/5LZ]Th/DK`b0$*VK9A:d3kKqZ7pc.,k_],NqF*elbdpdoCBBlh$LdoP?Wo/7Z]L\CDH7XE6YYA;B1d%4'PB^.q@4+_)6]U(OKJs#/-B9s%P-/Vk*@hgFK"RHenT&h-RsXE"i7Wm]BNG3`N^mdVsNG>g4UC]=&p^:jIH0(k%O.0l9GBdeEEd%UeK!')8/M^*=>30d/a$\9E#JEUaT`a$;W^%_(`GcTg,2`(_u^:gXn%q$DF0p>a4g<5F'?Qnd9Moqeph.l4&KkeY9GicDD%4@7d:S%R?(RQ*Zbuu2]?k7Jb)`)pa,mYPt&F+,pQ9j1#bW-%8qX3E0QF=(ItP#f<G"AR.7o@),=8>jVJetiikcSNF&^/_uE#tj7=MXp]=bD%\c/rWpD2*(i<o)nO(FP<GX(Nf`i-961coTk85]/s=8X<I.]p[_[mD8t)m>sELgZ+Port%C[Joe6A=0'Aa*DT,R8kuT/q5\l6uj/#%#,4X,r=NrN"st#kUL"/B`^hduoS%7*85+G/Y$iu$ge1h$qOfa\R4oPF,*K.M`GdN$`h8bs-q"1k],5][\I8:n&b83j+sQi>niqe@%eGn(!2s!*Zoek4m@QbFe^+YZS.UVL5HeKA^k';@e@k_GH=d;=:0P+Fg<m2Biq]j*cmr)_$cO-NOOt4]DLJKI=<&=rSkqmn?mt]eL%5MYr/iND'6m]nB+9qD]GTG6['#X4q]-j6A5+dV6U7'c69:FLhu5711VUJNEYKi7CVHpXfS)G6jTn74QhGLC1R_m46JAV$KC)t($`%H%o-hkU#k_(<Kj,P/$J[)m&N8V4^WR$)O:jHr%jIkRi2/)<_Z[6GIe@OCt7_n-S!F8+6gB&O)>GTh"SYrJ'3K(&A&M&oNm+TbR,,%5+rD._DQdiJ9&M:_F;<fp`rXuSeLAqm=[CG3`++_&RU.fK2U&\pk5*W#a/MXHXt(Q2jApnnKU`;6Cro1_'aV_hN@>`:I7'HJPRZt%rI[m$MF:&B?V1.A+tj$`3A3VpQkB0#f:`o;)p]>KF$`#d:?WnhP+)4:+sm#6:^26d9.'9@SgM,tGG0NU$)NH*6iREfaKt@BAY=5O%.kfTRg``14/J.1/AXJf!?J9pM+t5nqpj']:.H*@^Nc:Pr9DA^Uo-;-HNR/03psr%(jEYd<r$.GiR7X3BN&fi+WI`%gM#<.:SNLDd%o!;>d=Zi<EfdG4mbIo<Rn?aT2r(InsRHLk8%R:WP8U+G"##?aF0AeC]QTXO*;YV@3-<eg?rU]j+*Uu)a(C6,kic"D6?k!=^(%F6Y%(ClYtic"B@&g?-W&\dW<pQ)2n*Uu)aQV*D/ic"D6?tC0q7JomZAMW>Ypm_2VKRZC^_q;dQ)-?C"s$hI4rqQW[5`fOY5*i%?iCl5k%Vu.]qTe`*%5rqP,!g*K+KP4>JN<Fj+Gsab2h=8C(F9MR#)PF0mos%I54c=gfTcd'"kpUj=^qpcK^VLfp_A+O&otb_5M$u#_paK16%7AVF]m:2i5QLP/VaTsN>T`3o=;)r_GQj2iL'iYP=*=:`::u1(=\dK3B;'5`"0'[R=KDJ<[o;L,s%sf;55H$dFDjl'o/`OMHj::,e%^(MadpoF0.qAZq7C5i@i0=VJTLG-mH_I3Xn*bGt75RI9]UH<E@b`J:_[0X>&M]gk3E*n!]"lB,IMkh&7dOa1--OJ=3`(B1)Qbqiu%(dSqI`Y)U6F?qLS2F7GoaFB']Oa`KE@dBiQ^9IAkVEhXa^(HglBc%T_/HacoP"($#?oku?(WN#)&KUCqV0ta:o91*?IjAs./OUgB%1*Sph*U&M;1-m!'0of<**%FHJ(O-Mr=ejE\2+3!;Us_p(+W6+Z/V(QJUoaW8PW/hGMt0,ZJE/gXrdqH>02+*t?(dQ(2cL,R#5CK\%a?8El%9eQWK"rCg0dKn1bc)#R1IB)Ub(F)dE(uFo%-]X.12.[eacA*P>+gep,)s60O=>97KP))ig8#:dcreYJ@k]"`)rV^ZM-p>R%1CCGMpQDfUH*KK+?JmR]6$UVIVFU^L1\;C=K=MqO=UR>&#-c$"7$<*.cn4<3G`Lu*r`P>),3;*ACG;&fr%cV7BI5e"%ga.(^d!Zt%O>rT%T])R28.\B_!]5g*!U5SOM!2mP+(U]8@'/Vt3`&C6HbaknbqR&.c_;39J)EB=Bh7O%^k3cZ&C*PAUi$#C+M&89A,2(&RPR5$%Vp]M1CXO^eVU0hfL3XUNGRlrt&e:(-(drC>3/)[2It/$WP>+]#X8nB%<r*bN#?L(!r9!8f*5J'Fra?:FaT-`!Et9f1bY+N[I6U8#%=ZkC^QPo!7QDpP(B<2n8hRKhcM/F\E&\,2&?35i7^X:O*00cnE=J)6-7=s;g%</^1rXcMHBqFdh*'=[.$I9BB%!0u8F!*lRMtSe:%n5I7dTcXOgUYIdk^VKuXG_Y/u_K_8I84Uca,J&Z_80Z$+=%$L(GBeIqg'7?V&!2A\ikt?uHG\!=@Y59+kdrK?U_c21!!U_fhYn&m%^pKn_lU5h(16*ob%q[a@jfL)"[4&S<l\J/:#2Mc?hh*cU;8B45M[)!;Z\2S;+6Y6T\&`RU=0R?6n2.Z\>euZJmbi6j6phNGOWQ]+%;-kkO=n!hRTk-O<8aSd$Zo(Ui6_n;Mo+8r6k\1kZ#20jl(4DJsd=X,gM=2#<I&o$QN5u:roc`1D=,6`3MU2gG+VGHI@S(.8VB]-l%cd+@["`p+V21^,e9hIl1bis1(s02,M61b<$-)'4O/IL'5IdkR51sm6>.,q-BEL]&dO":GU;_2,e2oC1Rbae`P[=IH$47<cuhdF[M%fPoUSE#qQ#T=Ok.jX_Y$ftSr?AjU8ADj.DQA'6Nc&Wmih'B"GIUaDlhGe1GS@",pSP5L;^.Q9`3]ETU$#GXo$5XrW2=U5iLdQ/7a%m.7I:r@!dd?LG?&KS]$Mj>]pqcZ.Ah@b#]Ei'%:#a3/Okb[rtHXJcXam9s>AP.APujITlW\I)17nf9,b$:q3AkBZoPS@-E6CL^BV%ld*l\OlO+K+c[U.-D2ST>X?"cXs^.PClb<d2,4hE\:L9[5*keJ3DL69Y/#6GcRnXI6uIQ6(M+8Ok&jdnZaVclc$?$n3?(TW:66Ph%hU:HM/?b1mQ,,X]PkV6:C!7_PI\V(3mt?m/@DnjV?7-'URh^3%T/VE^]UqL0>Eie]n&8/"LbG"P8!rF$%i&F2[KUG@kQl"Y$Ud#K%r.u0JI@Ese,4M'7k96g/OE8fj-i=JDSE*-r75Tmo'"J)CR[hQ'T*.P3V6VL=#37l8S<kLh:'kk)'_2YkcQgBg_Y'&%aQZZ5*H8,0%6*ht11Q7\pO,u>[-7t%b"A<9_QW7MfJ8;r#TtZ%A,Y5<#m6c052Q8NSZ\3!.OT(?o!af96XX-"]!<#sJ)GqYe&G/!F77Qq9JX="i%PB)tJ1?!`p,t/+6,kU",'AF/1-9N@n0rJ!fE1&E09B;Vp$N(lu\OcXFcGGZ&.a6X2icPm;#IFrZ`H-Xe,4/#[1&8hMJRmkmj.A:p%`7FG5in"mc*A$IMDmEOk=IQ0aO>>q]8;IF`U*#5^6T[Jtmj0Qj@DmZRrI<*/$ZZ.Pp2W1n8fZS>R;r#6+%KW<8XpY6I8CPZn5"tR%ReN#=4\7aA1Q^^.%e+DX\c_YJ=Pehp4aZ\hY_L'F#Z4r*d*#;GjU-H]-lClCb\/UEV0Q5%o`BteM/Nba(\Kl;pEZd"UWZ1>g;in_%nGdph6\Fn=7pt[K5825ab826nL2#M9A%dksHkJ5Q7'R!pr4d\!W"piFs#R<"StGoXn8"JJrVSaL-M!l/K<>1!;ZGQKF0R5GrQT,5%m5oWCK;9R^j?M9T'CcIrk@C]cnY`mqT)[&@pN""tDWR-jl\.2j]R$($]MDQD87[9DF"827f`8c>$>nglUARsB)Dh.lMA=]eK0Fb/%(=bsITZMWhr9\"h'jSDCRhF:K`UYQM*SrC,T9f*_s240=`'<_pI1bg3+\g3E*@0LOO/t!%^WCdX=fLTaB$'<L?G@j6`>Z\fEEGH'%EE#T^ME*=:$nDM:;iFNXa"P.sr14)L*jQ#7l#5u>4I]b*qZruT691(17#Jr2Yl0.A@U3N0)L<^46??`.c3Se&l<nN5B]ONVYAa"s%E0jr--YqFHVh493n=Dhs=!=]'/Wk1%lu=aJEl`1_O]W\)p64B12nsB.IZk?gf;1(jPS3tY-V,h"-\.-tn=8V6LA:9^C\M7'qT+*i%O]h3<XQ)S#Uj"L/aPWdMftZK]iT5]A)Eu9lHqWr><ce$WMpK8/,#94T:QX$WKYOb_6245j(0^u8\9e(+:+1n;PhW5^q_Wt=Hp;i^%(M=X>1EohPCLX@Bn'.CIngX''f_N=&$+Du_ZeV]S:nTfngl%!#AqWMG%;k_0'.I?m;(a+VB>lUdbCcV]H@UJpkU3ul4P0Bl)d^[_%]3_"6POOFM+acYk*WtsZmX\elMt1n@gZE`'p&NL4JbGqdnZD=+:?Wtp)t*c:fb:>-<:Y2$HX6PU-_ZDgC,!e'5.>%CnsY5j*7)M3%9pHm-`fDiN]3.It(E$'W_@1>dV.FpDjQi&=`7I\)*+oF"@VK-e`S^T\o.he`m9%q-fp(c;0:=EI\eMoO8`\BVC%pS/7A;a:)9U&U%c@[fQXdNl>El?%+l.H1pqj)X'=E-&7cN`I%n2J'[m]G&]OpZuZ2]lY1oPb/ZBnck?-djQ+fB?7Y0jDuqe,IR!UV!jUcWF=8_Vi6)%f`(;]<d(6t]-.)Q?4U+#GAB1ICKAB6>Do)8gdD\5YPdkF:G]]`CbZMD-W`+Q^O"qn>Z.\CV)@WY?WrB`m])3*f!Mh=ip/qUGJh2B%SJL4I=LWNL8#<?<QSCAc9tO&l:@`P65&tLaIH:rL(G:ZG`Hq>kXNY9dU"[aq6LEQ>Hkjg(45)+B#H!P\_P$:^\,u5ekf)gof*X"0%h?(:aDlu7Z)NTZ+7;Ml[lmO`aE*m:8gtP?'r_2%PnSgK#j[jKhfNPA2ST1k2B=[;%Zt]\\oS:mJ&k&gC6u$@u3M`r"b?qAs&(eAg%@WBMq:gpSb'VeY#\QmiL0hUk!B(YB7\@4;>$Id[XVYH'(L,q8a+a/)O>*GQ*C%.@BP<%n3GF('K)YdS$Ob(i7VMqoIkfYRSiu;;#%O"k%T2nh-t@i&FQ4lLFhY/*I^:Y]@M+N9+bb?B?^='P"\WhH25$9.u1&6$qMN)t]MbSnDmOYJr.>AT:GBZ=I)MJ[uL#!A!S1i29m%(HVhL3W/+:^C=D(rTJ6LH2Y%h,9)^4bk7;eNV!1t_o7kU+.`r=Lts*2KQP/AfT-C[,2Z^ag`hpoWqem7AQ4fYU.XMeXZXaV3%%E2%ruDCiHlI6:+BsagjEp:nmU=]6.Gg"&D1>@$;fpcJ<:jYP?E\[rJi]SR]i_Z@hc+TIqB_t!?c-l-d@6:S5,0Kd3$[44O4>?!>&`):%5$^)HC+Y`k1ptN*G3!sd'`G'i?LqaeqGO0F'WD76N2'pona4)U47+32.sZ7k#;Hhd]apJ>]/_,gmJLVoLocIPajU0JB:Vo'X/Bl`%aV,-`OhLL(p0Q@\%U8=?:QOH&*6J5XM&uOepJcpBs0*2)pGs.FpWmT[hikt1Z3;9cfK>rjoSV\4cO3.a^PJ-S+(jcCs.=eG2?&B/%_/_[)r3u"O5hP60;B_guWRi&hGP/!q*.7"=>XHP^<X3uNE6''jL4-Zpp7Gc;oqeQn>etou>6LPch)S_io^q@n5Md>#Fha\1J*YN6%s)`1@2G)/*)Vo)Q<lcSslh+<^I'';JgX#d*bWj[*jk4t-l/>PTrc.grXOKI/_PFYUFceb-/03+_l*,9?o`mY.,q4cpI_5&kL[0do%4KG+uWJ8]F]gcFU")k7X3TP[.@4X$WbMLAiL64c/^_bsU6g(5aemd1$[2*%X#L6."qMYeG0VeE2K3R8J16/4[Gakg:`W=ba^a^QG%oEWnsobuQd.o^7(U9:n)4]JY@j(Y(W%Mh2n<.YgfZ(U</Du!slC+WN#`UJBHZCQYuRu.<*Y848)Eo'+bhYDe=*HmFciW!jBql,RD%+4mPRlFqGt44u0*A7nb2-[.=6(d7<lT<T4arot@O]t[Xg9R"!][>3f$lAmVI>a='LFOurkeu_6a=IdY3nWms0^L6p#XfboV-EZB#%7alBA>KJM*`l"X+h3a`#I-B^;`*G[b>R9qSc5Z$@C*nnX[Y.)/o@=o+K&psW*k0)8nZ&mV]-$T6r'D:[R$ZCrYL^!11aHWeAaBeG%DU(%bp/c/eLXjKmn,>ip/U_)ZHf4b$f3+eECq%EdBh)UG80:,RE'0ZaN6Ba\2WDu?)F^4eE/sc"_;X9B6jAGZ97>?oOM#OIa;](s%DG$XK7Wb5-O2jA0WkH@a<K-A:,D9U%1L"sJh//i?H6-\!NS@e(YYAaSo8LR9VL>nk)_ChbU<eXk6UM;T3JGYRJOO:578HesKuF?g%M@t4+<68gMUnb>kKLk@oU=C:$FFsHuU6T9#@RInlL[K]eYb_O7iAiE<8<6cl'[(fJ5RK_rUL$t7.T/q^Y=MgPbTb%#jVE,V2nO5=%ho>X1cU3cW`HdPc)#%tY)uRU%Q'PXW`pPIY$4Ccj+a4OZV7C'0#G=q9hOPd%@6E(7_S!L]:9l&j'GPdB/N9:Tgd=(#aur3HYHEJX%)=JJgIG,t`@UL+7mO1a+D@HY.;"d,[IXg&"U(\@?Oql_\jS,a8(qCUrVQF^56!b*5A"3)%eV6OA39q*q4mePT\^n&L>YSCCm@pE#%6727qV*!^k]/,p#e[bf$][SP_W8KQRV5@+5d<3bN0Pt#URR[PY89oU-(B:^Tf]As6[[5RA0Sn(*U2\nV]>&HRqb*Kgq-Ysu,=``!%TUM&KQQrh+*(5d\BRj.$Pq^p0?VjV>TdZA;TRJ2&)QJJ9d<$4#qm.<^(6WP#*C[71dr$b'>4W[?+pR_OB^Y4d"ri7"KqP3B6m_%F%/QE-$e`)eD@^Opd>"<!uNU8>KTiss#.Fh%j@^D-]AIl=S.JTntBD^/C]/uT;qQm0Pe=J>Li(kMEZ.'PIV&SYhn-Q"kW8'D"QMc*t%?HCY-[dHa6#C7(!.`^d&d0!BXP?<i)_Wj!2\r5\4r:VV"&h_3$_+P5ChO1m!8&$kUUST!MK!WuDmgpm&**FS^=Z#1@Q/ShA:'3"D%,T<O[\hn4jD@k5]?"<bmO]`+m!c"!#)gY>&6SrWLL+ZE2`4_-:^Wf%mKHkRjD$uYKK-WmT"qK-8A$Hm;2CPNJ?]q?_\^[q6)Ya$<%G*^T2:8H6ah"d]gOLRts]%#^b.^MHm5JP".C(6Jja0VNLekWiYb(A6<8gG(([4rqaAX;X?h^cIIU)Ne*lA[Z$=aLG"^LiUBDh'D#%?X!C4eVW(jWHO]7(DL\D-Wt`Q6+q`T]"NeCcr)F&WI_rZ/e_-8)lj0XWY5,6RQ>XNmqB3F\A2";laT3(XXc`'4f:GaM,mqY4'Dsk%(MZ[Br7[<'WEi[Cl"j3HD9qXUg\B34UR8Nu6H\iS<do<F^>"Wsq:*8Md.n;%?R]_TAK^O_o'<r.@BC"T4_VR&&L(<PZ5"Ibb86Q,%Wu?ir4f)2Z,+.()iNg#r#/:j$l@F[0MS[P^XBfR$)U;4D1"@t\:i(^FraOO_neV(jjk'ERg(V2nUe>H%^^<Ac?_H*mbM-/=dY3rV%P)Op-+=Yj;)0(T\A]h-iHM>K*(s^/bHF%P[mElU=AN-q@Te2Ej$'"HK$m)o2]`Jg4QdbbX,flX)]9)ApFkhXTB?@!`AnDCZSN^gB%q<6m8lGFB.4FZ.??i3k^hMYO7phN!QHsl[>DLK?i*,h).RNk[HHRRcr'r7HOCaBsg2km"td,`_b]lJP,1L(f40>=7*lXq/"D%Drf%1H.N3]'tlf//C1HBm*b[DPo\e9/Q%+Z&[%$g0F71kgom,$RO5;,n[(%4fbV0WiC'&ESS+2Nl9PlDm0F?BmV;5oI]OZXVVr.QUHT<%>a8dECrX(HA"9Zn._9t@@=!j]3od`bHXR8,;`XEU:>`BO0QBQ`kijlc;,"t[V7#'a%-E0%G34R*AV3"]mT_GXAJ1$,\('SnY8f/?%'2J2-j-%g-;%mn4_-a2*R-hOV6Wna@n`2<HjfH',afA6H5Z]Gd(ML!==73\O9Pa017H9Q"/KZmR^0Y2ra1N#5KB)eWo]>f(7BbqG%B[Y4K?4n8,S4O7*dZ3Pc_Xs-4LS*pB/bk1AHg<6`O80bS=jsptatp(:6/@K1II$`B)h#-KWU>&&i<JIdQ<Z!#bM&\!BC74PlT9ju%7n,`9PjY4m*NoLM06S3_oe%93h++_IK6>Rd%P_G!Z:9Hms(J+Wki\]1Z[,Yd1u/X)[9PoN-lIG)Z\rDU`N.R'/eGG=,NVCubid0-%Ze8T_;:Ls*Vu+]h5'qTWl79hOM(=i\6^G&L]H:-k1f/\"fLi/s)b$MTl`6GEa/k?>q^9?PZ^0:8C82TSGCb+;7T!M(K:`tK*T&G*%)rG83q8I7]XtEPG/uP5QNS)nnf4a^668k]l8iSoPN>enT9=g\I*7`'';/JOs1`C-6T=Y2d@\Y$Jb(ETe"tORLm-0iiE3ic.?CC/<%A^%DYDR:8[#h6TVS4\bn05g&CO?d$mq\oC<?_i!Nj[K@F3lORf#K90Wll^]L2"<`O)F^b>;/.pi'aBFEf$X+RXk%0DauVbfb)L!^%qP%U1f*tbL#-TT'"P7>CAWoiW`'`JZSMZd\+0ccE^0XZ\@@%cK]b28A=Li$b]bs%9.@4:gn(qAT.ZK06iDGs?:hu;hmOoMuo%[i`%>bh+e=Rph/n>+]M3I]pgD7%Y?q^G[CW"lJg2]#J3g<Id"(37*D[o^19Z-hjUFJ.?$q5a/@`YM^VYA[RD>*rYG2gXYr5-rA3CZS%K%[q8d<\.u1"C,9X3WAXNC]d*rDEhi@fRH@#=d84YdnMn[d=fL!(ms;4]W\jPnTc2+Z9=`H*n+l$!)Y&`F+tFuugW[:,Wf8X4AVWjR%dJ>Ya),>&a)iZtibQb*sfl1M!Z[TB2d]Aqs-J)qcDjO0:qs.PR&i]*f\?Y-RH[821?H-YloS2sG`+DlSh`p;\gL^UH)Y.^4\(UR7%fB=^COS.+V%)&2gR]:`+Ru.c&I>d4YN<u%JDJQ)]Msonq=4X;pShl-mUBtkT,u]KBH/RWp2sNVcV$g\MUs5J_(9R9E)GS<l>qG3r%N0iFd?`nm2hm!mIBWU9\Z.EA@c[)2u@c2R7An[C,h"1?^/>da&?LgjkC3RFkgo#;>=YZcM8G+b$.Slfo3-V1#gthF*=EZV;nMYZm%Q_VXQX:.h<bVe(%M,GneA+-FA,JM@!:Y!&]CZMPhEM7]Np78sA<:A[(V?rmkh=b>C/oYY(rhI$QcD`oHadqUtSsSMUs5GCUHhQ,I%N.5nm^#mr_a.D%pjf.U\7*@:phTJm.qdODh9WE:GesCS-G--)je+sY?;n`(A.aE+8G=PY?Wl/sPiVmB+hL)7bNI"rh#?C6Lq>rT5%FcKTddrtO^mHJ]@H2db?okoMuDtd6")Go/pZWHNXD=X7N@k)\T3@])uanIf-Mp(NL.]$]Ci)n]]-+dO[b[/`Qdp%%20$b0C403N_%nX=iihF5h]&6J_S8rg:E1*'QC58krsW\dX&Cqm]@k0C\""&9Iegs#.eF*&Yi9)Ho:58j3A=\DfmcfKd(51='dmPR"mV\bQ'qGB.2%S)&tDp1@[L?UZ6UUU8-CBEfnma?37!0?Roq"ad6FJ1gZ@aA9eVU>tB^2@?"/U\u^pV9_OGC3K(H)A0EgH>b+iF0D"BF]a6Cf?Pc9%N;5^_DXh)li0b(iNr>X#D+HDUYIIUcJfd\$_B:Ak\W9E;8@&lY,6usjM+U!SrS>b3g9)^e).'f>3$.3eD%q1#lCXcncI!N0T_.6U%\1ZVl]uu?L%hllg,;FLE,;3GS=!CF8S=0=pW=k!aA:Zk#9naX4P)&&0WB]7p8R23],Ruq=<V!GmTFTgUg$GFc&=98,5L4LUUCcsh%3(Un"C?Z\THH4T%=MB)Wg6FssCf@>@NW*O$NqiDF@97"@HUA$D31?"TI;5%thfMlLaR/1:E%Fh(lDY1YY+;,bpN1CkYoMP&G$"C5%K.cNTl/>`9AZGB1`POB=e,A#,s&Gcn@^=#_<h0c@%quQ"bkNpL\((GN]h$jE$N(3)c+@.7``cSO/^`L#1,PPgP?5Y%%5/K/*1's?%_+Hq<'//S7g<>g%=NC'?jgp95VTa.-Cg+'2aHMDNF<<P.NZ3/Ti66l!S)jierfJN;/^j/\YOgH5'L(BX74s>)eJW8`E%]H28EKd/%5$N;N[4#tYIDE@bSt4m3C[?,ICa2G,2S5C3\qB(oc.kW"7HbLK(=gK#2#CNG)CG3(N]rot92&[Yo;<Fh=>i_]MW]&+&%lO\7d*.\%o@7?P_T*=e+,<hNb*=*\:JdR4=:A5$S0Kq_Lm>79'Oh1*nD.WVgkYJBG@S``DjW/K%t%1%$\MHkYP[s6WS19[O`=_[ib0d"Q*dFq%>Ge'oVsj^=)m"k.qksjI(T%9>6:MsZ$NgFZrQ,6fIOQKOXI(bg(>hQ4b!WB'd^=((+c@L#C2XMK8Q?eL)'n"d*86hT1A/nTg$MSL%Jh)"^j.ag+eYR/9<\+.LQ2)WaSRamO(ZK7ZIQG$/H!=nt3T/OUjD>R^>c89jk0)WBq,4EDgV&D!=?"?#:gr1g\dHWnVrd7Sc99RL%N4fFD4fCHMQ*;[*k@E^k8gUC!;6q>^,.^ZI=>"-Sn-gm'-iW$N%:4cjQo(6*W_)P&\([V,:%"cVA"Z1LPtCS0nXmc.GM9tQa?WV9%UALI6,hiBb;:#_cA^-;gS9%/AUOSrW8.QTY0q9&l"tKg016Nnu8pZ:+894/fP/N5p&V\*PqD!@18>6MnD)[%2Xe%\GA-iU9AR8p_%a6tA0?7JYk0&B+:5F+^X6Vth4$<re*g&dK,?6^8km@/giV8jcrg%p@5'fX9eS7aN3%+\_NfPOGgk1X!C!KajAJYK8nYm4EsZ"gPX%`]@,HSf?Yo7pPTD!ocg@o'X3f#>A)#GXZkh5,9c-NP;0'jCYdK3N\+_.2j#5HTI%#BuY"bXk2OR!lnCo@qoW1R;kh_344/R;-)GH%aQf#h=;I9hgZ;@M&;U3=<UukFr%ST#Van@s^p-bdXBCrR:>!rm"j_6g>OFE]d5/I6Jg=J0Gre&`/`MGtn3Tg-US`[<f.<ZtX1Gjh%5Lm-^<n.:-_&q..bdpqZ&[.a%Os:A$J0)s#cL(cB\!5Qc%$]I%c;WHf\$[*PAC":85AKmC#IBT&BL`:u^/V3b[qD(Wd3?b>E^a=9%eamA+-gl3lk)6mDOa1"k\cm,9_q%ghr$&JN.\0hD#PEuEM[HfUk4AP>-/Eq0l"P&2N1.#RnhaS,/?/&+.jK'@O1nXCV8dEWG?A--%@>.,&e'ID%a/V^Be$n_\*larA#YW;_K2jW?<q1ia8tPOt35$;un+&U2m(]jRi=D.,f3#I[l*#&Dc4gUM.=Pn4&'fB*2TVmcCln@@%,joLA+FhIQfuC\YOQ=FPBBQXgZU8:e$FpuhEQ!PgfRpSZ?H7((^Y0o<nkge'HnU$b6Yfim-o\1*7(%'MhZAf6QtD8?rRWW$HciEh%(UkOMl2^DK>hmb2\&@@pp+CFu7st<Kp@?f6]TXpbmF984j=)Wt/I/;6>Q1tmI(_E6b3M7'(Uk%6_H,_?`/Tp.C%igpjS$C./`di&%Ihm+KXmb5,>E`9D<QF[]m_u;4mDZ1:%AUIMK8/oO3cK(3go]^"VmO+Es%3ocjPSP1LTJ!/P&r<o)0?E)eB'(rnl!uW)D"^NG/*9N%Q=pnT/X+]R15WiI\;Q+fAh2Bgf`SXqNHkQU`Z*+fZ'&@B^c]A9P''7iW08#Y4"8ii&i.$5a?uulmWb-p4C?icC<KEM3E@D?rA/:D%'1hpOodtB-IQO:U9@Ci6"V>f+@E?1_khStc`?u[\@,$<6n\GU5X3oWbp]ebQHuR04]MOOCe#5ajA?SJ-&#6RcK`&6A$r\)5]E`n/%;5QGIY*BaWB%<H7h/5%@<3MiMm-#tbBl_6<^(,_4p8'a"iI3soRm8S!D.hOB+llhq0pY*!IbS),HV%lf2s9Y'Z^4&qO=C!ON.mL9%CjZ1`NFQ`"5f#ngpi37qc",!r/Gl_1V1U^2+eM$U>Ees+dKBmlo9MjcXAA:[U6QgK/ObM3o^$LJAW2qXoa.^+BX,-0gKq-]T(2+C%qiYh>N[7IFajlfqHG]W(n?E]em<HjrhBIJf']lC#W]`4A[JRPK^2THf;9Hj<-j6J3X1C:uX4BAQ;IRm\LB:P;.q'88gC"@D0FM"E%fs,G*f?QI\ED+PAI1dFH;59;_>\[!lqA`;i?.r1h##Q;paNKoP7)@_bJ_r3Op%_0\'gRY`pW<0!_H;lLj_LRqWN5l#FUE&h_X3H.%_t%E(eh([f@q$1`N563on*_@XKqWg_g/D*t/;BRh39>7`0;rpXOA,i-/H^Wj">"u)fqB=g+9c_^cYBJ]$#]0f,A6R(!K/KB7kLmn%+0`C+"Y>G4o0Z:a>Sr]<F[BG^B;_+Hmlt9kZ9'!tH`D>8/u=*[J@n)0hn<>$F%7Q&)TG\Z/;RGui<liTRs@@M)^esTCmp>4-a.N*%M,7M#pm.@+.]k]R6Ck,T(fg5[\!fk-%U@YA>n66Nm.m)1Y49r3_7HngVokC(6CrsQNCrjM(3u[p;gRY`]n%2lOSbGi1aF<b)6KKS%Z%IURh/r!pm>CZ];9$#qb-L:>8TV.P%q345K^.=I!8nDUqphW)LXL(,l5W-s10+5(Hausq%^hWqF%ElcTe5kn2<p]!H=pen+m2/k%*88R&!=%lGE7$Ou+<>+prCW(;lM$KbKNsDf3LY#&,J.HLZ4kM,4=a9g41<Q/c64fg%IERi-.DR0-M4\*RN^QD3*tJmWRS&V\0U6P%4apt_eQ.m=FOqBgHC"J:.lYF@d^-N8,IPC2k*<&MR+KQI)dT4@K/K3?GLG`?Vr0gga]TI)pgV@60$A4Z(#\B6S+TU+mOb/KmT59L%I\&?dF:XX`r$k%*X6c\O`i!bkPls()/[>YQNT;Y:oC:Qfkj4T!9b4Bc;Ml3cq(Shq=\$-rGV@.*3pcXiH=`PE&dLTbLS_*:K,o/!%H>pQ:/<i[FlrU4&No>Meeo'.1V[h\petkCmMFtrGf)tc8f?R/n5%$UKofM'0Lq]+I^On_HWjYCsk3$ROVHqkarTSInU^N/^o&XmE%HE\l`RG$0Zb!Hk'VWgI;0&RR.;=(0-Qq!Z^HO%U8fs?bMNZf_&Z\?/;Z2^Lsdm9>bh%G%jag&oSTrP#rAA_DEOMs"(GD.cmcjFt_%+p.K1CNlNOT]0H'lcE,j0u>ZQ#=FfLO%eq\htDY/E%XpV4P\7j]lHrC,(G[UB`;QA3R_^HUI6j2F.NkWbL^M()P916qa]I`kESYW%@4a'W$3mQ*pE@$QWrBFnp-VDoD%WC\G!=XskccG%GioFH3n."sG,4_Y[c*4H=/H3E_H!I:'p#NR:<qK&j06Y6[;L)g%[W2Q8Bjut%WBh?U<#:ujK5G/k"mfu$^2L3:R!u"JPUos+<R4Lt6e\nt*"l5>?LkO65FqC<+VNs(`4I]Cf56uupbf.oBHk"Z9a72+)XF@8r/3Vj%'Qhoi`dUJ7.9A<=>de,DI6)-SoWZ03NFG&q>)A'<Xm4\i49Rf@m/Hu7`quHbL"m_\>jR<o_rUa#itEuOdDL<BgE):phMV%B2aEBl%%r95_Va:ne1qs/XXMGBP$AXo"?A4ZF]rZ/,YF]/SNjqBYojsC$fN$TT![mJf.A!NUmS'n7W)79XfjNpNS\Me:H0e/Hh0WSOA6I:8%XS*5H3aCDKind_'392HZ!9/`he$Q7^lWu*tW6t<6*1tFtWpY_=b'KMTT#W3eM+LK=;3\EkQ9St([T;<$OH4_sKFT,b8=[N-PJ$8t%pq8se&j;Q"\SERF<d(gDjc\sU*ZdoReotmur&@9NDIli8AfthW"7<]>hkQ6`fXD!n[.\CqD?_S!!)p9dNT5,5FZWJCjE.$pom,SM%*$2=ikZY5HjagbboGgptG""Pt:es6i@B=7WWe2Pa,BM5j?NCY;j2?5VWeQDe-_aVcklm=><mJ!?%&I:RGH\SJ/>cb":<]q.=$=,)%+4-qicUt-KbPs`$=50_"$m5#=3fZ_HKf@42E,6?!W2^o<!rd/R=fDjUh>9SQBiUYD'O+'(7$8RUD-$>eNtbX]l1R.HWb`&3FYMR;%'b9!kCOWAcs#[Ed!(=KP``+r*,V8Op<R4V723qVK'=(=]Du=R_WHf"X)Wk.LYb$e84faP@Z^=lkG,o%!/Bh>N3Wqu^78:7`I&eJ$%;#_7'(,!$Qb[J"_]a6kacqh,C/(k0$T+^#8[>kY\4j[hq3I=Rd5:1+5'R[m-Mqaf'+aYK$!*t[P[#J*I%]e)5IEA@eoMc9Lin:na%+]dcJ9ftKg-UMh<aJ746AlmsTkpj`eg.no[4"n[Pl_1B1KtX@a(7#1mH;?8$$TNc0H,Au$$msNh\fWi(E8Yh<ago8rj3p_(ES^1q%Y-C+mE73Qu2q@+s[VcE(c)k:8"0ngX4]Y7[T*t_MfT&p'i?WA*HUIil4p]WPSYM#;WdTDp?BA>nS@I"4h?0IX3jskRHH4H_$iiZS%.:JaOo46(.c<a6BU*l9@EGYAX*7DnpkA_J1bq,6>d`E:4R!65ZU&[+&Gs&/ocT2cAfNd])6U=ltcPD61!]B7BPY*e_1"p$SX@BHe%n61h%cUVos8L=1ccsR`<Q0nRud,7:cq"B=ECRl#W3bY`+(jo#AU]Cq]2m,7O)Q]G@EGB1VNh!-`6%`bA)6B8a*XWA5FaA\S]a+U.%mc!JFA9YhVlSq($O0:qA0%-ZBLI")ZoQAZh#]ubG"/j6`_V!AeX=@Vo3([!V61aM0g$F@Rh%-6YI\oa1KM)\8a7S^Dmd'23$(aki%mNc8;jbYa&!!2r',I^0-CfB*+flJ5QG([5hJ<)^?%/S\dS>N1gl\S;SbC$M]amYKZL;i-`@)!>3'*,@/RU?G*=lEXELGEYc9,:nE%FrqC!oTFpa-69jl@>>.qCRO,C6H=,!6*CTtm4uLU8=;S':[uAURR6/KmM_AU,B#D85FZWLpoM#&MU,8gMiRS6+1(2qP*4]qdd44;%S6$H;+C.bIo%_qh($[k.*!URR7ju@R]5p!o2/:&.+%p--H/Isb^e1VDM1O>[nAZ!`kZ0tQ9/>94_!mp6=aqD@GY@&FmbhfAoa6KH%++pZH5Qr6_XPXs3XQoJL'G[^&#sJDnYC[,D0Yn]t9Y@er!@i>VUiW6PXV)u5?p-@s=:#YRqea+FU4Pu9K)45N:P0!T_?=YgmIq`&%YS(r1PG<_p0YmtZWDUK(Qsaq+:PB-VWle^42(D]7'<K-Wj&!QaR,D6igE.03`NdmcJsF-b#4&6c_+Kc^8GpE)?mSK#)Z:>EJs@SN%;knr00YrX&e>#jV8tLmujJ^uWHPRtq"Y4#5(!a?N&f%Ld2Vi]q\l$<?hN3(8.TjhOV&eFATRrH]-K3U6:r,cBWOuC)#ZS#@-5b;d%:5]H[)H3b3aMUijC:Vn6UT+QQU',@1g_JWU?+bY4$62.H]8?@";8sA%m.).gDIW"H'Z5da9ru#T86/6AIlFVj[TN&FM?D^0XA+l#%gu&"b`9JU6KR&05>'452pKN9pligB(=-#7`Gn,<_Z1\ZbT(=Sqki2Q-2E1C)oq@<<`tk^f6g;Dglc']M/C0pOir-.$LV<5!?YluU%+4)6f0&@\EW3cW@$XLD0[WqQ$jgNRUqdYQ+kjO9ZhB,rqhScuI\p/]RiNT&'To8Zc(+VmHHb9Vc(UdF*gNF*Lnc$m;KiRH0ki2QG%`HpAk\dnn.Z,HsCdJ(Kn)m"oOSL1pmIr)C+\qaA5To8Zc(2mA2IH]\hZ,Hq5rodgrCO38)]!=B)?V@I&>>.03rQrN`>uS]XX2JK4%omHM6qbn`_J_0]eidJ)NW[f@,le)AEXG,S5Mg5!:(3=goH^\N2[kbenf%(>>dReb2,2W8Qau\,M:4Q2"kWnPWO&>$anP,8=Z'Ik>%;-&nAdpePaj2@"q.*HSh*(p%V(hN*`:/6L?<]I9Y:&Q/b;-(Pj1TOGaPkR>E:P3LIp#nm(]KW<o3st;TQ:5arXL"9*VhRf*"kHi7%-XOF[/ZeOu.p)SPc8mYl-cemqOj;![&#s-12s:0Y@@\/-P"q$[((ijTVZEColR^=8aFjFCXKuLCdE/W<H;:+o*p^J$61eqpB5t0M%a7(-*>nsHnafs(MF?L8UWJPcSmsRc_@\)%3V:/nE7AM`20>E0_QE?5H'%U4AMObCG][r1o_,t?TVZJ@8(U22sh_90[XKt)9f<JFj%E=`F[n9;+^7q\dc_E(?aP(!r-/2eteX&"e!(>$Lo>6'*Yl`;dIIKAac,+T1ohnqKJ-2I;>cH:>1e6$@'a-"]UrXGs8/D'`bYg19W%8c#^;46+JI@%B`^ZVk\eWNa\-ap)"VrZ/)H=J'%ds,!u*#O[Q;M07B1mGr@kB+aC0(WCY*elhA(k&/%MZ-M@1;gf2F.97/dV";^b%>cd2Um.]Z%6XRk`5D)K=lb)+JMe*mW\"\+,elaiFZF@uJ'^L.(Zda/.SOEY)jcKBIelaiF8oH=G("QME^q80^Nkmd"o94Y/l`?1d%q$U<fj%l:G`]C.<9S;X$_!tN>Ys'@A^OpYE%58Zdhn_@3ogq!aag'-#I&?_:mj#*_.e_uB=D,$hbL9pkV<c7<LNQXTpJ6im(@+o:%M4Xk8XE[4Qag'-cHpT+X>?GMaSU>abZgMn;Nl!h-lm;T3elbtrMS!dS_E*TGB2(Vd8?B-aA8rNho<sCi88"`^'sZ$jYB;L'ZSni:%?p+t%=W<cEYau'NXGpu7.*`LaR^H#;dMVcs>dH>g),'N,E6[+8B$E9qmX]01ohOJpi0q&Nc!0WN4qQ>ING@$l$hGFLk+-F!4peAp%)qDU?Ylf!jg8JU?.o1b4ej_MihSOXSY#u^oN(<mN\7TSW1T+ZA`\hPpG[XD4"Lr&\S>l!Qi?N?e;Y9'/W`eQhh*Z/+#N`a>YY>Y2%=ke5V5]@frCR4^:1\TLiT<&^XXITl<Yj0<,d=H)aQF:W5pL1RDD,djXH5^%pcF5MLM/1Z`;akX&!*ligWd+jK,tU(n.hT,Bf#[2E%>tXR5f76W-1[fV&47CnhO`fj<l`lJlm)khVZO?G506VCA?M?jU?($mfFof\_,ahr+P@\oGP"q4oQ._SY[;2U0[f6DbC[Kmg]i"2%%$4NOh\[>e]2qh_:R+^#!:UgO[W,?Jt\IRMi6p9@,d>I:U,9PGOpRk"S"/^C%VUFJ\-o+j+U1Y4L[uU!C7ZjOUEDXM`CVID]O+XG/%9sa0Q<Oeg.Rle;WKA94;<45ESC/cO%;CCliWf8%I1Ct2Y^gYcEk0Q1$;0<[A\t6P>LfTSo.Y5s0Q!Q$VZ5sS:Y3lY_aac_/K_t4t%6DdL/akQ\"MR]HF:rmrFfI[<-jXD>WDC=?_bWr7nX'99]g(S#;%a+)!8#BfCH7Ysic0>V`E\`o)0HtYCA!kccAX1VrGPq)]Gi@[]%;[d`)\>4a#MMO5\25:PA.Rgesc0+u!XQ@iF:2b*bj%[mi#;."q7d5>1BuoX=Y@jK:Y,^(TBA/uPSm=?H$M[4&8@,ab:fnl;5<jF9%ZeT]O#bGm[TVDtIA)?1G(EKXD]F19qWG;mlI:QXPE7Se*eK]&smr7+g@s.Q.SFrVOeb,<$G<"p?r-In\a2!)EkTBX2B>*Nm@nm?W%O,fOe>o`>DB>&,FGS`I2dBIlbXR$KH3&1g/m8A%:aLI&ripH!Y+`Be>7PdhSBAT-X/7t(f\YQH)W;@!tamK(P'N#:JEifq!hMY;t%OUJU7TDu,S8h1n3U<%Pr:<l@Z[Sltq-4-mL+JMVo":6>&k'J2%7c1VnZ^k2&*)gi)J?mQ$H#H=(Q1Td&Yd*1[D0`$ub]K+sY_COK%/cCN=YBA$@<LU/gVX(mfA%ES#V^E\Z@^]4J-SZ2`fh[7+Q;,t`htmUSH+dA;45TjhLcWY"-2;o%l(GZ`Uc)Kn0I&ZmJ"S=)f5r=1%ddC)Xi^>r[&s00JN>enQ:5`keAT;`5%!F.n+,P>P-[8J^S-:H"o!W]#?Z^ttW2HZYq<k_%"[,R0ScH+kNYR:*la*t1_<LY,SO8!9%hQ1tMY[#1i6CP:qP4cRi(=:;&RTn=qM`HMn%!?Q+T@46u*"'eK@chWTHHOIjhKMb(V>#ei@2/_;G,49#S2RR*l[ToHK#T_+PIQh,%$RJhHOK0aVLY_PVcHXA@dSN'-K,sf^Q'_.!>46@:*baZAp+[0aX+%1X*9hVoG+]#2:Bmph@\ImQgS'^@*VNFXr]UN/+*EgZ">TP]%F.%)6=NRn:+f+ruMqp6?qE";[P-;cqWrUdP*E,D!Y>_(:`p.O0>NYl]^7:q_lUY''<5"jfd9/Xg>?RR?rUp<,Vsfr-Z'\igo4_5?%#c.:K<$1WNgo#FO!<tB!q)SbPFTZ;h*W)Vc-b%/VVIP*TgXhRj>R;a%V.G89J+h4_;9/4?SEM5r^=THJUNh_(<_+90boYAEJm\44%a[u)poj75]K'+&l=ImM9,I(',a_C4m)Z\=!G6k7.8co(!N^GIAU;*0*mJY3+9^msTP3tM9;+2/R>\G6A@lF()(A,Ei\>aGu^?iOO%3g#em)YZ^EC1B]%MpoUWJe&O$kriBA(UA,Rr=PJ6=V%gE\^5oo1h^*J:%GaL+JBV).J$u0>jaT?D*MPYWc.&^L(;@OKrmD&H>X7d%>sEKRoVX?<*LcQeM"`i'8J!1IeMTn0[C9g[mn;)/UQ2QSs3<\[n7UngSj)I4c@i:b\$*DFP#-AalbJBrqUXB1OfJ8h?9;p6VmqV(%9Y3IAIe&5>eFT8UW):=HeUP^OMNSn$G"N3FpUY.4MVFkg^[a`M>n'hP_EQ"&C0P.]eJ#Z>DO*r/Mc=NfiN1F<B5L+&:"tAd/$^R@%P)$tfrm=7I^+.CW\49ot*Ik?!p6(J3rZjNZEF?bP@12N@,+Xo3^JZQ,W>$BU)%CndD5R&U4/4;@lO0"X\oQ[;A6OmMEDO?$36#6P%-%d3/7SF=0lYNl?g".R;kMk@c^PhqWB#T/"Mc0,gPm[Tg1?YSM>76Yfh/R>D5\A8_nWE](\Z`b^8,VKslF;^9JPN?V7l)WYq=[XQ%Dc_m,$RLO:B>Ze\>Dg"j]DP$[\sr<seDn(57@!??;6#d$<iP9D=.cKjX"dWQ\6`)eY,[J-F["QZ7bdi3I=0Q@<:e5HU-AN5`%gQK%hH!f2()bG-q*']if%t+`Z#3$IbDYlcK(:5?16ZX9XqhE&lG>FFjrSRSd=/CTGTE/(c`OV7=X61+=c;D.mJ5ATC,SRF%lVV@A'G7Q%kE#$!)KU%8YXS`>[jMZfIe/bC>Xojl-u\/F.i#FH('Gup4iK5Xmh/i;")PR_ZF?KZT.G6uqJsQfZLf/a9j`)i=r2=[`MQR_5=`sX%Q;Z[]/:b7?rh2NZ54"3HK?Jh&!sH(_MZWU@j2uk6UtAWi7Bug:/X:a3Qn0g2Tf2Nm7[G]Z$OjhaaS"CGY419CG9i\L(K0:4a[)$/%1g<7$Au3e!>pR?75Q*E3[a=uijN9bC+.I-ZkSiWI[FZ5'm&E(<Z<(ko]-ZXlF0!0RLi8r%DaLXiSAf@D:-Ga`bBP[PS]^404^j?E%cR6RGZ1FA:OEjFr<0Np(,p6*\J[Qqkn`>qtlMYS*s'0iBF.pnb7l5I]@&%@1h/q].JcYLfiMt(Kc[O`CLH0cb(p2Gk9_aVF7?=?Y%e5W1LVW06*r5#g.2tJuh>rW\!Fj8W\q)lA0WP#-8;PWj).N,uW_6Wjh"j;9(>KL!l2GC[@nJL#f^D3J3CFtP!mr]*E2lL!2Q>'ET%=%ML\?,V(+!/uA@]HR/]\V%H=9Us6#dT_Bc2MoCj6B,q>p1WbH[l,1Yj6&e\<hQNfIb]6BNL1\SU+J%;1bu2Z]U>puhg.g%UR+[3%p%F4=&ipCjqpE3WWr[O*?&ulVI]=?e[=0T="D8tMopYj$V8(kJC[kT0i:V=sg[*CI/&NTgH>mG().t282K.dpdr2mP;rcrk&)G$@%NX=!-7J4TRC$(=bK!.@Cj&L8M;pVg`3>YtKS_^&YA>=g&T?B,a?6s=e\oPECAic]Z-o-)B5KQ@7I1CD'1>UU-,S^S[m?ojI&(?`q%h%H>JnM4\Pe>k[cGdkZ?]lNXGW5l^bNb->0qZSXaED]Jjm_0K*"GALhh7#u_2Y6M]P)T"UrB--42cs4Hdrpip[QIm=Q`HS%J0o`@%f-[p6f%,+joBeEj/5prhUg11]S.tKkocGMF\Mcf^l:et@Ll+pGqigfC_2?H6b+"n`c:^\<?@h27../GIABgS-33UVar=itIQL8KY%R8G2r>[_#)S*:&gO\DZ_#r27'igHrKQd4Z$fWerGYW#<1Qot7\k,H$\F;J\?Bnn`6f'N>$_o34;@3<kXcGc6$]F1"gVuC')_>jeO%&Rh00pAd..j4.0+.s0B!=;ghf?:kC%V%lqMRijeY=YdIH91pc(ie)LVMYco*#CuhM_Vj4u:R1Y^39UHP4OdLh``cTu2OF"k<55K@%"_P9+[C\]q,uo7I2:4PU5-^aR(^$]152ofENU'j3bk:Wqq;^T.eDR`6NVD$nR#m#+``"CAdG04qUSdlYW1G>I[c,PkUW)!;1I!`I%9hpb+<F";0^<c/rgt(1soQ$19$t!'Z9DYp8GFYl64k*a\GtOU#\Xf>o"6&Zpj18+/+T'"a>dcO2$&+N.e14:gQ$fVlNHE77(;ERd%?J*1O>@]t!FW/@f,lkiRU<B^Gqt0j[1l[i+d*UT#;l.q&F/h$%J)IjZR1A*PR<GQ!p+-R=:a/l^VDD#!'fWj\qDd;ZEP=.*d]s1.%a>9=U0$Y;HlN_*NFYTK=eTksb]m*"g"`6qOR0X?5l8Jm@LejWRPi$\o@[kYXN;3;sBo&Fh9'*[3@5GWBKRQUmMYjlA/@%Us3a63Y%j'1Gh@O/?I,^4&N)4NRZU$(`DRXRG]J)VZFPNh<>4EHu1>:Z!2@'DI2]'gk3'm>2$p2G/%Qee$oD\_n!BsCam[k'E?pfd#m&0E),%2:=uR]JaZ1U#sbdpP-#`X>TnSNKe3*-ru)!&aAP*'b<6ZDOKb>m!dpZB56M>2Y"4"G6)??FAl]DP68c)%6M.e3Cd!kO?n3:ek7j`%g"571(N&]O=BkOsNB;V7n!ap7hWLo6j<?Z'1Um(=''"H+prHa5V)_%5B'PKLNKBa'j/sQRcS=]&WI!W:a)7#*D,'f/[[X<ne&O7n%%kmp.9g:`e,rPbRdnJ'SQ(&3i+$rL;<dlfIjEc\U(/&\"@P@+DGA:Z8RY"kJUkdhN%oRa-CT0(AnZ>bH5:@_[Vg2QXZcWL=Wr6-"%8lki8X>n/.'lK+um`V=:Cp>b@aO6&;XY^a*HI8W\UK1([;:8_rH0+CA)6CnqcRnZnjn"=JN6#Rc5%j_5],-m@eQRE]4&4m\%7a$!%#Q!4d^Np/NJ5A\_0Od^g9]QQ[\qQ2u_$[Yh:!TC,,MYnY>dV7]Eo,DgVTU()!bm5_#+N0,7ei1KjQsi0GEj)]7q5XNnX]ks\I)@n%nbtL05VeWF,i=H-,,:TAIr1IpGq/GrFIBqb/+LVhYYHBhItc5"i?_rHb$7Wd98Fk^)a6fNBg4M<5=S/5o,5W^%><A-gb.KnqZlA<%f/p.2dlg8cXtPNG\l4W/5/dcoii_t*aE+?-^!u-5-4"P=]Z[\<h&]JP!t1VA0eleHI9B%61JaVq0<3rW?!<U^.V3'RRl<q8n]0KP%Q.aHfLu4_h@m^t(c.p+4S"/Rhlc-49?Ig_!a%YXNogb;,Pt0>ZRt;[;7)6rUlcD%J9pfNdr[hZsk?M<I?Q;GW/F5\i-sYfpH+(N%%:r2="R"/\fn6C^^_*qTWD-n3_iIsKT9Keo,lH,[t@#@<i@:fD-?O9..p\(o!`%=LA:>Z[EQks+__URD.1p.Ig&,%TY/s\XB53'pT%6Qks>oJ3f^`#ZUVn*l#?Bc,##q/Cu^Q0XX)@C?K)nL2jMDco$&>uAF]+b?4ZH'*-(YL#[`7)!5Sb]_k']k@3rebLpQ\9T-ic)In%%E[N`W]t[?m"e$n&p1d&ohR)q\H]QfX5R&MJ7S8)P.<oXkablSUAR$Q`$Vf4R34[<PP-N,FY\*.m>7F8T09rTj^PF\Z.]ff+k1I?o%4sN`qZMH8BVFmhLPr5K-Ei"ZO.6T0)VGF"OSmd>+\geH15FcAVQ+eX;d2LP$XkS]43$8tMcWtjW0>NQ!UK1!RSe$BKC]e`PcSTj_%9^O++Q$eM76qTU==0-@N5Z_:;grOE?"N`9,`:qL(jd!B8Ump`q^Unq^G"+$f)JTG'<#>Km.",VG?QZI*j'`&$:Sl'p\I0[i+0$-S%"Vf7X^GF-WWf_9PrTAd,X<Xe:A4E+@Y)l`C]&CLDH:fCc[nK,Q9;0End.3@B?9:;bZ+04lM]r#+D&aWAM&D\D5I;^C]!dN^$XP0b%"s0-EVOO?,UHLS.caTuJ:4r/Y^Wt3T%tS9X@2)F!(?`Tr@N@NXCGViQD2GV0Zf#*_m[th@O354!h0bm>E<L8T`Y7-eFh@F$ql82q%fqmPs)Q[QB9d6Xl=6SnThO[W5X2g/s:Ed2;k\JKaoZ6m/f[E:3F2&Tbh9%a)Sib8Tq.QuBP<cjJgDtUZPE/g?i[f.0?EdFpfMlm8%@R`X,o5-pRU_&R\5)N^-)s;k"RsDcZ@m=J0!,ILIlku."2@!$7Mg4^(foH.;:S2_&SX)k8qVD28ZVOJ-kmd:Cemma$7J^ejcQi01%&"uXmKt@.!7FNuLk=_:*A,?.ehiXnhEY-sW;%N6C30i]sn=16F7A>jn_'AjI4sPA0p-=V,U%OWL"bg3,1`-&.TPtGeMO3ID+"1C;%]d!?*S<afbl(`lA=m@J#GsZN;j-n)m_S&p1EE+</iP7sZNf#XDFrP:,CI"i79/)h?%#Q<MWs\,[-!r9/,#N]M1k'nh,f."W5npce%C*_nUVO8g,6k\bmQFt$(mJPI]Jhq/=Qm@<,0;8q%a^EXf'QV=GL[K$<DefcPDbu$gWCk\:m88d;DO3+MUW?\0&rMkG+mM=Un0sf@%7'1?Up6R/'Tefg46mZ<;W<StuM+:!t&iO?q3ckS,9H!bc.c>KOUdTKHQ`&f+8.mj3&"Ropb0iQgnrum)n$GYQHAooY,h_3m=dnS'%$8JM<hl<q'IF!57g1qd``t\*bfQX0;Kqh`HRcubK#B7bgR4_7W!u)/,V-u<V/i!/cB5a:I-!qdBC4(!N/uRgu7UobudMgT,4^91k%D,f6icfHM6GaNUf)MR4$UV?Bi3orURf_H[(=M$0T2Wc"babjL.^F^t'Kk`-Jg!+9h`G/DT%j$.q7W%P!Vg!U^9:,0m-2Sp'OZt,O%NM\!>>Is<nRP+=nH+YEg1jXN&(Wc<%8mr2&(PGC-;Y&4:'rpt667!9oKCr<!$A/8/-rPqcI&Kk-UCB!TRj'0B0iapY$b5jjGH1KZ%NW(AtQL*4,8PelJP!Ak(;AZ?%WrBGn:ru*4O1q>bp!nb2Og5c[KZ^dtb!\icq?I@-&lq7QC3o/t8@!tH_>(#<<Vj-#Td3UCZe@u/%PXMI_:24N.`l$94a9R$9`V6otnRIkr_<4nL<*3k5$<=m:.9&0m80NJA'<9BEQDR:N[5F5XSs#-5?:"gN4Q]Xt8g[H?pUZE_g*'EF%H4!eckHic_C,\rN%')gEC@:RcnS>PI7tp]"%l&S1N8J7Y<ski-*G#0C14EH&Y:<NNZfpUZY>B(+(5J;BD5$O3cLP:=Uh"l[=gXM-%W8)g7UKD@koqSD`67ChTS,2/6okN/LmRatC40s\A\#E@BemYq<e:Z@]lKt5$$S&BV66s;&'^06,J'(q0<YVD0^$6;Ve^gbYhiAHu%!0+B9XMHA\!T2V,3<aF4\,#o(7o4aa^imAo3X)h\fV/9d)ZAPqgd<8CQ2#h9P0=m2':N[Xkf\sn+B6DYIq81I(f\jS>#j";*I@Aq%rst+g`nPg86Bt2+q0m&>b&kJ4Qdg_(E>.uF/3:5irBHD)?P"]T8-oP-M,<k&r4fptMTsQC/`/F>.Ml3tT<Ar^.]']N5su(R`I9\C%^`nKp^*lsOZ`pJ0V`RdVdSlY]+/5ag;g&+9(8o#!gg6+Xlfpc/W%JhF<:!i_HcI[ekj\V^dFZ`E3'ZNX3hsm%VH(e5H2ikm+-W8T%fL+BaJ[68)^:%[AN8KY!OAXZgo'rZ'R)<%bS5:q%PhS[N^=[CB8Fe7^D_SlD_TA_@^&5[R0$\o:ITu"jfrGoE3Ck1r^\MG1m5[@m%GB%E)jaGBYf1C6P/Cr>3Yn:EnoX_Gm(>EgqRc>\j>>3$EKb]pT[pE4#$VP]+E^dtYP2sU1AY_rEB'qanM/TUj2BtFlK,($>;!gMT%_X(q,E=R>c5'R1W2=,IpP4<hIMgGe<5Ef.ldt6JX-eB\Hp>fL>24e-aTW2W,cAE%-7R&VCW^NJ5;Lt+nD'P\H1I-^7h%eF<=%];8%M7!!eru43.$CLU%n^_j+-0mO_=<u"MA-U,0+r[S:'9Qb@GlmC#A6;B2.HJA0Bo@>5*^4")ZFS_2]nn2I3$X$u7SSBCnm.c-.ZQ@B%;+AK"]TULmLXc0[alelNP'#<,Y<GS?Su4eXil8Rt6CmJ3E=n$%+K=EZo_lcU:jC9SR>tjC&=U)Geo(uf.3+LVD.t@>I&PHB'LQ(m%$<*_s-P)AmpB<r#JS#h`^bbr=9*Ao(,#PAtYo024;OTg^Bo\AUPinN/Q5kQjLt]4)d\4NnFsb=d&^mTY`ArDu,o:@j!f9:X9)23D%#\7a+>U%ZCIR]Yto`=>Ipm/Jh>b89'RHqkI7=)YB]X.GO.Gid9Ie:4or6G2PKLZho(atV`pH[cPE7q2_/B+q_a?e),ocW.t^6P4G%D[`RK4Lb-NgZKjZd6"Bbq6Ar\I/_gYL//DCkL7.d;q$"V_^\*RJk:rLDMN7%D"hb6H7X4qHnOi0"0su`]!q9l7di;]p*s]JA?p<P%nWNTQ=)K^TQK4B>/:/J#&c7,Kg2Rl`Zcs,GP)'q;T&E?tH8`Mj,9KCrNo`'4h[sFc.gsS5A89I/^SNtIHP$5pBM*PVkH]1q,bNoE%b\Qt(aecq&?5FGFJ`_=4RW1f*XY1QiWb6S!+mjXj_`Cc@I(F(cq`U+ta!Z"$Ok2q^Tls?=db'[VSZh8JqWs.d'_Nj);)2Ha'p/\@%c@`1W)=mX0NRu5O$4RRr71)3<>Go6e:G9iBr52:8lTiud-L2=?Od+'OaIL5+K=n33f,CrR=)RF.!UKC64P$A[l0!M1*3hnb\Sh[d%]1^-k2ebI*Q*$t(6#3(l3r,SHnUc\*"sM;QW[2"b4D&rmgV1kc%2`u5VG^iJS%=(U(,p4=gl4DIlYH'+\0`RK@ocK7QIV)]>s=ZT%52Wk@p^)/>JbZ%()L6*s52#T\N];c<(.M@e.hJ]t&kTPI6XRpdn'PDq2GC#M&;K&Wf-cuP-X!bD_\t,'0\8M7ZtIkl<hi3K77HL4%dr&lS\bl7m.GY`"0:OStIq\lGltIDT5R+-U)L'd`j@n3`8<UFe\LlYSn#El2m/f$QcY(ApCiUop.E#B7B0q4+KUhZ<HYKesd=A*$%OG0c?pl+._#_:_La>dKX+Lbthr/<H-c?499*)9n!n1OrnI>)]e53Ig9T!<&Oi6ae'D9A8jAF1ULr-tq,!j5)>1Gfoo"Y<G*B6h(K%$VnQ,bk)UFHYK^A=6YhHI7OUT^&dr;-su5pZB8*iU=dYI`ELJJ"lo?6N8M^JRQ/UYUoHaj?:KW]0dcr!POgN32[>kL-76*C#IbSk%139&dHM9L8l=M'V?3/[-C;'nmU4^t9E/*$6>[r!\W8hioI=Bj>Sriaujbbd*SmcKt->B/@B?WZe<L?')i+;%,2"(\VU^Brpcl&V`%r^a@m"bjj0SM]f4^3)5KCU]9:,EX5ZM8lbS`uoa'0h,0qD,Q>CaI0_jl)0`d/<BWFqaYEe=/qNsk-^i-&18mrFS3N)c5XYp]3ITp%]lO::;c]cWqXc!AK<3>uo%rrs<VGPG#3dN,P`:F'Og"E5?2#^H9RC-q^9cu]VI(bZDGJHnoKLm1Cif8,`pa\_9t6WbIu[E=R-usn%1E+sFf?iFrH#j.G0*La[%("11Gp?p[nu8E+;_jYq(U;ujk0C\ZE"4@aJNAWJ_-;3GP>b+d4Ia.#bU0funQTWY@]\Wk1OK)W8sQIq%m%Hq;r^G+nZj@2hbo<5iG9eDTp:iP@:c')0#E;T11lQm/T%;rYic-[m%&ZRm+`?erH*?sfg7>L,?E_fSHc=2ilUc$+1<,7o\t%(/%,=jV4B&0'+M3AHTB?@!`AnDCZSN_f;9RW!iE4GCG0-K1":uaDiGr8^/@cjDJ:j`QL.2tEe&!gGX_40"440F%A;kNe1RWctY8*2+7%Y'G'[COscb'(Dd]5V;5'>qI3KpkD>"GkblB!ThC?6WT:qh-6\:gtgl$JD3q]4K[*,==o0T4i7p]>cEt=391U1gR0/GQ%_%h3Z!`X%R=sVd/bSqt.u+L(jN/bh*LD_V:&K'io-,h48<lDhJ+/gPJP="&&`elt^]s<A;JnhPoGWk?X"fq.3g4GlT5('TFOpp`\P7C9h)H@]%N/F$iV#M\=H8iN'r2dRVhO.bofD!2')QP@@JBZsT@3IQ*_3t!rDj>ulE8Q=c\UpUKQfHW5:N1]`@)d.B=amo;Uu^"H1M/=6(iC3o%$jb91143ctDS#:NGu3`!ea7#YK%"iAqPsn.M0Rr[c8G3V^/)J2LufCWpNWksI_jTh,dg;9@,lsIHA@u/`6r&_BE'd:\MSkpp7ERd%&!\<3r0dTMJ)W__h`i"Xg?XrYO5s\)@%1fn]:\8m9IF?]VX?[L"#67?r:[)ng$@fWA//lS[4nmU:NMjeJn[o8O@Re-Dk^jbI!=sK%H.M?'8j2ta6U?5S,1iK-c$hM9DbAAJ8c2R^oH3jYA0Vk2,3)c(5tq;@j0/:G&9n:tZ[+4>34@-\<[cr?6bR=,VW<ge;<M*U)p<dL%Na`-)c:5Z%[TmW)eCg1\D[I_MI8Lj[#A&E^Y)6np4AFd"XdC5hlVrZMTiT8,_@[QhgocUBd^dARe9(0X[Y^O+1V3dm'o7A#`31.U%f^9Ok6u"XRUG)?:AV(^1!;m]ege1X-],k=i/q#(oF!:A)L"B0?8a)q;$[[uI+Nk1R9\+---9mo#Uab1CTc5i_@=62f9t^(b"qt5f%Z.M]2AgcpVi\(?rHOX>j8PH^@,Q)VK^i\E(i5a1g=\]d)+GJ*64^r@UQ^oai-<jJ42$)bN!@Yf(?Ua7LNc\TC@QZ%sMO[;9T8^P6%[l=kOq1?11e/\`uj>GB`X\Zf!8;r4HE0.>mWrn*ap2;m`PII6PM1(-<_0J*W=JnbqfLtB<E_/27_]4L`/RI_]F'g!)[T2<<[!oT6%,<=Gkchn5-;2OD3.p\;<-9&%Dnq?@X]ZnP^i]%1?ge9t#<f*l6>gdsEQPV/g*/R.K^\!%@EDQ)M+(^G+ES51%P`9uBDS'j_6'5j[%9p98*NKg0"/=X<9<Uc.epC)eI/qS9k?Cm)QAueEEF"Ya,LbpWMcKd><!qYp3agXTqBICUDinNjIVE+*o,<K]Ons//NdE<)/0TPmb%Y&T0Z=8]Ju:p.*_^&(>1hE?dWH4<j"S[Xk&O7Hk2!=mA6Q-F`l]e[Xa#[)UMjm;p3.YQU?Sf*oALM#B6'41:KkB^O]')-^0oYBR?%%S%VC,Wm']R3kJT%kd,9lSspP5H1;=f>UJCY:-um#rDOhZPrk/M/6pU*+Y?iKqOWT)DP>M4nsmmABIp?40n&CG6KP/*C_uXr+WAe%g%(WK.N,Ocajig,lI(WU:Ed&%aRdGrKtFP:F),StAGg`s.X<m<KeLao`P\68+=--do$UmNXcfsNo,!:]W)(!@=ak%V\>"<+MSX&=%Cp7]=oBX##E`PC[-Kk>#c")<K[1O[\@i['$Znc97g(P3bI5nqq\Yc3IPG@/u_Q%u[2:N?C>mTD</(>:9>nlr1>,WrX6Se@NTro6r%_KOXOKt:`dM`CEGTro6r)Q^[ilAC-Fes=&blAC.qoT5;9LUprfMama1:j;Y2:m*4U-9X^(S#p@FJ9]L]Z#hVoN^WW"MbbWX`iTOk%oAu-j;FeuR\.\cb(u2aT=UbUMj?R5fqt?-N:9B.R0T5in2-=2rc!ITALtlmd*n"P2R?-89FJ<ZkhGrN'$*f7B^BCmpM%kV+@r5&?%I4*D3;fW;L_5[far47/k?7MZ_`LcpBdCN\sVk>V5?X5b@M6FWt>s/YHMmAplCd@Ct?`hk9Zo4_dbbmGiV[Yc)Yqm3\r_<(p.AY!F%(e4g)'o'>/0"u7m:'ZV;,iH`qn0>bK)@3?@HJFQ;k9/-oO+'P9F",m@H45=o90gc-n>_%Ppc(_!`Dqq4hFeECiaG-'[,g21`@n#8%f26uXb>+Y^[1,opgQ#(Je4pj49l;#-TLBR?a#c+:TRLjsnQn40S#Q!/=YN>n<afijd_m+OP#/g+#>qH&F2\/dr_$CRBp#4Y"IGYc%lj&UtKk77r`Va&:hW:.`TDWV;Da]/PN"S]k,5=`NZF?!pe`;QMTno<Hd#up+8HLY0C>NZgKNjR*[kpr?LS=g3[T#fReVse"IJ7P=%dc$E6VPd2E'd9I)ftS&,qRMs7gCIas59+.4KsLNP+Jpl_F8m4QSIj7;d=CV\-H$T:4]nYqDT@;>e*\qNQG3PWQ">Tk4f)(D%/,7>%IO(nfZb]EG0eHG()A(A)c3@@(R!pq(o^J*8.Cg]Gki!hqZbcYrLhYT.3#H,)U8O#6o\l\"?5s&%e^d\]KM&DF,S8GMDacFJB=f?O%20V#/"2emn^HEa;#C9>L0caMGIKa1'MU_W\$I)7*K^(gYl'D.o#r*G[e01\^F#KB5dT#n=)T#*DrGd6gRb;URX'0G?<NGBaEEZ@j%*C`+]4a8!%rk0OG%+YNYJ2dAaf'r^"KU<e`grBuTYGGQic%2cY)uq]V_#KSuo7#fV)B*Bk22LL2d=;Q8;cPZIM`oSi1K].m>dUp7%hZtt8qR)Th_pO!,M]_s]`3_[HW;;#D(rZ&>h>d?W+f61WhdJ$r1.aYp;l);d5PR3<*FcT);Y;D12Oh;J9;I&LC(SijqKMj%r=DoK%$2DfQ4akDR/:DKX7G#575Q9S6NUC)QAGl0"-.B,P3(+Q.gYl*nG]a/B!JZ8'JjI8QTD]@<UHNlCU[SHK/^T\t/TKUDWLMWKIjRCk%<kgJ6dU-oA1"1-TOfi+'iQX$sLN3<8\21CJ@r_Q,e$"uYn+QEPT(CYG`M\fMd,03Oa_dpJR@E3k9)';:i/R3),%Iqb0;8s0ItZ(f%D_r@MMBE[S?5PtOZLn`[GJgUa8Q*%DgemV:lNQlH&=E[0L>TY,*<e.l&MbLipgYA,GWn)6fmuPsiQuh;82oC*ac_($QCW5\nVj\Z%8]ASp.^=%$gRBIp+F3'pkp^5U^4s@+o^hn/%3"["U[1u+G]:UG?(=X4j]cVuR\o7Q5&%\mj[XXi9i>%#M4];(@"dJYVM?6fT9./5%LEnUdOIpNLqFk1(\?)&XEbSs"^F_[[0B!`I<GV1Sr$s$gb<TfaO_'f^6*Z4;9nRdMV3hEkW.Tj#]XNpCJ_)m5EVON875D:W!SGmA%*RU;3Au;U8c/ZZ-i6I41J;%'e5b^[m=ek?#CK&M%[tf=<:#I'e\^ibQL@2UY^g?kTHt$Cr?r)REk=)(qB&L'#B6Ah+c:F83!6UXe%cY=-)Eh=dOGM`/i!*Q(%6<2n79pZo_C4]D`OW?c7Bb[>f#Qf#kmhFY-no-GMHUJ9COs%Xe+$Xb&J1Oh=ksKe=VC(]B\?Y.k<P1`s%beR(h.5Z@9l.e*H%"%CF&A.il,d6g5/BnIWoi;F59JUL]7\dY6>i^7lqY_Rcc-i.K#MpNm+9PY2?`\n67cN`l';s)IhEBkhrT%o%%&P4Hch;1=Cj,*GD,E4MZ+p&H;OG;X&R/?:P1-M3-*JR=*+<Lmk!a*sWV2*5EYAf0.<M#[+]FKtJ-QP@-NT,n7BsX^T1j&=/GeaQr%YEo_:@ajYJ/Fg:;\.E3;g[I#S4%%ph,/QpugtP\FG,4mW+d+\JI"c[`*#p,]?Y]XCHa>tM45H/(OXe+m"JZu9':,0"O'h0+]?N1N%YP@1*!#\fg+#'^/aHpn@>7!i/8l(,LOPGJ'g&`>b2f:FB@O2/iS+00h9pki_jTj"(*O>.#j9=L]T3eb1IUo"^neYH1SMSO,pCL=Z%[W<c?HJ_)C7,-M/]AUXOZVDj"N(iSjqmq6dhU)0[5rOX;jX,s)87hB:/`H]_:p)He=[KY+cl>NA8t;e#=!%aJL=oOuj)i$W*i6SP%PG-tYQSS<kXh-I5U?#d>0,[%8Eq`b3O+(eup+&57/Eij9g7eJf%YOF20C@,8AI%S8T&QReg99iC%<IDnG%eXr_]U5!*r"(mm8nJH%b@s`AdLPYGFs'@?a\+_&?eGJ#A=VYU*BRW]Z2EJu6QF3OhWo#jVHkWMdU9JW/*5W&%I]V*#Fh^L?oYi8rTPmB?6f8AU&XU"NZ,UF%Ls["IU+\gBHIk(-E*8sfDS2GWXA'5==>@_=C,h]k(4V8t\5^)THd4FeR$!VMU9\d6%8fJM;/(-q%f"6pU9J@)N&:C1rPu-3^E*gu%fD*EPEJ1!SJ'aNdoZ&o%oH.SYG].tF:rY+MpLFO5^$_gPj>VCu<7FY<_d;@+?OT@O+']5L^EPrg>RC[%!OrhaqkAO[`CI'6glXiI%A5)#2"!LP_omb_BQX*=SloOJ>l5aV+J0^dS`][cZQRT^86./#OUlj"P[:fZ?8>CI8rUu8Zf%q!#lhlB)f3*UaQ]Z:@pWL$.7eun5%?trIPpcN*gXQs)>9)9!ehe#[`Gl.>'BXGd7o=$X4q?j1QLQ@a>X//LgV3Ws+dUrISPE4ii$+=cuS9T.*c_F&j4OH+;^U6tGTO-d=%U]"Chh8-MgMY\oaC!aq201pZ,NMiWRm3O/tY=:,Fr"/Y1*2g*9rH$XUXNh]VB?gDS;XF,dS9nLjr:^U>q]f%i_^f.]T@(B<R/u]Y%f__t:qX*O"MmBTM(Pe:SiHn=Mp31.8)'@AOpm0+[4[Mq[>a,]_$p5ba>I2gBDXIBt#0g/Q./R8.V[+3IA:2<"kKF.=rH[2c$U3JA%oGmMDT5XDU`s/0Jp/u02i83t>8XJ`&>2,\&9E+YGe,m!)SbJr3aDkIfheIIXr3`'hGKfj54m<EQ3UHM6r\r%SJG2_+pfcX?pRLt^%qD2JOPP[Q#RYriWSmE?6[tW\s(r#k#OLu)lY&W&OP4NGWh;)Ic1sQWJL3b9p*gI-/Oo#&'J:@8W!f04TkHAOm4EZfcS!lpLmn8c:%a7S0DQQWDY21$=re,K8&m'>Q#T([:H_sUL[,QsaI_7\*^^lnEG!,Z/`VD7eHm:kI_<W'Gs<TTGA:$FA^20.-TejO'BPqGF#bq"^H%j?5#?1s]nQ1bXk]X7F+!XZU;)WhT`D[m*'-*]b$Wd['SMR.W9!<:uEt%G!OUI]IPO2RJO"M!q;;r;<[];2mu14p^*u"B,5i:R7t5%gT-sH2PSjO"N^2,-4XAmcgK'1l_W^U5?IOjRQZ6Fd<eYmD=QRZh<0toGQW1_=t*/+k9"]9+(,$!QbWR+^Adf_I/S!`FgJK\^UU^b%"=!Ao?qOqALr99LGif:`H@W;uFXY+5beD*2K?jtQT#]R*FhWXul)rX!osm=Z`g]G60^no8V@`jA1h)*NV!18kP=Y&lXF5:;Ok=`s%a[lWDH38M:f:,10I<8Oo:*TBq!G\A>V\*32TCk,QY]-W)F;e$M0jY=UDF>C_Tg0h(\9.O2\9MdF2h;jBC!LWCk@r#;qsNema^pG3%m?rpXGg_OYmooiA&=q+-os$_Ba*6s."Rn1c$_FQcUbAoih,'Yb^"9'49D$iiD.lkF*`mS^Y34<l40cWP[)Tgiq^@P^KO)P_.(tDl%hd:s7g;e-p,_243ikP6%hHY(#Zde&+R:d4tWQU>S:NG=odBi]H^c*sskB5e=i@t7@D3NV`k52qQ&C`Gl#<m\46c.mX^c*6mdGr[A%\a7MFiW="2D5R?f6LXXph;#=[c[K9If=#O)o1?\;q$iXd]fa=XSIIT7jZqeG?Z8r(ViiPON/V.Oi32ka+PJiB*bI`AZYZU++/'R)%PWp1?o_C+)>GN_,qZ0PPe=LBF!0WZ)eH@_#\7\'=>33/)?l%'\o<i6.h>7>Yf9Ut/F,@;9Bs)#8)RkC?#GS`UD6CJmZNK0%pPl<H%2%HObbT;9$*:EFLGW3M3!k,jR;`;B/[MeeX\f//2B49(C]rQ@[F'RgJmI+p4iXkh-M9'INS_/TOi$9bAPXD;65eY7lb0m:R\9O8D%H"47(&<RH.BF3C]$CK7*:Cg%!6[L"ucS#$g)@%UPdYPY]M7LCn7H*]T5M5pj_aEji*aTMHjRAtWFGFqn"[3nYDM7Pr]3U1nSio4f%2'2J/I,eWGi&OMeT?"j`?S_!+q!m,Q8c-TK6[XQCE7c=MN79(3+CIC:X)g^rE7h@UF/KhZF4g;1bO]l/+o"=c39qcnVoQ+R-pN/(%Cl-3hcIR;(l[TUmcJ:0>O'U)<Z"(tX@gKFD!,1[*1E;Sdh6S0,bIRf>eG-c:d-NiX5hkad%hH2-FZ@A=rkMC@:5:9^o5H9sSq0*p%@Ip_k.$bdlqtMC=(#nTZs%NY=^1QaWZHrLc@:>!0NG9>s-@Z1sCG#7&Aa?c:_@Q&lps(6c5,rAW\]B-&2Y@P`m[h^)Ok/'(!<UE_%oj#V[>?`6i^V@88Z,)T7-*S3cG_'ST95iZpSPijZk+FXtXdYurou"a-DaJ"r/IprU5$M<bL6S*N,WE5u1]oZW/f[qb2+;^hLPBnd%qiU>pZjmsGn:mGm]`[O&/l'a/HW&0_FIoPXYK]G].aL7AUIBJ5Ub/Re\3q'.PBLl2D(Il](#8e_BO&19O7MFNF`$G3q*i^)M:nNW%b);u_E'd2#F<<[LNUOZ["qhV^@TjSn:WbKYNdJck;m2F[FuG6F5km4(b)S7A"KgZ1b\"2NR7F)?\o@UteNr3&Q,f.q6!j^%^S-)!%>X<9Y',l4_V4cEp)de26).l3?AMh,3C[F,nJ\CO_Nk,bR)"eR;JGeX$Ve\=4XCbYcaf#b3QC/NO;[9#IggldU+s#BFa_pjRS%.j*%Rl&B+-`CN(8(eMPWGW_mKh%nG>Q+<Yg<=i,9t4B9EJnJ)m/'3XrBT#1X_;o;<,12hgfH`#30Cn<cgXeADUO,,60bHf4np7P7WuV6%L8PF<!_qnGhnMQ5af;Y50&s9`_kB2FRdW!.)lH!sa+.l^,fG63A,El=CPHsLT()^ETrIDVfNtD&p7&a;9-kP2P]bpR5_Piu&$$"@%0J.p=ITk./I<7Jeo*DEgTq4gYEq!+t0G@A=$*H]TN'5DXGA+0aI.i2#l2(7^.HZou#US1tpOqqp>j.<Xk3&'2:0=T%ru-?'_Xt7M%L6p3!RG_u?_rN_pRsT'.]DZ;Vi<]GfDS\?fe(!+sen%/U9*Z%a)e;T(Z2_24@k/sIE5F%WT%CMn(K>[>96SeHL>&B]3Qgr1c>J^:%[3q"[g`@Or@!*N9mTVXqK_*n^O)+V"\,,s/F#<itYOf?ejXk?@\/l&&#OV^<IFf5p+GTEHb[IC=OnNqrc>UcuG%Li]R[`<%g&hV<%OS^_FjTK7hNGbi!Ca-^_0+p)I6D#>7dZ"\&<F1PKmmAhgT\%JQ^;8(<%@gXQiODU+blD!7@f_S*_`t`6GEI&8-L!=/URe`*-L4QH%gt37UO$=7k+R/7AAsQ68CcDs?^.d2Vnh?7CGN<7d<KB`:fQ?6@=Sj(7eq)hE+Ta8%[ODAnJ+T$Fb<Fj(**,X1"[X/H4DZ60-@&9]%o'TQRp7XBGMUi/m>ar;,V/.mS,5[*YQ%l;hD&-/;a7m3LNH[RJXfsNO%\gWiYk.<2pY5!HO4n4bLAQPVf%mPkpF>M?XhcthBKs)Z%OWk4(&")+VagQW+YiMVjo@;Ac8+u?P*+QRuO==ZAI.B&$g:!UQ'jDnq96-/_]>`<S(LRnpr#BO_,,gt66c/Z(Yp%]r#.MrWUnI-;%osDZ>mb^]:GiX&Ld]4o:OCFNK3g(B8pNM5"m5qlIq(a;,"hoD9p<,AE1BD3*n::531?N0[:<A%ZE5cf17c%\TJ_\'k2`5hjc%^d4%Bufq)Pt?/+A6C#O0UqrR5r8V?%+&$I*cBWLV?t4og5KRtI1Td4`ABX#oHZ1bB=b^>3oH1B3;\&0F#lK-kV1B$98em,M*.C8`$t4\%\:4sp6@5=m!hPoJ4oXBFnd`Q;RALquA8hd`28?W:I8c_UDtE#EPVF1aJnDtn2aWN?ao1LpjM_Gck^hq\rYi`=dT^rFNqSd7kY)II%<WnK^OcT5Ooep%V=?52;8$Y34n&5]=+J;WagX$=Ib>lsNcL8hMe3*i_guh=#"h8hkZp+V47FO*M!+#J3!09G.@RkpYD`IUgSOq2_%mu3;/F2.$C!Uf[eCVa;SUVP[8F9UeZH;J#;p&kOGJo:19:EL%#-f_2RLk;hg"hpiLT!Q"3JG,5DWS]$?*nlaOJVT$Xl-\el4^<Un%]n"r-#YuP+%,S:dr#$9I5^n&p>eL4'9s3!Xb/I,*fF?];=lZ(gj%]!Uh4/@Fm<&Waml$RA?(4O'Y"^6npOrA^mQ!HeM<Fi]ptgr#%?2+&_muOsEXOFkBB//kG4c:@t16HStS'2t91K(bX#KqGh/:S7*<Vi0']`<@"j"4Z1'1@2EGM!;>1l]PD*uA<hZ6('Imi8#"cY"r`%Ar8.W?3$fOgU)[J!0Y%VKY:'^8%0MJYSVgFkaYb=/Nb"oXbFI4]c)bs#[o@dCFuDE1@0_AC,*_>X,<B!\*2W)9@1/TT7./p!@[dA%:'H`i(bG%866Y\AJDj%*n/P$4GP6)'Z_2&dqB!b=?`D;2j;,Z6Xk\q(C$SH^B7D_LeNK$8g@7=gH[5>^>`ACZfnYKc2sOst8BL6>%.h]\A^r#,u^[ARI,q?LephAbKgiT0kfr"+>(YWqJ0_a2u)Y]UeFFT8N;E8dj4m<:YLmo%%_&'rb-$XgV:Yp0LDdfHY?(&./TJ9)E%^6XD\eX*gT%p%HoI)PO1d$D'`CZK8H2b5)I*._.5gql@f:uJJm]Kn1eoUm!E`tV&X!FNEYIU</rYI4;B"C%o6`Y[JSg6<YnB3>MB%N[]Xp9En$>"">o)lHQ*NW3cYA7MehT$c#Ypg#m(C!L/>+X2VaPH<M11.2MY5/$*/#o<Sr9J1^3$]+]0;J4Auj&A7IZO@&St[[!t9%eb'f-bbK@G-,<DPJ!-*'.$YYE11>KrmK980%]Hj<'FC/C0]=_h^.]Agjton9@&k-P7U,(E@,pbbq9S^cdJ%8W&4@F'=,Kj2F!&Sq%HlV#D%PhdX_"mdrlj$d0;&"(A/aU]r^8s0*=X;N]KMX=&.MPFPTOdQ#[=;`5R&7-_LmO`@f)CM'MV4F*<7D)6@V%LR_"n>XBY[Z:%[dI2lk[oJp%r@X<HlgWjP$=`t^E^+H-VhbW0+l,S:LM$?gtGcJHAD6(ah#aB4V>3dca'Oo<",jbNt1Eg+r-)&)+IB"Zg-k[^Ys`f%EDa==3!3EjQ*qYmQI2Rt"pc?eD@m"Sf)$OBn8X(NI!d#aYXEjhcBsY<K3PRt)Pbt2p#2/0+U`eg,I'..m55BBHS`^k;Y[3tdqA5K%I-!P^)m&/rSL-5)#bKB#j0b`Q_>>(eb^rZ\].anuV@.0E4<V>6qH@E[CE0#X1[_!GGIIR;fu@f/!KQpBoD:DhNlXZe,^o\*0PKI0%fC36TLEH,^V;oK/iPSA-K`?<jba8PbK_$ouT<T:J5<J1QPJDV[<n*7q9@^[ZPP-61lq=QKKN!#J5_I"Fn5uS5:(=mYmsInX4n343%q8f-ZLmFV5[=7`J6-S,jm&k4P'-.-6FBerLj%dsm-:QlrD$pA>lj5kB)brF>Rh3ZVFNA8q=K+?JOk@g1=sf*qa5H`[+>[Ssb-["c%N^u?cC_o1*#RWOrLZ+j=/W6K>)@54G-"0nHeLj%B50X74Ke*K+D.=Yk>]^@;J>g2)JsG7'9('Zs<"9]A@'.!:D,J.O\;?]W>m=/3%$,MS<((#1m1"*G]Jl(%r:.jnhC#G$gq;+.W:B/?Vcu`+\^\ub;CO\U=b:JVaT703;G'_e5(P:n7lpZ8pi@!8EeGf)K;@l9s:%7kB%>F=mYkdG\UiD*9%lEKMi;R%@RdR`iJIL\)#P@X1lg[a#]NqQ]LD_2+E+-X(\k.90O-uO&t[TN$Nn[?715QNH'Qm-BY!MnY]O3aj)%`+W+<*+:$kk#SW*/X;^mrhh1[\@&!,4[K)T7s6&MAj1-kl@OH?@XELX^3Vg:1$2Wo3p3u8V`Xg8,D&nY5ZJB[\9XR.+e\i+IX_=f%+24PSs8*W1U?F*[9nG[u6MiOr)Qc^t.&LuMG]p<dm\bb_X)"3:R"GN,Ye<b^pBo1cNqVaDk19uTVraS`iuiI,kp?M(ReFfE5b^e`%)V_\"8N.kXGJXuN'/=`J<n1(QA06*lB^qa*&.qOpcY(s:iJO$Wd;oq]1)IC#K<p*MDRT'T%KYbK6L:3_2reT(k*/VIJNW>Pk-eIS%HsFg1p,@;uZ/3tc301`(KtG!oVnPiL_,#`d1W/ITc,;77mGED=p."M!1)kU%Id^W18\[[;4)#5rViHGaN._;&7r7@;&<e)(Eg\(c%'5S^aDQ[o03G0#+c-<rLC)?ele5c,#r>(j@SDZ.MDhJY&2*3$mO9f[(2.o^XP!?\mA=Sh8SWY7+]Gp:m?;b(X-804($r:eMC7gpO%7W'(kH^$a5puZ-8AuWoBJqkEZa_>Od\-QJcZQDhC3"R+>GhMgE&O^k@eP]j7X8?=[)%+Q>+FXZd!%"^$aG,%37fX:o7-DoRCnFi^%&)88[r7m-#$,DQ_*1%RobY*&>5AfX^kZu0i\.fMXo<)VL#,peLP*CBDi-nbU=kRO86Y]Ycf'u+sj`?CEVS&J/_LK?s`@1F0l*A7g%5fD.uV-[u,2"C1\$f0F(-N<mpRk2pU).1'q@;XQWI\o,`#fdI(Oi8:>L6feWLL1$cr-5"3:qc1rVi-MP'ZWP2VloHW`[D:A`$aph%H[DTAdj;/,^Ah'p#aePgJ4CNO5mL]&ic!r'r&PciA_Mhl.cqS?Ib^oB7m_oG4=J!%h/e&.oY>t_*pZr/@2'm<kJ]0.9iLZs0mP!r%ObN#?mbjs:QdaWg'jW$%qRRP=<?D<t>GlgI[,UtCd:R[sNf@&&U4Zm@.(r$rr:E<OOICXW(t'7r[bm,:E%G]1O5&mLl2$6tgDd_s%#1VYD)`[8;MNc3l5IdOS-pu=ciQ4P)_)'4.pi/X&c/Ba9]5Aq4S))n5AoBrjI-bhr@E.X)^#XtlYN<GTce5J2M2qmsK^IV$^\$ED%`PJ^^/>>(j/tb$3M.`@Q:mP=u/8%EqShA7c3&e]5SrgOq(a5^C0&#ipgnf/6bM@a-Oh,lS4?4"\OLk5VEC_[].*!FK@gb^M31<D*%@-o`fm)7E,ja%*\m:Cq=l=<oZ(QfQ%7L\GVq1nNpBbT_]!a?_uE1a=QeFB/\rLa,gJ,Cu"ks,1'f*jm_hsCC8s3dMt+^%[\8t24G%$5bm;OBpi:ho$=3P::k!E/eckFGlXqi=1_!@$)`B+Vl@?RCt#VN%Mqk7)d%sJRBeBXZVD`)ml&tYRQI"coudkhaJY?@msc/-_^F_%oRt%H%3[0Y\S"q-/[-g2,+B;W5'WU/H(L/?-C\lIWN;J$pbHkg4SXKO;u_J1SB1#\ZQq=D^*Gba-?Y0&XA_UDg^cjuDG'[b8@)OJ%Aa1hb(Xq[f?,6Bg/XCj><_fP+O=bjs`j7,0+<:\V;.uTK/UA^<l<j];(gXIgCr(GQk5B^kg%lhDGu$b0PS@:n@4"geK$urM?q=s9%^oSoiaC=%^@WUi]-CGsq8bB[RSt%-MJD"GCE_/0L<a$hIP3$5mi\<Itl%`1Uk?d_jPR2Ui6uEPsO%u6;-.OcP'VcM$J_;sP$RY^f%B%se0\]JrHOIKZuaC3jtAu`O/L?Odi(!b]n-ujM0RXlhu>5i/"*?O]ud^FbMYRuY>.a!Vl-[-Q9JsM_).U[A6<$n?P[fGE\,!n2p%`"=A5mKe6?K,W_O;rOT3PK"uKYqWIH1:TS=mBG50g]=stQQ'qqfRqKq^f=CSc/=O3Uh2rrr=uO;j%F9KS!gMQ5j+u&JpU:6YpYkQ%3Jamg3$J(mOP6BIO-YjbS95#J->+kBBt,j^r+,_<Bp:.k=tq]=nHWd\1@:E.7eP*8<e-EUo#NcV?q:-cZ=FR\UlfF'lC]4<12Z!3%<%nU,13d&kec`g,@1cE4)bMVKd-l?u?]ddP/oTGK0bPS\aX27A-h6H,'0\FI)/O.n@8TROUu?rjUEEkWhbrSnEnV/J@L@T0/2E.V%S0?,4(SsD_+F-!s1c/V,b$N+[b%%F+#\Kj3!Ab_E[^VR3O(?D/rZ7iAIfKLV$c4^$3;6[BAq<jP:6-jEJ,?FH+)fTY#Ab/Hja\QF%.tB<:54k40<6*h82s'!IrNm'NJ(eR?fW,=$XC%j0"Uf"G?*7J051Ck7H6><U^JZk;Wf>cjn3CS1Ud352kI(,MT]Mmr"A"nTHVp"d%73Huo$6UrH:"DSngYY5gFRo#uL`o?%'o\k+l:8eN1g,jd4ZmH0lAJP2Vpbb7C="!-VMpp^99iZcKdOb7JFi2S%hk@#-\$jfcHh/N%%]dkWP]V[h'l2gpBbPkcIuco6Z$.uWl!+I(J8-ird(tGb@U<o$#qT"S;E-ZVXj+<dKL]ei9OI[kDCime:0@r:#r$CV_'++[M&;BP%rM5ZI$P!I_9hG[0LU[Vc_b`[7Lj0.II)gFLiMq?S?i7$L@&X[FBcOZ%0RjihUD5B\,E35oQJ>)nH.W-,.`>#fVpX_5lUjW;g\;eC%W#CY`Mh\]MQ?'X!L*8[g&$jbuSn-Cj`pj-!$h25^Gp(t-TbreDDA/R,)t@kX%Lp_9+UC/F8m_Q;!\pUHbm\krd5\1>F-Tu9Ym=q*%4"n\1P,27,0Y_gR.fd\+;UFs>:g!dU+!/CEE,AJ7`6sn`isHR]b_JN:+bet3j-nOMFWI_*n<i[rBW(Q]TL9(h=[X_sWk&a5&V7Rb%o'caM!@^UC4@:m$W"l*]bBN`PJ2ufJmm^FuCh/16Y\3nbK&)&*>#D4%::0+UPXRO."/JanAMCtL#bt?-+\5C#*tVjgG)%F`2Gu>6%D"16NIbUM)d=_`<.Xr[.X_BH&IgKN);OB[j@-+"4g!r0c/clmr-+[pe<me@)+A?@QJM#^-3"@)oOSouqa`)%SPX%bR8-gcPG%)mQ%/OZ4h!Sld2Sd#"*`OQlY;"2ap:u[g"idf*(/$uPJ@k`.7ZUatYB(WtPmR1)lf,^-7PZo7[b]),b([c<K9=ir>-1-5=[%`u:[u2sA%D:Pkm+P`eVh6!^[(PKV0b*OQsD&A)5BIlX*"6("#[5!(KQqn!L#G2fdMBk25c.RnG6<l8cPZ3uo'=5%cqF)u$aVJo[TreTk"ojSL%='0d1*58)'JJS0@+O"3"Vc?oqE&_5U!(GdAQG4%(G02R@i+3,YT];9G]YHQ5SOl\!Y`KS&jY=3VRpQkj,)ud%&\'Nc?)b31]U#\J%>.dk7(5%&Y4GoLBr7i=TBgm]b'Etn/^m+mSMM=o=\\J4qZ(n[B>LsG_%3+;=qFZ!#GSHo+p*hJ1+lc`L!ipmZIc1)FfoI"S`(6`1%/-Q(U/P9(pS&*O(mDtk*<g/YLG?BP:4l^M2B#34:#'q-+n59hrn(=beapPkVG4T04/1XM]+Asnt@l5^Bk6(1$'JbJ`9KEm^oS2-2%Z^=+/6WRS"&YH1'm+a+q`96m%c-BS0EZnfJf2c$Z]IYE8,EkU+*@nF$iR?l:.L67_.n?NRF5o1N8F&5H*o/:h\Q9UQ%@4;Em7L;M%Rr%Lg/.0Q=SH1D`9_(ha<ELa9#=(8:-D0+O=)j0"[TM\:ZaitYRSGKJ=Ac7J2>JO0>UNTlTe6HKNG8a4Yt,h<7>@Ru@@[*$W`tDp%6j2>;2f:g2g,:Ug5`#Ar.]_(caU0D+jJ4KB$<g;^KeA!knPSKtMDe0Hni2SROPY8E2P_TjHLP@P]Eg%q-6O;0/9CPrLpEK_OIhZt%lrOt5W?=.jh0<tts-aj[QNgc*9@W#@B2m[cc6_B<JU%.fU6ZdS+[Vt]aaed75-.<l&`W*tA2e/D*s,MWJlO000ZYk?o_M8FNd+A;%O&J-lJA:q2K#M57pYID[&hc$"2Pt$X[HWIPTJlL7c%]W"N0o2XHOtiG'2`./"Z`Rj+7'Ot)g3HflSB#$b"HorF%fn3#2lu_`ae,h%/qNa22iFR-%%3--=jr5?aBeq_`!8BlL5bU2A.Be%7)99LOT6XSHaKu'@?:mA+(9,@r4<J^;:kmTH`$1fPdm$,+["J5Z&(OPp.CKH%g<OrFOnaWK!^C1XV@fAm0K"*/5SWZf_'o].`?/o1oE@1,;saC0[>SAlVkRse)Y*puO`'435$q<U'?GJ;B+[XOca-3+UbKCCff#m=%_A2c]0GFtX'Gs5#;`k(K63MAU@ts^^'ch0Xm4XJ@+DN$\`+\9@&G?n@(uN(2&FQLA^%`0LSori##%P:kMQJ(4-Ilf^1EmVO]+sDl%;7cuF"-I=h"JJZQCc$!_P+kreX;.mb>i%.C_<FN,!2X2oj/,Drg>!u^<g93r4BBS(]N(D`Ml\SU_:fGeCI-it,#'tt`JX9&[)8P!%6<`;AnIbmR!gI,=jLSVJ.*EDhb&T(4'(3Gm'lr+tp%=H(L,4Adc0tp9Qf5U2i^E+00>lFHBqQLtC<RVJ,5=Z>hNVNk1iRR!%4)2u%"J'gJO%S74V)a'6&W%jjq_Y_CXKMe7otVNGbn\A(W97$6.jLo'gND'/I?;30n-c!&RtO3=5D>Y\%!u<;$%mR#YFW3E0Rgud4C$/=%6JGOGQ!Q\W>rP@=[Dj5a-e%$j02Ut+j3E\X8"nbBSYaaqAip*U*G^MP`">4.hnNDIRu-nb?lh[4+Wk)8&GaF/0q:W9rBsmE9PL$3%<GB6[STLRWR7-8s&Q+d.L!LGo`IW!)@3t4FD*6kP4jjq922_!=fQgc>,r7BW6.LGheR4'qL5(AJM'*c>;c4.'>6^XL)dM*V8_*qF%0ZX];#0a$B)ZeAG_>I8G0]$3#$I%^#,@.NndF^<n\M(=d5,a>aKa38F#mKB7JiLi1`rMnc]gWm'?pZP\675"TJ=05RB6"aeeqp3&%qfF'V4HGeDBqI#q$=j+ue.PV)UpU2r:M1Df*+;k+P>))rK*<-(eDSuQmJ!.GQEutn![.P7H5Wp5"iFo`NsA;(i"9C2iOQ\TH4_gF%j+gtE9$h=<rd./CVNng/FP(CP"IC;/gck^n9>dI7cXKls<b1't6"qh173=;MT:juWjkdO!,tqS3SPa<WG.GE%!A\KjEpq3r(G.?0%bj5P$PQUL]\B2o$bSuX-j=p$1"m16L^q:2&R<OAq`f0E)]lUW8grR/bb-';V!r("0K>9<fflBE(@tu3NYjV]*#j>_7f:Z[I&bpR%%1/@d1nF$Lh-%j,Hs%YP_8%'ZB:8!3G'3t7%:o8nLdUD#^+8^bumgEFpIBgT%06l\9TStJ:`-\]MriA.f6lmJg3\E5@X!sOWAJkfS%*gG<u>#MZAS'-BrFAZd)kLq[j!`;JXg8Yk3Hum"0L22,X&(`^*]r,$->dh>,-7o%J9M"l1kT?tpVH!uq\>*5oo.^(VN]kXYiSGn,%j`-jNj:3"kj#eA8BS(5c;Yj[dp94fp=?U>?cMGj:6SF4T&pAn]_9)T#StS'ij@dDIJk/0t$"j773MaWbPB*>3_ClaNp][4F-^G3U%m4rZVKZO^TM'l85:He4:"Dt*F'mOeOM%[[*jPbs'/pcUOR;UD""Wj8?q2J;Djl(J,:U0r;___5N%jZYbiVRM^cReSTS?!Ng%M&fl%OiQ`@nU7sl-?sf\7Z8qS24'(#@e.S$i>2h`r.9KT?h!Q(688=C*Y*uj':F+-^;2:Kpc'Bc#@'Gf@S-ef0_1_c.dJj1/4i=\jC.+^%.3g(`RrUV>n9>gr:0!1o4o!Yp(M93\A0ato>!(T:$\g`eSdtAm04C^TH\o$)b?\eol%a6]HB>Da9YricOGufSa8N!TE<AA6]K,KO%cO?9LFUY-O0-,Gf)k((_q!&XdIkY,*8K#gk_1*>k)d#'R\ttpJP=Zu'qClk.QMFqg0)l,&%DpdW]eDu43SaKUQ[)s)o'V,NekHAU%SEJ2-ku[tq#^dSO1tb]rD(gRMi[c0h$nM6J,P#Y_6d^JDfOS`#\dTO$7Cj08^P5=L5/kFB@Il<R@bb/\kKtK_L7&rTU;O%"3QoJY%B@ReYSGGR=;.%PHmpldJ\.j612;f*f)R4"QFF$.h]XEEH4j.q*EHoN7&4W^e`LsG$=\lW<EM#`Ij+Z5IiT9=s`LSZ*n)AchhF3Z2%OC-0!%nu;YCn<-]RrVSjMr-m<)lklg0mN4%*S^4l:nG4a&8-p#YAm;B$ZePYhTLX40EpJf"FQt`akao[NuIVtV#>Q-IGoO<Z2/@`%Q3rug&[r<pAiNBM7O&bOa.qS.A]"ba9_^lmJlRf'?T"9j7uasmJ.\A]R]nMS\C0Zkb2oZ`bOjUqmYf:G&r&IRBcnW*rHWC,WDObg%$a8iWAo*u]eOS:.`ctSX=H^jO@Ep0q3,BDP;Ym81?*$af(ieKFi/P*t+/TF!<Q>Tq]uXcq(V:[]@a8r_&,LAX^BF]9GMop"!pI^6%[[?8,.Ho!MInts'<YfKb^<()OP(lX4kHe@%p!T2cX%;%j9t1J%UWI@`VD32?d26S\Q$=)I9cU_\kWX8F2*C&\J3);%0mUK>`d,Z&%^"#g.M\\/D*8Fm]>ju(bb:PAWrQIR,+/?b=Xd5X("4<jX!*Xec*'W-q,-p!3/Qa@n66>aj*D\T4W1W"H/T.f3LI-N0W)Z>oPUub;%VDaFb.b4rXPRU(@AFht#<Z=_MB0O^D&Oa.Z4<P=;'Q5j>.G,=&K<A^B\4UUFHn+W1\:\a:BUEY](DnJ,GW$JD4=hXpY5sg+NMnB(%\cC.I_PjN20EQdQ/f8_Bo/g@,6n`fWMt<+4Kj]?dBnroCK!I\+O>];VNCYSfC'+b&Drmf=2&>F_,A9tW-?j'hoa$[;D=t(clOguI%k:?2i@Q3p/4FCYBZkYEm*_EWC\6KA5.,(mFS$WKmkeL\O+Wj]#O)"Hd=j/V[DtF.cP/bn<NWY/$>\SXf_=L$e-/2o!iF3%&<kN%D%FQeK'HTo_!C_V7g[af2;8,/7C!tQjeqZoJ79#>E=!kVUbRRKDf#\7<C?DL7B5[%&dSO*%dhK,e]g2AAm3$B-h%aS#V]u9=Yfi6eO%A3C&rRfW$kfu9]q5p_KWK8grJ$sV+\/O-BQlSkPVN#(+j4BfuB*QCAI3kpED6j`g,g^$O@+J)9EbjE*46Q(uo]6WS9$R'c_)-Ze;%Z5jSd\gB7VOuN^ZJ8+oeQIh)3N9MZZ7i_-l(kgd^*eK)n:)M#8Zm`#^(4HdA9Q<EeZ.b%?,>cj\@;+#Bn7a:k6rsTpej'iSO[Oad%W+T<&`MPsp3,M]P6`+uIgaoKc5[np?T!K6#m!d^<*uZQ>1:S;3JcM61S\p[BFGU:bDqWEr6`F:HrqfphT+2l0IjGFbJr+l9PC&1-%N%d9e=)^f>=B:8.$6Lh,'/7@/9Wa2U?)f+<@?$CY0NaWlHQfXDFfQ(o*Rg5X.Vf\i-57^]bOWmFIkP'>1b9]Ef:lG.M[?V8.gklG%*HqdMQ>4B<mPlP:VAt*QS54WM4L>[I(p3ZI5t#T+^BBErhF*"XLBs#f%njaYcW,>Z!C*q>ZJ%:*cu6i"4ir#kJ=nUEBUmMAUek=i%)j!L_V4(kI;&C7?MM;/KE-XW-NR-&5c_Ii-`^,$]Y":10V*XT5ZYgu_UeHA:%\qFO2MY68ka;R/W9++Fr^`hFOq,sl;"56^Ekg8b%X(I12#5nf=3"1[jr.pCpq!eU(pNsq2W-4"\$6M4%r_b#5@U0HNZX@dB"O7"nH`kgR.'rQIIm[&`dX>XG4k&7<,Pi+ffMk?!^M@CO%OY6LjKed_JG.L>)'n*S?!gmS#&ZYJrN!/0?F1#1O9_!X_j5469[PI</Eb>:Y.&6>i@>o`0rSQX]3;E#6Mo=G''>PM2K"a/Z>M-5\%o<_Z=81?A&XUD6Z:UcKb"icnW][k)#jJ?>Y]NniM%*<3`MP_SbGpj'AJCPfXWrHgW/us'p;4\*^eSK@:o2Vq.S,k*Kp!=M='F%7k%%V(VuJO*jh@'F("-Z&=SN52i#>]7Jl9go+r'LJM#R?idgr+[#EUB-p"DL9E]4$nhW.\+7)1X.=h`;D=@++E7Q4Ct$g#%jK05qlpU%R:F4o!.u)C"]f%*fgd1Nb!?JIo%m]'.FDdj7#6c=k,rA_-<7!fALf66c`L[Op"":.bP>OG[@tqo7$+Bg8OD!4UGm'm1bH%7Q$\oB%+tLcFog=\sb+l>iRMH[^L8t,C#t(,Vg4uc??5t)YeIK4FXNn]^$iGmZb2M/r+C762/+GNUO33d#+g)@5'uEZs8DRP%WM6g%A$!S"%@A?eE#<+ppYA.CDnu+r^VUQ:m?.QU'c,O!*,.V6'(F`e'=IA`_Acq<2[piYlOe4E>a)c_FD:ir$g!(NQ2n0B5nkqN@D^?U(,1X<-%CI(QqQ[U%r%fGTn^^u1P)$UKAOAbM_-l!rNMog3[mKu/r4/laM&ZP/>;N[^)#,ED*6fd1_XRV"ZBhh"P"H'`\G@[#GH7;\%KRB^.%$)g@Hes1@J@?P:lW^M7.`pBea^Eih'J[8H_"rJa"=nf`h9KKa^\=Bt"R$`^8@=LaohZ\le'jC/TTdj3(iWNG8$s#]*>M(,a"q\5p%^ggL^fobEnWO#uJ-U?(dZZ?3j"%dCQR6?q;WI-B+F:8,*:doG"1in3'B[A)+oGocj+%/h:a`bS#I0!1-hL>cM)N,]3G9QjmM@-"b%5jugAPHb]"1XNGUqT>>nVF0SNWXZ;"#6%P5c&[liQSDD9'',X,q`)l/Z<H,mF$p9p<7Uai-pGpChe*L\7h7,%N:d+Fpa$`^`ViV7%7[E?FL'1hIg.5HLANf'R<(@0,"mkoT:./2["+N+D'"\T_2uprY!O0-Lpl<2Y#/d_SJ[EE[6GAdM[58Rl+-tRYPPqd8F,b&i5BbS/%Z#NEPb.h?I8$t#f&tQ-D)2aoY7DeE4-cT>jmEB#KY5iYjbj$q#WY.QGKa_beJ6g4M86pe6*&$h3kBl7"D2\/Catg1O)9UnZb45GR%`LQ4@n;EF/$]*)5fre0N5>-lcaN7+%#EZj6/Ci:ki8X9AT:\CR#F=\g$iTK5$P[J\">)=U@>`E&5_cHE.B!-ObK<jW!]-3Y2GF7.%Ma@F_8WZ3)!6//FH^A;<Fs0d#2SH%ESop@>-dktQWAEHFQQfYa/$-6Q^7o<HXadQW4ILD69Vf8GU^S.]$Ao"sJONHKE_jf@5PRT%%ZakZ60&^m!G6'.nZs=f:QX]AjJ_M?Z0N8`'F0^rdBPto`97AQM/jMReLP]laiU>%[=#+:!g6XVWnmF]7ot&"<K-h/"ndeT?FH8]$%cne)s#O<Mk8@-f$9hfCU44>JWVeJuCMK9LHWTZZNNsrcs$&`"=]$K6Z8J!uZJq2Udcp9shgsbl\L`\/fE<ONsA%"Fg=N+Il4hm@f%$\4TfWLaV$j5h"?^[d5<1Gnr8g$OQ4%.'s=AAKpem/nn*OoA`u,Ndbk#ZDS$,^l&!O>"m'/QgYWC:f+7:u*'%FT-D:V#r;o]Ksd"%,.7c!V,uju_lTRHG=^^_P7d*Q&)(Xg*,)DZeBl4<;FIhSBB*3:b88!)K;SDt#\EOlk!Y'#:tNn%;H^,Np?$5G,n`4Xh`f\KL?V+m%e-0b&I[d&0fQP7MnM7SLh.$UmV2S>Tj5rHLNCY0*5q6Db*moFuT5681@HreDlgB+P.h)GcM%-$ZW#+ZF2W_"#'IXrsWFFX-X+=+J%d);BM^joF^Hgi?'"9=g(7lD#(S*qo>&qF[PO[NDU21hCSi;^WF0c>?mMM_5Yj`hW`9P@[(E!\2qE#+'pAXIlVM%Of='g/iAe-\72%hM<`R(.LH-lJiOK=$#oVF19G1b$G7KZ3IN5JU'RYfTT6H,%`M3Uab?_kEg]N3<\kFm/]"oMm0IC+^:)rpHbpc"\/.fB_?&_VMg,I%0YD5H%LZGY(3V&niJ*-,9EkhWmhq0uR2[A6WpqlITEQ,l=WKLn#1K^mltT)di[sVB$mm`t%kZ_+ZPeiL3j&%3Ki&t'31N[48@k]]%Fi\K<<O]<8Kbc@6.0sl_1R>/hGtEi=AJ7V6etMAQ!_(!.C1Dbu5Ud[D:P)C1(OP65`TX2"j1C.Kj[ub=&&(ToB/<GYM_ngR!(P61%?:;`MJS"H$BX3A+"kDQ%NiFG9_;\50R,CW?RSf9/aMrbr:)gkK4%dk0#>#''K0$:ib;G#k?E0t0eV,g`oh5+#E7KuMAu;<n'mX)"%.u3u_`V@1N+nj._ha+n6X9KJl&U?(>-t$=<2M!Ob7qWit&anO"J=S+]\lMNWj6:%%];Gl0MDLc^:cf8$I++!QUB'`3lY3jK/5p66%MPZ]i`)4r/<'8S<Zp:VC3L9WcU5j?_TQM.TmAriKa3MNC]M,>:TFb=Ap&=XUkmGO#kY0%R.sN^qHb\52NMT8YB&2_`/HF)4$iD6.%_],i7+)G!!cq\>c>Z)nU(Wd]q2&<A5O,9/lg?S0;SX#k$l#1"5#EFEf7BsbsA]l4!D>A1k;,-^8F_)]V6&m`rWL=&7*b1@iFVRrn%4mcOI`tD>V.-;Gb;[sP;qXAp./.nghD7i)Pc(SN:\Hf)C44Ka>n>?K.b,abY'KWR*YUHbSA5/^j$Xn>-/IsiYJZ^Qs;nQmX/ZRB\%CVj1$2>s9a^aoI1bknjS8*_`C3Q5;W1_m_^R*\)=/?*FdgWh[ZN>:#AO1D]3/XgMc2:ociK4ORq<#?+'Pdqs&&&5Z?;@29<ZeWlF%Wj2[\7[>'L8!;]*&oY[dA^u6k!E6h@=WBsXgG8I,@Z_"Y_D5\im]0*uGXk]b(g]L$+<IQj35`50h:5o@rat8H-uj>ZVp'jaC2s^.%&:;kep*$O-ai@@-qN#HD)7gTFXPst`\m\&'h"X&IVnn8,%Y2;cK^7;*-M`2g,Dm'"FKq-g$>g^pr^ie>2pN!%8k"-l*JJ;fp5R!D%U$sA?p*Cs[IL-Uuh"Y,O7=nCMZSFiOBr,hMV]hTT<e_&$45%[iokaF7?:.+QO/="l55Ol/.M",=,TOH\O0L@.E9MN@3d+3[%:MXN%Y9p4R-me>0LH:jR!gCV)/@K4^[9CQ%J>0mc\92QAb%a\='/_`V'aL^qi6^F;bf[ESf9`Rp0G7kGO[(doBHu(@o5#bm5@3%.OlCS]%4qt@Nh$LA1Lr4O>*!P>`,s'NA8s1;,[)<8nn^B0r"T?'c^2liFk1(q@%U!g,eL5S*>\dX`]!2+j,R$o%>j?Oa!ktG,H;oTae;_^l%fK6M2;7[c3=JdXKr)lqaiL#kn>PQ!b=JRc\b5bThJd'">2KI@ROrhH=kQ[I>h%[][S#q"V;&kIfU>X+AV$G*!jIX%U0ae@]?LUS(%Ea*3dZg&-=];m%YR-WBTKG52)8Z6sTb*22JNHgKB[JY$><1+V2>N)q8eCdld/Il/o[8DOoCd:d)2u)="j8u(/RL4UR$7qf9fb*t+%B%*nZ"23s99\'q!U:%?s_4LfK4,>2`4U`#^U;f$k9S+b<Ym*1)IaAA?7/_Y;:6tO/$kt1gTX`T-X/%aN"rp(s\s_*e)/bPS-^,J.%U4)"<h=H^Er;&4\W&0-goinOld4P2BnQVLB4[!3:HRMM?'iffWGZ:]*fkZcien,n3<-Y%1$A]'8@9tKAMFaVT0R+F*miWC-Hb1%-%INEafa?9)Y.)St&..Lq*?YZ/a`Hm,9@1'u2+CSnVJ<Kpn!+"+b[=&:Tpk\m5]$fqa+]`8&$#hNX^o^<_KuSnJ[ZX2?T`!=76VpM2%"n357nN@.h%3@=&ONN'aq.@0g':U_eZr[[%#+RM>9QPe6:i=]TeR_7plo[\Th1u2=8"4$V;3dDtFibs[.QS<?lZBE6pBZur,tZc7%1_:;l%8DuKU1Yl!,Y0h4*@:jNL27=c3J+.?lS52,8pY'JZnCqW>bDm`O_$`5CX]NINE_`jSLJJ;hF<?9Z`bO9oR+/unjtM`K\^Rg%S0,/gSgqf7Ob*lMG\l*#5\+9Q7XT_8H`XE3F_&Z@E[^7K"^>5pTV\SXd)qr`/;=V^3aRZ&n`43pG>sp.R5R(DBX!eYD#J+63dIlN%%i*^tUKu>#<%XdGn8d/;7&kNt-S7MsH-L"([Xs2P;\t9/ZW`fL-Pu8J`/I(PUCW&i@7CA@jkAoQ@<ma/i5Z`*`-l6O!GI).PY)j<%[.IjOms`"#5aD7'X(Vg>Cnf:Ls,D.kAqZRm28mal7@cpqK6N&L*-53>C<.&s0?8+?Anj$Ahrf@L2+?/#QV'J`'#n<*hlO]F>gL]@%5f.Hf4h6AnW>q1Zb:)Ys6Z8hV2[-G&SLFkVaT-]#:eR'B$<X_")gm.o0l?JT:XspE_,Z%,FRWgZ$W;9"?H"WFq/i;GZ`GJ7./Irj%bKOr?!_S@'7!O/_S2Hf8<Z/f+<S:nhZW(ihoPW)*h_*D@`&XJ5=-fD0fs7ti<Z%@nZ"$BIRs9D9K:oZZg/0332VsBn\lF`RZ&#cj%W%XR'Da\KKZ7F!dY.AM8-^Ysm%d0oXodDnuX2Q@O?7bsW\\G$SmW%pFki&rpgC[j,@2,db;gKItj$6_V'F9,55M=jGWSB#h%s@1f%\>3W8p!Nl$iU9*#[-didZV!jaAPcGD>t"IPUX1dM+0G@%imDipOdad)[XpXcZ-\W7<c(H#5Rtfo7L+"[TZiO74(eR*4IMf81*JOl%p!CT)'nk^!6/=n+MBj^ROqDT1'Mk$D[Z=GKA+UF3rJ#/ZW?TuGAi;A:3LLRW*X*u9k9RT\`+jNlW^BLX3bH^rUCa-f!*4K98)fIF%ne^k0R(NK_&nONe!M5";Cja<;?*#Y7F'4AoR\Bu`E:7K+7>=??l52M2#EAQsIL?C%U(.fY'%TlJDgA,n;8edg"g#+%We]-PWX;N'%_,`9+Uo#u;Hlb/E[cW<`[aQp+-3C"SL%=FPJF&0s/6WNg0L/:HY)jb9o(K:dBcnP-8qD\Q"b@SZW(OTdmn>RL4Ru&@A3-,aqdELP%&b-1A$WWWGFat\%]$f77=atC=h(qc"Ik3+0`_&bn^%CUG;'6^g)c5YLiVO:fENuX`%SWA+$nf;>5l(ASIGh=ObYt7JS2TVo'pD5'%`N.5,5(p>o/os$ijQ^9s3)bt_V;GKiML0+s6?sm6/NBD;/j#idD5OocQ]'7Zn174hG[-pG2S%:##GsKsUHpGaHi[2t&EULU:l.L9%OI94V6<c0=k#d8G;cC'T.A1*)<.VRtFC(Igb@Ur#jJj[\"/XA3M%-kTD:'a;TU_B9;2\RkK.M^O"%HFp-/(1cq,sAujPg]n\Cc$K%"a_5Paj+s"6%o/-Ds3H!(YUXkM;#&W!"]o%,`P]Oa+GWJT"::&"NG<i,+])@JX]ksA@0RB,Ku^@@Y<c!F(299.?>rr@o8.ML-AJ&%;!JITMD:CGL>_RAElt+RW8P#K*1cU2.D3]-<L6*'!Qg4&0&:qW'Q=&!o]>%.::7A5UUjtQRO'?gZ:6b_4RDu<VFBFL['B6O=qL5P%MZFT4)+)[N_Q".q1=,1UT5=Bt<o25(9+7\sQu-2risnPpE1j(NqbFT<3inkuT[aks@P'd)NKBM8[7nPnlVM^kZWl"D);B,L)(.p)%G0BT%oPfCZ^qp]qe!5B2$!<IrK)&[dN1-$Z@n8O)D%J;R9op&le=%<F0KOTL5G3<uC\Dd/aA4Zs*PI2)lr@+T8u\D1U2rgs7Y]=U%VCKKDO&"S"?"pi1LgqV$JS@pZhkGjcU/6m.?o96)Ki,(%510j1k3'+SXE7(7q%HqDaN;ou4L/T5fI0'$^os&^GGn?K[*5a^+EdfJ%`me'&"aGHh54J_-!^9r?2u$k8[M?b>'hqOo!eA@ZlX!h35s!6l<B7"IS;8G6:]N?W?0`\Ln]5\$3sqZjctd@PdP>qO9V`uS`i!s%%VYQZ\8Z1<>;6Y-6Brn($4f!5m-T@)n"U1"m3S[NcZ7&sZ@o`FhKT3'SC>T8I]i.[o>-r?^NgEL;@Ir;FWSQQuQ*gZi5-\]sDmmhT%7=;Y>%hXPOHE?c`e`^9^ZeQGK/:O?u^b?<(EftZ_=+D/E=gWe^=MsLRm!f\1WOO<=AlugO;b*,tp5^(Gh?5;p)k,ht0qJQ6pX&sI%&KQ^Gd&BFPJ93eJOKX&9-:@H88;Mt`.I!A]+$I2D(X9BC(hV/>dhJe!d\Y10iZX!(cdHO*8s=p9R,tI9B[^BZ0!.d1N'RX0OCLX*%&CVe%_#^ea%-^DkL[Q'[S-^<48/BXs.M1:Y?5d6OOVNPNK(T,*nOtMZ=Zeg<o4S>sAWYOP;aO@J"+BALaP(l%,m\8K:_^U5"kb*M%Q?U6@ECtcdppdoH]XnRh^_0JS-+SPO4!6t;l$2W(<RNI\k'l(J@AD>G8:cEO3D4Q(UG1XZ24N"*T5GP11sUX^$UYt\oe,==D<O($%L*GiDak(8He.dA$=YZ0(JBjTtbl_tRfl7+MrDGR!]d%c>."`n+RcXmIO,Og3+c_Wg^b)Rp#$)VLENt00+H.PCkG+m[%(4g<@to7I%%)NDq(XTDc,^[:/kfG_?9AZ"D@=='m$<`M&.Y*\am)q]a=>=9(7p0Zl?p9oX=0_h3\9ollff:bh"=f14Z.S#2>Bak41JOK]7Fu"m%-D#'BK/!b7e69#kGgSf;Y/(r$9mE84`>C&l10D0-(o73LU3*Rah;70,S].*h=s2.ii\hH/)5H8M!p$N/GSMaQEbr`dMIbBD[i&Q2%g5H,G2IlXrqj\[rnRA:f>L@,C8]fN@7UtNXRo40*@sj/;"'qr^WYc/TJn6gZWe_D#eX-d`UkW3(!/:PY'opiF9,S8k@9:qe/aUWJ%)Di9AlI%*!AC4QARLDgIk_$(MZ^AF5b-`67CKD**DEJDb>E:Guk$q(7UM7iT+(J<Hh-Tt5CJ<?JYPf;o";8$_#N46q0BVt<r&Eg(%@m<FGNW.ECmDmi^"h(u?R+4"`Et-2]5F/5H=HLqr5VhsLA!Xi=6=spRR_,^/)4*cDdsM4TiF+TL)tN0]G^:%`%*^N$%2j4sk1-^[%j2`XM+F?uLU27#@6H3dU:$3j6<[,?04=9-I>SD.nWoq,-5G;[Up-MF(JrCuLiuFm!Gql`R7SdEXXA'a0aBV%<a(No^_2;hk->hut%72%ElKjc^VKZs9<UDsXsp:)f,r`YD'&t&<>/BFp-6K=?#O?[YL0Hm1l%_n#A'fa(Ff^D:eZ==upk"LY"TFT0%Kr)1mOU;Agr-4nf%AA,\/5u,6E?J09@RcX_aWq$OEe.juT[>N$^;='/D-_b6s7q_H*_MD5R;s)ahWna7:ol!@nNFH4h/q57k/k@dR22rV4NO^gE7.h.I%#o8?/T](h5c5DCj7;p9TYjhT>cnrE9YRmaT+u9JI$4=]^dI-=;!Kasl0FUM8PC73^gLh;6S='i<Q?miI!`p.%b\$]pj<n.A.IuP[%Jhb@E:D5_nM_/=p"D+q=UBM7k>1uGJi<VG21lk!t^^4G9.#Oup[2D]p98?Z3]fX"7pJ^3=`/Cr=oC@.i,T#X4LT3IL$:ne$gm6Du%8259uYL\&i:3QrM0,?Qq"r0`R1o_[=Mrc#t2ZWlN>2l7f`DJ'dDhB?bjRjQpro5+I8X7/6#A_O3`t'UH%0Skq"s7\g$r'@j2AC+=%'LXh?RJlSbFHAPE;o#ss4I*FQ3X'?k9I3lmFHR8F(q%3V>[>:;&R[tP#Vr=Q]rZ'Mfih/pfS?dc&)%HiGJT=O"/^'fdpkU1*I9;1%CZS>r6[,%$#%`'=3:u(=PN(aL7btA^Rd:mX0pXBIR14RpcnnBF_t)cY.$e#1Q$g7rn&scXG/'40F!X."T.=Hi77+C*OrMo(6KNi`%-lf4JmJLM8ENr>gJn\k:M3#mdF,\!4WQqSc[G52H*2^]j-,U0p):K]H10'`^2D,oR+Y69;\SN+E.i_%JoX."?0UhQ;4QJR[Chc7"%<.!;79Rm0gZa/7-njnT']<'qp.jD"`o!8%/FWA:3V.X$VOe!,E^P4(<Lb,;/gVlSS-))jWS3ZLKN[OS!3nLeQKh(RD\?&>\9OX55%jber>S)=5RE<^1&k8=L=(*hng@_c5RA5NKKlajaM23KQh$B47PakQ7sUO$KMgbt9L,"H5RTF6`?>'-:EeAsh*%&+,=,<&(i\BBkJ%+d\XO&NnUT"e2L1,tA_YTM,tf6%j5IUNTN,TNOU@QT`0mU=OYQU$Z'MjC_I;52G#Kp?XN[D\+$O7i"cY&gT-2_YRPmjL_B0>oAh&%UVnAn,$>Y4,t<q0)5&KL7^.3YIm-2.o.9]R4d3#sWRbf4]6\!Z[AM2'aB$dW4URBV;]=?7W&-*5b,%\WUurJS^_L=AjUikc#pfh`%Z\c_DF!O?u')K^TUuYrn2mFT+rkZ&@hMMu,YaI*2F+6@Im=9.9WcKE%kuU`V!lJ\SJYFCtHXuZRTB^O=N*f$CEiBX@R%>+.JCfKu%UduGBpZOCCRC:=DL7@Y=[mqHYYu/#_n0hIKd>UAG<17PWUhM)-<Amf<&3>tb'g2qtL%Y&hjD6G&0pA]S]nFO_UR\]<[O7@#3dZi>%PQnBTLoM^eI]GSi\7;i%YV_/ipH>ffZ*[0<6#=G"gF4WP$;G?$Q[3ufZ^+S5[UWZ/np'b0S@7D$D'_1*[]R9m0T`Wt`hrnN=rS4`%MTi&5O"/Qt&;I6eSr@8nA2N8_\g=:;="P>Ph.D.?6V?(iZB[`1&0*`s6H*=Ap3^,UL85Dc57=3sj/+;)1(@,#%Z?lu7-?M0&C".n%pjG-q=f`,C.:nGi9CD]XeYBJS&625&#TUV!!\q'ZZf=0.!1W(I:U9iO%iinPb;L#-GV7Vu8HCR2T\#_QN74lqTr50)f=3A-$0_or%W1flF67+s'Ub1gd;LnfsZt>04B:$!Og)IQuRFYjg5IlJJd:-Uc1Z6sb.6I;H*/N8Ckcr^GN,8SSB9V68m_GpZ%[8V5?6h<o@E!di%Yp$.n8uWK=bW>AWQuIRXB@?b7aF*<>)p\<C#afuC*c,MXkSM<76FnA@&VY5H.t0`sc7I$=4*<`9FK=p5a_;1T`K5oW&hQA;&aS.X%A1A&AShtE5MdmK:Ra_CRc@g6(ntaY5q-@@M_B#Go8W>!Za!4WK_c?`/fmOSjHESgB:\Ot'0rq67*TBd%nR4GnKKCRq^ebjY/&\Yt%4gStk9I82eRC6o_jg/<^e-%k7,lINrm)9^[NFT>&(fsEu_#DS.K^FQjqiL(;A5fljAp"j^#XH\dm)*@%(.*o*UOq\1)cj<P:_r(=%oc\:eca4QnCC."koTa0JcnfSY&#;(LT?]m@V(ea'F`);\O\EVe"3eZ`$L_$IK8VR?S(QF5=ALH'WFT=-CO1$C!Ts_9ql"nZ*EB0J%g2T@KMq$s[<?%D'5emBJ'H5`QNu7g/+99T6cpcbm@k=%`6q]a;/nJfKG?#qH]r:n+;C*5<@O<p-)dRCS[l*j4n6A:l_'V6\B!DB/%bha:k_1GANer@GkH-#un-uf011[h/G1)LP#`UdmllO)&TIKNG(l+q([:%O[,!@k+(A6W\SPlm.Fo#U4DQC97,lm#L_(c_<SnB@i.%k.j6H6pM91:0MF6/o\aTQtW,/0M`X$<jRU+?"QF"nQG%:AgUB>#Y(Vdb(qcf)b0*=P%tQNiLP[mjQ<:R41#*iDhs#2X_8ec-roph%A@?D1>@iM!R=1n0M@kB6(hrI9V,Le4+_XY?]9X0^i1e+Q!7O?\Q7Q8u'b:a*B#u;O@8@/*c?$3$q*^]H[=2bAUe7DnURjT('caJ+%%k)msBFT2s/1p+k7oe5qK"[:$]ThP?Cd2]W"\*,jI>!R,S_-.Z>u</,O2KR"0a4HShQ2[hMrdi[6iF/ta0[D#%79!ZTQnZ?g>F2[%[c_Y,1tll;JM8fIYIs9_Ubnr(KlP3Jc'?J[OiL5[:$*XelI8C62V2PC9.PA[\K^)P>nOE50)jK0pg?u9V]d5[Ap(@&S+Ja;le508%nI&.YijXh:S\-S(]EJ.rfX9lsAMUuf?,Vbq^f%d((!H?Wgb-<@8X,Or[?5>mX>db,K1"`V:O3g#"b_,L(JF"lVV+]5igs=;QXtEH%pftZn4Xj\VC8OAR*%r?Q=at@Q(Iorgg9\HE3(DcL;qW"YSf!\)o"=aEA3;$_CP1*9+#q>&Ko.h_>VFT1;/MA`m6th$b9!m00+IR;%V5F*3%(gi0-D\XV#To;2Ikn_t'4h5laqm9Cih,C]D((g"H'5nOn1&/3=^TrRM--);'p4^So`ePu0sU:N=!e8A6b(YRk.I[#"QcVl%gb0lBnTnLX-RP^:e%[fN/E-,Z_fg/1k#&IRcW!9M">0`k..E/o9-F,,7d?L?N-)&1KA&@0jKZlD+UKs"_0=1ffS28"c)CEYPb[Jc%)B\YPi,N=bb)<X%NaJkl+'p(5cFY:Cpu<p+aZN3bV6X$fbick^T^B9BM\JU=+T&gG'9ZW5K>+BL;PSjc`O3"/TAoSZl\f4UA4$+V%C>Zn<P/9+LaZk63UjYb8:)pF>SC.oH`1Q@qRZGWFZCG(thNH"EQ/K]g/m>Z7'gL6KLZoUKjCZ<cj>&^VPfe91>FU9L;1>O-O>;+G%#O'aQ8!0Q:I*\$iIT*>R$NY7;8&mm=LTX4)4&4Bp05>mQqGghPB"I=7.3+iIk<6SQX!S&_4uk#Tln,$s!dI=?Jef(2LY:FNRGT_6%7aEk?OX?af(*+10TphKS.VeZZd"?2'`;.g4j\^N+U,#]L_F.ZU5YYgopuhaZU_s*"Ak+R>CX&t&LQJ.Z*D0nF_C27Cctujc2qB[j%U&,"%F"BrdVq[Bla]97!*njXD/"^!3eZjcZLpmC'MV>dWAoOi<P(5Kqn.uP\UkAH>.f#WQ./'b]_ogi@5GB/WSr483\"UjPlB*LI%:i)Gai/s4#N]:iY"9O$GF^gIfL+WI*/r'*J)dYkT=q@t'.GGXpH(I3i!6JH`-P$DaD:pM(N<+aiGXms_aiE*(,2p19/.7*K)>\,(%eYAtn?+P\5<+Iqo"*6_B&VMpajNS$eEd>o3N:>D74.jb/`r%5CP_9p$R[Hdu?+C9c,BN)3(Mi&rC)i"R_ITYVM\Tk?HKoPN[;IST%@<HPt23W_bak1/-3_#\b>La3p=dSuXSsHCc1o:)*+>:^lR+.*j(JK.*D?u6sVs&-.5^a:P;:<kXQ'm$qM2/W['&DcRCub1_As=A\%5mtEKbjnaY\0a!<:N"!+M0<D:h7g&6gg#:fY/uVj4:3/($o<#Ub1!FcCs<pY\4=4<Y&=r$7oed9\gH)Z<;mp49kIEqZNFu+7NDfL%aT/nj&jJiab4SK7Ypo*]oM&pUEU`<CSb8H%OQlTg1J/.&-CalZZT!Rt^.GI>7?$8rbY5#$YIs$->*Z&HRREERG-_JP#^/;,Tgc\<%$GkM;Q?I7RPIWXLp>DC`kkgNin4_t.^,\iOA+Cha06s5NQGgGge,Hp)Z0/,"(>P(@eNul!K]^E,XPM]q!P**i$Qcc&:K7[3j,V3'%+.SL1E(cVs3$iY=fO&h]@["g\04O*-Xl-/58@GUej-7JN;>+I<8nQf"=,<j)`mGuMS<BMJlu?.c6WB!p3$g@r?&t'cc*tmTF.AE'%bTg7#JpSg6G1h;)<t]%oDG'Xp3Y4E:#BG<)AfP.'_&nN+VOK:7,;YA4C*>[-O9MVoVi`cH1idP+B"'G4ETLBWjcRL4W'4s88Rd,!%M>YfhVNIg:l]T3;o>jCf,``3o'uqVWHYg[)ga2cA;kh_`U\[OHZ0M)&DGAoNQNaN6E'n#R2GSD@1E$pdVK.]_Va=4gBs7HJTdg+d%MLQ:KVH'So]tl&mMHBi7#V,8I)Pu!ahU(c7?`*o!5!dbE0N8&0i:KWAVZ\tF`nP_EE$Dk5?3EAWf,kkq.g/V'Q$uLTn-sXK`[qA.%5m6jEjjjLj:j$p$)qC29PiFsh^a&&CZo;#:dFcTKo*)G/H&6@^N<-l)OEN*%5r`U!L)^F>^@PP7.q$`BWMQ-m>2mmoEm'('A]Y^a%j+Y>"q1+spQ,32f]RK,t%DG,qpd]a\'l'"R&'mr%I[IYOB=cp*H/_nJkN64.ZBEJqa'c9J.56/#`D2D35"Z^GMhE<#neMB6pZ!2-%R=!,1F)H.dXAV#$dpH+QJr!=fDlmu,'r:m@ptq1Rfike&+ppQFjh_<Zma'(1F4#*_]O!QIl<?ud>;2Sj:$L?rKbMPW*3<Om6r(_j%#[5>h6;.SE7DnpnM9`SF35O,o;B!7,QWqP-eICE_[']O2<B5T=XKk$=)EFR%[%YMr"g%r$BjR/"<*%jX0qJ6&o(o3WV\%gU?)^\D%jT#L"M>e!ddsW]5n)$d8\pG$/FZ<6pbu7'$1LZ<e.3hTdH9<^W$R*O)L.^IlNhY_H0-sALXn#4=EC04ehdYRJ(&m@W`&H3,J2n@`%2q0Dhm?SILElo2ACPq`B8#6KnW&PSY,sT)E3*Wjoo'!&'^@sgZ)=,ce-aiKCI:a"bSE%>%S?N?YDoD,*XXq3&An:"h(>na8R<!Uh%Mi2!l3;$5ehk4P2T).Fl^LZ/,?p#X2_KZ287@-692=VUFKIe(sMi;^$Q&.n8AXoi1;nX'0df[WoIU<E%if*qNn-EBlioa0br]083%_5*;4c\2A^Q(R,tb299U[=7>'kho'=nKp.QUQ^+&X?+BnktD9J!0nL;3Lq+(apc!V6()%'1aik<[UUu#jQ!+k_0B;LL=S6B>@JsG%`TgQ;-P;'<G\UlE:2X\IH[+dA]%]gFjF#X./L5RY&6BJtoaFX)C`7&"@O[l\3]WcDZm8H@%SA5'@0rHO_4rf,niXIOnof\+_aQE*%oLssmeh!k!WLb&%Q4%k64nW7SH<[O"hjRO]^p6*^PYbS``H4oD[-Fb7HW(dh!l)<h6"co><XZ^,A!hK\`f4n;Z]#3_)sCnf],@4D%/Ip!&4u^u-ZTRJ.67;.VJsQ2R?h4o?Ua)D3dS+TA-U1p'hk'\dmG!5[S:hTM,BT)5,A>c&KI!aI@OGMZ/@*^P5In:?Wt^:3.7/#=%hSe[-Xea[*'*8df;EuJXST_gU<@taZII7IU'BGK@=eIf"IGQMO?4a^D4MR*#mE#t:WUltenh;\apW=.82jDQ6Ho"%pZJ"S9"l0_<%//uN$lbIY*P7/?qb6I'h%@EJE*RptVPaE!(DbsK-B7uF-.%enN4o+Kf4hj"N>TscB0[=2dcO(tm;@b]<PaaoNib>*+ViI/>qhCQJ%\#2@%B\k1MSLOurlO]\'ecL!?:H@_po%(/(TU.h5K%AL)X,?Erkcpj'ggafR?0h?3!k=#ZChQFP]eP7!*T?D*,1bhs?"$to$/Nd.%K/\#mo2F=gK@;<7G\LsekbACM'XnS!/T2Xq.r\3R;,U`ZRP/&Oj\Xr_K>[U2?K7If<^<fh\`RPPHl1"2F.%.F][$2)]N]n&]&oG3%;uTh/eqPp9c>-^(kjb`K.s;pVYBCp@Ma&SbP[ptAc+Qno.BUj0.s!')YnZoJ07D>rn5R'WaKfh[VrICKpgeYl?LiD0<@&e!K<Onh%N)q;HXuIA6`c2d]E2m6><4jMoh7D2W<+l#*pNe'_=)CfgXF.])hl0iVRcEI/nClKI/A&fW?gH<!$Up]Qf6f%EXG?Au!qfm#Ir3OF%\RkhYKMD^;#[.ONI]O9L;A!_n5-8V0%Q9ZqgiZX'Rk&=FhepHN2R$&*1j<B?<875/6TU"f[p+_A&$IiQB_V5;1!=Yg08Ids+sGe-%@0bj/`/^K*;:4?3`H!Vgc'PH7qC.7qb+aCh08`KH@X/Pd'q8Q&bMt14Xo$nuc>Ec;$3tWkXY;[-5ih*/`nmAD.XPlG*XMI35..X?%FGaQud&LUI'sji0':BE@:LX734LPM=0>/1Ck*IjskmC8>!th[YBS!>YhhDlhC%E7r,V#gdE/S7j3$cLXH^/D&)\Wsg9_O3qdS=\J%CgmfRnNtoVciXNPCAn7kU>Sq32u;ZJ[*>NFk%+OdPJ)4o)&[^&Z2WO0QgJWfE80Jc,eBkmT;?%O]$_cYX4ciXQV$/34]^n4>R1$J%?A">k@#Z1cPG'MN1<9(HA5-?("!^0X9X+^K@q5h%N9l.OOYuI^*#MiMCuECU@!lPf_.@/"WNor?A?^kd-]!_?`<4qu,">VG0$Im;%`HnMu(g4,t<e6Bu@Me)\Z3sr-G-Ss+n:g,OaC*oHQFV$l,76`d')3;)]ZQ+T(`BX']i<nJAE_I)]VM'0bF"D-F]tlB_V-1aA+?a"%?K8\+_e!EK1OJ9A@:b8UIk5!^GZhAMFdJ@NhlFi@=R!3#aNE6+S>*pD&0&Y'*a'B8]s7<$?tF030d7tI6Ab>TZ3ph2G/;)<>"I6X%-Y(s`b>LQoKmB]pqr)'fi+/)XNC1O1-Kfg8A10L;8+3r=O$V]7mN-aq1<X,:N/[-\]c&17fg-f,]AR+.llTJIA7YB'_](QQXoND*%j^cp5f.JGOVM,1Ck/@H*,K#tM5k\Vsc*'HEA1/.Sa,#Z_p)59r>Xin1^rS-Q(`D?dl.8%fN9*sXH?6Ab#S/<;?`KlI=VUQpeXlmj%K:DeXhF(Ij[Os't*-tc&Yqi+Kpc,N60H*NRLQtkms0J)3i+3XkmnClJ?A9gFG]7o\DbS=`AejD4Rmj-?_5sq0`[WWo=[`Up:;7al%.f9b%Lk`,pIM[hq4f$')p*),n^j+e)$tbcNFa;Z`J=2p@p+dbLbII8O!*sqS!./tRnjX(oQXRHpoWPs01(N#[-J?Ql]@C,/RI"Jc%](WE0]"JO.RZ/8u*=OS4YmpC^/>dF]4)QN]i0_\;$>#$S+*1SU*q0j0Ac/bpK"6hIV<Ci:Qdq3ug,`?ZYg*$P@kFb!;sWk>m`YB7%4SqZ8,>S[,VO`fY0WX#]n>!f.@.kR3)9cja[Tgd[(8,Fs$_SH_n8">XknZ'K=?XBM`=1YMLlH1)_Zj:rL0Mk'F=h)*FGj:55msmL%92c[6?p*M=bcnt(c-J@1#d$m`9P0pbV'OAcIc?g?!p1gc5^N3mbUWJ1.R*Qpb]lai:rd0KLK=XC`\8An?Hce5_kGOn%E#KBc!rQ1%kkWAj'Pq@]`Sus'XMU4Fm<>%&5d&?_J8R0\O,7;Vbm`&tXF.7?n_U4\MVH??+P9*]g;<@Hg=0Ld_]"AnKQ0@:]oUDH#^q`LA;3gW%/7a$BAmqaqB(fq/h.B]cVgLlq"2WSM`^.oNkgK4Q1X=(?B:tk-CEd+K"0i@N&?h[V3+mB1%!i+==OWjdoo-;;@3$)WTf@$KU[9EJ%X`CJUL:PBM1l]MFa#%+k`[9-b2!CkV/\,hC</h7h<?m$sC&jEsHrQ*FNeaaN</pTF';LVgd24[%8l.A`Wus2W.]=8A;rloLWl@AC%_Fd\U=Of;\WZ'MD(;7A\`_'PHp8AlG\uNchNiIYPM.P,.W>_hIQl]39"AEj:O04%kYS+`Wf4`Lj@f"V4)LRim+!+^_TarCZr*f3a%EH*C_"'BZE[W`]X6)I]bVlnF1-U%c@UF#BcEcd;\iYY]T5fuPh^0<nV^c6f:<AjiF6KZDp+O[ioCG])KD#'oC!#4l]ap+PEK!'*U%X(kn`2%=r4JqmX\i4#amkg_L.'7d3dT/7!.Y8Q8'K>8hT`tgK@CmI51a$%^gNhuip8[C=28(3"Q7,N8h%4"FXdpo4h*$hO&(He]%%%[Uq**E<21LidloWj.lS4@dp%AMGdU<=O>UUuSLki+sjf1*;+1N;OYq"'_G!&6+W@"j0qp1_#rY8Ld6Z#gh*Y!pH(B@r%I]K;O4e%4$oQT)M&I2VL]9.3PA<)p41<uV6/938S+PF]F%`h5bK+=@+7"E:hKh(VJ&ZP-a0,Xnme`8oaH)8X*oWm%(`9.Mi,M%`^S:OAZn3;%pfTtI`4M]l0r7!;DKa#'B%HO_+X^`2%6U>OQWVJ5+hkKi!0=>>*i"[UbKLl^I>ek'3t5o_]U+bMQ'7)Ja'"d:i+CM<;^46Ua4.,u%*H"o=EcAPAJKd%bi8J8R(8_@d\J[_;H0QS4X3%1.bK[&`gBVUc-J%I?S$c]_L^u:WClHOCEG&n9##UAqbd_"jgkV<*ClM7D1CMQ<%AcZsbelX-N;I.8c)WHO0F[.qi&ddGF]OB$cYq,a>OdVJDE^jSOkS$iFCttBq4tssa3a>6*r/mDPT1=2^1Y<&i$tmcm-!@3E7qRL1%$6m<AR8qj/0/ICX=co,'cM#?%Wo)%Db,PiPOdDc]$'!u-QN<=trp[5IYPM\Olp?8m?1>'Sp(k-UGHnL.Cel9;@oA9)-lY7c!m:pp%fG*[P.0`(Z]:(s1`tc'Y3'5%B4f.N6olXR6YVVe`2&eAiG(@BP0'9eT^XN<0"&0@D#`K150`1BKAAu]1"@cEs%1A,r\km?+)4K`e%("2&OeaGfbA162c%/I]]:iG7Yil9+n'Nj#l%kF\/'#['!_oe'0+JKr[fqj:UQ(dt^A5HC7:M'^WPS\NO2!$DHgiu]3^rRFX>&Bch%=j,[(jfl%F)A+_0>ZTDecDJ*8@qBm__UN"*T6Z`lbo-]M)0CAPAduur<5nKubo/V_lg27:X<I3hQfp>FrHFA@;ae(l=>(9i;p7k-%J&$fOgeb5E!AoARlt/MaTTS!R!d*gA!USdAG2:qkLAB!7Hd-0)GNE@?ZWTZNYg.okblW"3Ac["[=[Ob.n2MiPE>Fii!TKk\"#c*Z%V=*!\)XA6m7*KQ"7WD)d[@?^(jKipF)8F@pouh7(\m+u^i=$ZRcCt_[NBP=VKm5tGI;-=pbpB5KNk8820Ut!S/1R1+E7WaU=_BL[%27QHsIH$!f!+!KF!8VVF]_Kf1S70:31ge-<(-lRSDE#HCR^pu9Ac]JdZN.SmX>/gS"X=n7?\\Db2o>\i]aWpBDgUJeZVMB9_Ijs6%R]bHt?u@n*A4A>`Rl.!WnAYXD),H+`$'<sOQULKB(rUCW<4Y1/c>`&j?Gj9^L[uA.)XTn%]F8EQ`T*$<XJ(4J\).X-!P*rk!4q+t%5:2-LL9it$?o[2c!T,t^1D#AYCAPslL2VR2aF&t<8FAGOb+KQpm:JVZAH]mgG!S<F@lOjCjbC*;>C*=jmKlTP;VhFk@m9n#5XWYb%.j-<E^!2#f/R,9$eEiZ%gn=IfNErtY9+A_=rDa]B/Ji+F@:/.^&&VA<q_UXoLqCfJ-T$Ea'0[!p3hOt2/L%)1=p1rH)W,6M6YhIs%fkQLa5;^(GX*6qcJ%@%DmEdaHD5t&e>3[d[REt`qri;F5iuQN*FL^GWY3_4=+AN\aLM:G8U9-L<T!mMl[6s$smpYmXW0ACXd@iF#%k;Z6^mE+*XHY9\p\^9B=d3<[YUBT#6U[cs3Xa#%H:;dJSSb?an#bE.,O2auGGBnft/r4uDG"C@q[kn9SON-rN?D\cX>^t4$dq+h\%(gZeeBcF(L&7"(Ej/H:I^nYkW?VNA%/Q?c;4/MK<BN&iMZjg%l.=/2)%2F5j2bW12U^8_s9AAC"of_]jGdf,rHG?hHQqe;UV@fW7%jgIkCU[eJ2ca<Y&;fp6PVJ3VVTp(Kn%\fVS@@a>&l*>ZnZj<5BBb@_tBnTT/n?bq8A4k>8SOW,=S5!$(gJDrSa82MB;Ffs"4cS?,%.e=[H]aIVY'>j3Knmp3-":FH?SdoKt!htY16B+K(%+Dh`OZm:`;R.?Y4Ei0YaG3odZ-u-Y+5*G/I(Q?I?n4+Sql#?jO8rE.[>g,\%pTW4U)dHuQp/Yot8sUYA=C*.9\!^D&Xd^4P;p;A7)BnXRgJ<fI2&0-me%ELdB!#,QkA/Hfm?/)!DU%tA_iDN2_l=GerFS4C2WcUG%]W%?u4V*p(<==cL[T2@JRXSape]?=CTV45Dj#sk"K[X)k%o13X[2L[*=h?9sm\o!hhJGeBf^+q7&+6Bk,[Z8si!sPTZkd?#K6t^!%MEj;66VM>IQ3?SOE:[uK:VBjkFr]Zbl#>Sk<@4+@k$/arV+<Za#%Tf1>W<jm$O>%h0OAK[$-n5Z?`d5a_L/=eF,&g84V66_nQ(!r%E(<B&h<.9t>`WuJ(i^!rS.?jA0uSsY)^B7ga1EjF_PZ>8U1cnIlSWQ^M2092Bmsjhc&%qIfuo5WZdV':Rdc"4-U-JM`9^=VHK<##%-0*QF:5lC7.Cu#d"C,^"iP\9[(IJY%\1T_#***K39XSD0Z/Ss"!Sh8*]flcX5FcuiLu73KF@`CQ##<AU5$neOma44R&`X(`(Z@./%%Ki\FMDujK0VlRiIe[kp(Vqq7I(7(cNWXD!0^e[Dc/cc*R8t$tE)1(#%X]+S8s),]\7^kV4+*F%SMd]]dKSG8B>]7['Iu']TZ`&l%k\M)t*C4>UJ8T1XDt5VZ*B&keWS#e\YCOjXEqs[p=imMS`jNuJ`.pR>b/9#30inQCN!!JT&Y0HmTL^Un$l7ni">2B;S2tH^ElM)q%bqC:Gh2s?SE8oTR1;dP=eHsT2`&C4G0Oe)89-Z3$OHO=_o>ZRs'H-EE%jPs5n8T=#Wa1GI"\+HF*4^<FUS/'3PkK&u<2LN6iHJ$Q%A)1QI][GY^(icb"UO"q?0?/Mq-RQg!!SBF&AOh:b@o'3Z\T;4bC,mRM-O(5@CX;+\T?kUIS@B[>k1D/1DqClL[`T(+Hl4;nXg/Hf%k7`Z^-Vm4#59I3NhdP`Dm4Jp;.f2okT]r=GJ;V-a;^E"03]C%CkaEt'G_cu!Q'=\rVFjP6g.P[TAOktmBk2+^m%\lV-b!([kh7Kg%kdJVDo?(7a#)O-En0-F6q_:BiEQ^99fIHdjLuN3Nlj.Z1"bUTkjHkkYs-0]e]-OjcG$&me0`nga@\\u5;7=UWZd+Mh'0#R9QU^C!%*q-%R`cWYta&^kj+b:8JYZ1b3##B-;"Cs]$[oEXrg+!3g[S"8#hH@<f@W%&]%(8bZJ2L/H@jSQ[SZCRIH')mB]U2nQJ`uih"VSR&%>?.n,@X1[5]]1'bn(^h:kus88pL/cMY+bDQDPmW37us4H%sO6A4!dYC0hTS`M/+QsHgHeQE"]:*S[)&cLPKm24t8X*T5N<fG08*r%fiCm;G"P$RHFHfWjOu$bk]TS261n$t9Z^H,H3?#Mmu0l3\=F8.JFOW"r.n/3L'B.Smgs3S*B'Fi\Wme`piEZ;@Lm"d3*+26;/W3-%I5fD?q=e7If>%<SYQ+")IeiNKIJKpns*qEUnTY$.5C`Uqs82CprnY?dnlL>6TE"NoJ,V*Nq:#B:n`RZ7q1jJ!e%bkWl_"1H+91S4%rq%jnrkJ2Wq>(VOq=?iNb<PsecX6_Js88ep#KVA4L]>n3rS;u"%q#<c_9>!0~>%AI9_PrivateDataEnd